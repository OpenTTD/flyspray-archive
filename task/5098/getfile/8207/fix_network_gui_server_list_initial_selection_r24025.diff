Index: src/network/network_udp.cpp
===================================================================
--- src/network/network_udp.cpp	(wersja 24025)
+++ src/network/network_udp.cpp	(kopia robocza)
@@ -395,7 +395,7 @@
 
 	item->online = true;
 
-	UpdateNetworkGameWindow(false);
+	UpdateNetworkGameWindow();
 }
 
 void ClientNetworkUDPSocketHandler::Receive_MASTER_RESPONSE_LIST(Packet *p, NetworkAddress *client_addr)
Index: src/network/network_gamelist.cpp
===================================================================
--- src/network/network_gamelist.cpp	(wersja 24025)
+++ src/network/network_gamelist.cpp	(kopia robocza)
@@ -62,7 +62,7 @@
 			}
 			item->manually |= ins_item->manually;
 			if (item->manually) NetworkRebuildHostList();
-			UpdateNetworkGameWindow(false);
+			UpdateNetworkGameWindow();
 		}
 		free(ins_item);
 	}
@@ -105,7 +105,7 @@
 	}
 	DEBUG(net, 4, "[gamelist] added server to list");
 
-	UpdateNetworkGameWindow(false);
+	UpdateNetworkGameWindow();
 
 	return item;
 }
@@ -132,7 +132,7 @@
 
 			DEBUG(net, 4, "[gamelist] removed server from list");
 			NetworkRebuildHostList();
-			UpdateNetworkGameWindow(false);
+			UpdateNetworkGameWindow();
 			return;
 		}
 		prev_item = item;
Index: src/network/network_internal.h
===================================================================
--- src/network/network_internal.h	(wersja 24025)
+++ src/network/network_internal.h	(kopia robocza)
@@ -145,7 +145,7 @@
 void GetBindAddresses(NetworkAddressList *addresses, uint16 port);
 void NetworkAddServer(const char *b);
 void NetworkRebuildHostList();
-void UpdateNetworkGameWindow(bool unselect);
+void UpdateNetworkGameWindow();
 
 bool IsNetworkCompatibleVersion(const char *version);
 
Index: src/network/network_gui.cpp
===================================================================
--- src/network/network_gui.cpp	(wersja 24025)
+++ src/network/network_gui.cpp	(kopia robocza)
@@ -72,9 +72,9 @@
  * found on the network.
  * @param unselect unselect the currently selected item
  */
-void UpdateNetworkGameWindow(bool unselect)
+void UpdateNetworkGameWindow()
 {
-	InvalidateWindowData(WC_NETWORK_WINDOW, WN_NETWORK_WINDOW_GAME, unselect ? 1 : 0);
+	InvalidateWindowData(WC_NETWORK_WINDOW, WN_NETWORK_WINDOW_GAME, 0);
 }
 
 typedef GUIList<NetworkGameList*> GUIGameServerList;
@@ -447,8 +447,6 @@
 		InitializeTextBuffer(&this->text, this->edit_str_buf, this->edit_str_size, 120);
 		this->SetFocusedWidget(WID_NG_CLIENT);
 
-		UpdateNetworkGameWindow(true);
-
 		this->field = WID_NG_CLIENT;
 		this->last_joined = NetworkGameListAddItem(NetworkAddress(_settings_client.network.last_host, _settings_client.network.last_port));
 		this->server = this->last_joined;
@@ -790,10 +788,6 @@
 	 */
 	virtual void OnInvalidateData(int data = 0, bool gui_scope = true)
 	{
-		if (data == 1) {
-			this->server = NULL;
-			this->list_pos = SLP_INVALID;
-		}
 		this->servers.ForceRebuild();
 		this->SetDirty();
 	}
