Index: src/elrail.cpp
===================================================================
--- src/elrail.cpp	(revision 9579)
+++ src/elrail.cpp	(working copy)
@@ -269,15 +269,9 @@
 						continue; /* No neighbour, go looking for a better position */
 					}
 
-					SpriteID img = pylons_normal[temp];
-					SpriteID pal = PAL_NONE;
-					if (_transparent_opt & TO_BUILDINGS) {
-						SETBIT(img, PALETTE_MODIFIER_TRANSPARENT);
-						pal = PALETTE_TO_TRANSPARENT;
-					}
-
-					AddSortableSpriteToDraw(img, pal, x, y, 1, 1, 10,
-							GetSlopeZ(ti->x + x_pcp_offsets[i], ti->y + y_pcp_offsets[i]));
+					AddSortableSpriteToDraw(pylons_normal[temp], PAL_NONE, x, y, 1, 1, 10,
+							GetSlopeZ(ti->x + x_pcp_offsets[i], ti->y + y_pcp_offsets[i]), 
+							HASBIT(_transparent_opt, TO_BUILDINGS));
 					break; /* We already have drawn a pylon, bail out */
 				}
 			}
@@ -285,7 +279,7 @@
 	}
 
 	/* Don't draw a wire under a low bridge */
-	if (MayHaveBridgeAbove(ti->tile) && IsBridgeAbove(ti->tile) && !(_transparent_opt & TO_BUILDINGS)) {
+	if (MayHaveBridgeAbove(ti->tile) && IsBridgeAbove(ti->tile) && !(HASBIT(_transparent_opt, TO_BUILDINGS))) {
 		uint height = GetBridgeHeight(GetNorthernBridgeEnd(ti->tile));
 
 		if (height <= TilePixelHeight(ti->tile) + TILE_HEIGHT) return;
@@ -314,15 +308,9 @@
 			assert(!IsSteepSlope(tileh[TS_HOME]));
 			sss = &CatenarySpriteData[Wires[tileh_selector][t][PCPconfig]];
 
-			SpriteID img = sss->image;
-			SpriteID pal = PAL_NONE;
-			if (HASBIT(_transparent_opt, TO_BUILDINGS)) {
-				SETBIT(img, PALETTE_MODIFIER_TRANSPARENT);
-				pal = PALETTE_TO_TRANSPARENT;
-			}
-
-			AddSortableSpriteToDraw(img, pal, ti->x + sss->x_offset, ti->y + sss->y_offset,
-				sss->x_size, sss->y_size, sss->z_size, GetSlopeZ(ti->x + min(sss->x_offset, TILE_SIZE - 1), ti->y + min(sss->y_offset, TILE_SIZE - 1)) + sss->z_offset);
+			AddSortableSpriteToDraw(sss->image, PAL_NONE, ti->x + sss->x_offset, ti->y + sss->y_offset,
+				sss->x_size, sss->y_size, sss->z_size, GetSlopeZ(ti->x + min(sss->x_offset, TILE_SIZE - 1), ti->y + min(sss->y_offset, TILE_SIZE - 1)) + sss->z_offset,
+				HASBIT(_transparent_opt, TO_BUILDINGS));
 		}
 	}
 }
@@ -353,41 +341,27 @@
 
 	height = GetBridgeHeight(end);
 
-	SpriteID img = sss->image;
-	SpriteID pal = PAL_NONE;
-	if (HASBIT(_transparent_opt, TO_BUILDINGS)) {
-		SETBIT(img, PALETTE_MODIFIER_TRANSPARENT);
-		pal = PALETTE_TO_TRANSPARENT;
-	}
-
-	AddSortableSpriteToDraw(img, pal, ti->x + sss->x_offset, ti->y + sss->y_offset,
-		sss->x_size, sss->y_size, sss->z_size, height + sss->z_offset
+	AddSortableSpriteToDraw(sss->image, PAL_NONE, ti->x + sss->x_offset, ti->y + sss->y_offset,
+		sss->x_size, sss->y_size, sss->z_size, height + sss->z_offset,
+		HASBIT(_transparent_opt, TO_BUILDINGS)
 	);
 
 	/* Finished with wires, draw pylons */
 	/* every other tile needs a pylon on the northern end */
 	if (num % 2) {
 		if (axis == AXIS_X) {
-			img = pylons_bridge[0 + HASBIT(tlg, 0)];
-			if (HASBIT(_transparent_opt, TO_BUILDINGS)) SETBIT(img, PALETTE_MODIFIER_TRANSPARENT);
-			AddSortableSpriteToDraw(img, pal, ti->x, ti->y + 4 + 8 * HASBIT(tlg, 0), 1, 1, 10, height);
+			AddSortableSpriteToDraw(pylons_bridge[0 + HASBIT(tlg, 0)], PAL_NONE, ti->x, ti->y + 4 + 8 * HASBIT(tlg, 0), 1, 1, 10, height, HASBIT(_transparent_opt, TO_BUILDINGS));
 		} else {
-			img = pylons_bridge[2 + HASBIT(tlg, 1)];
-			if (HASBIT(_transparent_opt, TO_BUILDINGS)) SETBIT(img, PALETTE_MODIFIER_TRANSPARENT);
-			AddSortableSpriteToDraw(img, pal, ti->x + 4 + 8 * HASBIT(tlg, 1), ti->y, 1, 1, 10, height);
+			AddSortableSpriteToDraw(pylons_bridge[2 + HASBIT(tlg, 1)], PAL_NONE, ti->x + 4 + 8 * HASBIT(tlg, 1), ti->y, 1, 1, 10, height, HASBIT(_transparent_opt, TO_BUILDINGS));
 		}
 	}
 
 	/* need a pylon on the southern end of the bridge */
 	if (DistanceMax(ti->tile, start) == length) {
 		if (axis == AXIS_X) {
-			img = pylons_bridge[0 + HASBIT(tlg, 0)];
-			if (HASBIT(_transparent_opt, TO_BUILDINGS)) SETBIT(img, PALETTE_MODIFIER_TRANSPARENT);
-			AddSortableSpriteToDraw(img, pal, ti->x + 16, ti->y + 4 + 8 * HASBIT(tlg, 0), 1, 1, 10, height);
+			AddSortableSpriteToDraw(pylons_bridge[0 + HASBIT(tlg, 0)], PAL_NONE, ti->x + 16, ti->y + 4 + 8 * HASBIT(tlg, 0), 1, 1, 10, height, HASBIT(_transparent_opt, TO_BUILDINGS));
 		} else {
-			img = pylons_bridge[2 + HASBIT(tlg, 1)];
-			if (HASBIT(_transparent_opt, TO_BUILDINGS)) SETBIT(img, PALETTE_MODIFIER_TRANSPARENT);
-			AddSortableSpriteToDraw(img, pal, ti->x + 4 + 8 * HASBIT(tlg, 1), ti->y + 16, 1, 1, 10, height);
+			AddSortableSpriteToDraw(pylons_bridge[2 + HASBIT(tlg, 1)], PAL_NONE, ti->x + 4 + 8 * HASBIT(tlg, 1), ti->y + 16, 1, 1, 10, height, HASBIT(_transparent_opt, TO_BUILDINGS));
 		}
 	}
 }
@@ -418,7 +392,8 @@
 				AddSortableSpriteToDraw(
 					img, pal, ti->x + sss->x_offset, ti->y + sss->y_offset,
 					sss->x_size, sss->y_size, sss->z_size,
-					GetTileMaxZ(ti->tile) + sss->z_offset
+					GetTileMaxZ(ti->tile) + sss->z_offset,
+					HASBIT(_transparent_opt, TO_BUILDINGS)
 				);
 				return;
 			}
Index: src/gui.h
===================================================================
--- src/gui.h	(revision 9579)
+++ src/gui.h	(working copy)
@@ -88,6 +88,7 @@
 void ShowPlayerStations(PlayerID player);
 void ShowPlayerFinances(PlayerID player);
 void ShowPlayerCompany(PlayerID player);
+void ShowTransparencyToolbar(void);
 
 void ShowEstimatedCostOrIncome(int32 cost, int x, int y);
 void ShowErrorMessage(StringID msg_1, StringID msg_2, int x, int y);
Index: src/industry_cmd.cpp
===================================================================
--- src/industry_cmd.cpp	(revision 9579)
+++ src/industry_cmd.cpp	(working copy)
@@ -259,20 +259,15 @@
 	/* Add industry on top of the ground? */
 	image = dits->building.sprite;
 	if (image != 0) {
-		if (HASBIT(_transparent_opt, TO_INDUSTRIES)) {
-			SETBIT(image, PALETTE_MODIFIER_TRANSPARENT);
-			pal = PALETTE_TO_TRANSPARENT;
-		} else {
-			pal = dits->building.pal;
-		}
 
-		AddSortableSpriteToDraw(image, pal,
+		AddSortableSpriteToDraw(image, dits->building.pal,
 			ti->x + dits->subtile_x,
 			ti->y + dits->subtile_y,
 			dits->width  + 1,
 			dits->height + 1,
 			dits->dz,
-			z);
+			z,
+			HASBIT(_transparent_opt, TO_INDUSTRIES));
 
 		if (HASBIT(_transparent_opt, TO_INDUSTRIES)) return;
 	}
Index: src/lang/english.txt
===================================================================
--- src/lang/english.txt	(revision 9579)
+++ src/lang/english.txt	(working copy)
@@ -782,8 +782,6 @@
 STR_WAYPOINTS_DISPLAYED2                                        :{SETX 12}Waypoints displayed
 STR_02D0_FULL_ANIMATION                                         :{SETX 12}Full animation
 STR_02D2_FULL_DETAIL                                            :{SETX 12}Full detail
-STR_02D4_TRANSPARENT_BUILDINGS                                  :{SETX 12}Transparent buildings
-STR_TRANSPARENT_SIGNS                                           :{SETX 12}Transparent station signs
 ############ range ends here
 
 ############ range for menu starts
@@ -1061,6 +1059,7 @@
 STR_CONFIG_PATCHES_ERRMSG_DURATION                              :{LTBLUE}Duration of error message: {ORANGE}{STRING1}
 STR_CONFIG_PATCHES_POPULATION_IN_LABEL                          :{LTBLUE}Show town population in the town name label: {ORANGE}{STRING1}
 STR_CONFIG_PATCHES_INVISIBLE_TREES                              :{LTBLUE}Invisible trees (with transparent buildings): {ORANGE}{STRING1}
+STR_CONFIG_PATCHES_INVISIBLE_HOUSES                             :{LTBLUE}Invisible houses (with transparent buildings): {ORANGE}{STRING1}
 
 STR_CONFIG_PATCHES_LAND_GENERATOR                               :{LTBLUE}Land generator: {ORANGE}{STRING1}
 STR_CONFIG_PATCHES_LAND_GENERATOR_ORIGINAL                      :Original
@@ -1135,6 +1134,7 @@
 STR_CONFIG_PATCHES_TOOLBAR_POS_RIGHT                            :Right
 STR_CONFIG_PATCHES_SNAP_RADIUS                                  :{LTBLUE}Window snap radius: {ORANGE}{STRING1} px
 STR_CONFIG_PATCHES_SNAP_RADIUS_DISABLED                         :{LTBLUE}Window snap radius: {ORANGE}disabled
+STR_CONFIG_PATCHES_TRANSPARENCY_MEM                             :{LTBLUE}Toggle transparency memorization: {ORANGE}{STRING1}
 
 STR_CONFIG_PATCHES_GUI                                          :{BLACK}Interface
 STR_CONFIG_PATCHES_CONSTRUCTION                                 :{BLACK}Construction
Index: src/main_gui.cpp
===================================================================
--- src/main_gui.cpp	(revision 9579)
+++ src/main_gui.cpp	(working copy)
@@ -161,8 +161,6 @@
 		case  8: _display_opt ^= DO_WAYPOINTS;          break;
 		case  9: _display_opt ^= DO_FULL_ANIMATION;     break;
 		case 10: _display_opt ^= DO_FULL_DETAIL;        break;
-		case 11: TOGGLEBIT(_transparent_opt, TO_BUILDINGS); break;
-		case 12: TOGGLEBIT(_transparent_opt, TO_SIGNS);     break;
 	}
 	MarkWholeScreenDirty();
 }
@@ -956,7 +954,7 @@
 {
 	uint16 x = 0;
 
-	w = PopupMainToolbMenu(w, 2, STR_02C3_GAME_OPTIONS, 13, 0);
+	w = PopupMainToolbMenu(w, 2, STR_02C3_GAME_OPTIONS, 11, 0);
 
 	if (_display_opt & DO_SHOW_TOWN_NAMES)    SETBIT(x,  5);
 	if (_display_opt & DO_SHOW_STATION_NAMES) SETBIT(x,  6);
@@ -964,8 +962,6 @@
 	if (_display_opt & DO_WAYPOINTS)          SETBIT(x,  8);
 	if (_display_opt & DO_FULL_ANIMATION)     SETBIT(x,  9);
 	if (_display_opt & DO_FULL_DETAIL)        SETBIT(x, 10);
-	if (HASBIT(_transparent_opt, TO_BUILDINGS)) SETBIT(x, 11);
-	if (HASBIT(_transparent_opt, TO_SIGNS))     SETBIT(x, 12);
 	WP(w,menu_d).checked_items = x;
 }
 
@@ -2301,6 +2297,12 @@
 
 		if (_game_mode == GM_MENU) break;
 
+		/* Transparency toggle hotkeys */
+		if ((e->we.keypress.keycode >= (WKC_CTRL | '1')) && (e->we.keypress.keycode <= (WKC_CTRL | '7'))) {
+			TOGGLEBIT(_transparent_opt, e->we.keypress.keycode - (WKC_CTRL | '1'));
+			MarkWholeScreenDirty();
+		}
+
 		switch (e->we.keypress.keycode) {
 			case 'C':
 			case 'Z': {
@@ -2333,32 +2335,26 @@
 				break;
 #endif
 
-			case '1' | WKC_CTRL:
-			case '2' | WKC_CTRL:
-			case '3' | WKC_CTRL:
-			case '4' | WKC_CTRL:
-			case '5' | WKC_CTRL:
-			case '6' | WKC_CTRL:
-			case '7' | WKC_CTRL:
-				/* Transparency toggle hot keys */
-				TOGGLEBIT(_transparent_opt, e->we.keypress.key - '1');
-				MarkWholeScreenDirty();
-				break;
-
-			case 'X' | WKC_CTRL:
+			case 'X' | WKC_CTRL: {
 				ShowTransparencyToolbar();
 				break;
+			}
 
-			case 'X': {
-				static byte trans_opt = ~0;
-				if (_transparent_opt == 0) {
-					_transparent_opt = trans_opt;
+			case 'X': { // toggle all transparent (as normal behaviour)
+				/* do not touch TO_SIGNS which is bit 0, so use 6 bits from 1 to 6 */
+				static byte trans_opt = 0x3F; //initialize memorization variable
+
+				if (GB(_transparent_opt, 1, TO_END) == 0) {
+					/* If transparency is off, set to our remembered selection. */
+					if (_patches.memorize_transp) SB(_transparent_opt, 1, TO_END, trans_opt);
+					else SB(_transparent_opt, 1, TO_END, 0x3F);
 				} else {
-					trans_opt = _transparent_opt;
-					_transparent_opt = 0;
-				}
-				MarkWholeScreenDirty();
-				break;
+					/* Remember the existing selection, and then clear it. */
+					if (_patches.memorize_transp) trans_opt = GB(_transparent_opt, 1, TO_END);
+					SB(_transparent_opt, 1, TO_END, 0);
+ 				}
+ 				MarkWholeScreenDirty();
+ 				break;
 			}
 
 #ifdef ENABLE_NETWORK
Index: src/newgrf_house.cpp
===================================================================
--- src/newgrf_house.cpp	(revision 9579)
+++ src/newgrf_house.cpp	(working copy)
@@ -431,7 +431,8 @@
 				image, pal,
 				ti->x + dtss->delta_x, ti->y + dtss->delta_y,
 				dtss->size_x, dtss->size_y,
-				dtss->size_z, ti->z + dtss->delta_z
+				dtss->size_z, ti->z + dtss->delta_z,
+				HASBIT(_transparent_opt, TO_HOUSES)
 			);
 		} else {
 			AddChildSpriteScreen(image, pal, dtss->delta_x, dtss->delta_y);
Index: src/openttd.h
===================================================================
--- src/openttd.h	(revision 9579)
+++ src/openttd.h	(working copy)
@@ -179,6 +179,7 @@
 	DO_WAYPOINTS          = 1 << 6,
 };
 
+/* Transparent Options */
 enum {
 	TO_SIGNS,
 	TO_TREES,
@@ -187,6 +188,7 @@
 	TO_BUILDINGS,
 	TO_BRIDGES,
 	TO_STRUCTURES,
+	TO_END = TO_STRUCTURES, ///< this assignment avoid to change the number of widgets in every part where is used
 };
 
 /* Landscape types */
Index: src/rail_cmd.cpp
===================================================================
--- src/rail_cmd.cpp	(revision 9579)
+++ src/rail_cmd.cpp	(working copy)
@@ -1373,10 +1373,7 @@
 				image += relocation;
 			}
 
-			if (HASBIT(_transparent_opt, TO_BUILDINGS)) {
-				SETBIT(image, PALETTE_MODIFIER_TRANSPARENT);
-				pal = PALETTE_TO_TRANSPARENT;
-			} else if (HASBIT(image, PALETTE_MODIFIER_COLOR)) {
+			if (HASBIT(image, PALETTE_MODIFIER_COLOR)) {
 				pal = _drawtile_track_palette;
 			} else {
 				pal = dtss->pal;
@@ -1387,7 +1384,8 @@
 					image, pal,
 					ti->x + dtss->delta_x, ti->y + dtss->delta_y,
 					dtss->size_x, dtss->size_y,
-					dtss->size_z, ti->z + dtss->delta_z
+					dtss->size_z, ti->z + dtss->delta_z,
+					HASBIT(_transparent_opt, TO_BUILDINGS)
 				);
 			} else {
 				AddChildSpriteScreen(image, pal, dtss->delta_x, dtss->delta_y);
Index: src/road_cmd.cpp
===================================================================
--- src/road_cmd.cpp	(revision 9579)
+++ src/road_cmd.cpp	(working copy)
@@ -765,10 +765,7 @@
 				SpriteID image = dtss->image;
 				SpriteID pal;
 
-				if (HASBIT(_transparent_opt, TO_BUILDINGS)) {
-					SETBIT(image, PALETTE_MODIFIER_TRANSPARENT);
-					pal = PALETTE_TO_TRANSPARENT;
-				} else if (HASBIT(image, PALETTE_MODIFIER_COLOR)) {
+				if (HASBIT(image, PALETTE_MODIFIER_COLOR)) {
 					pal = palette;
 				} else {
 					pal = PAL_NONE;
@@ -778,7 +775,8 @@
 					image, pal,
 					ti->x + dtss->delta_x, ti->y + dtss->delta_y,
 					dtss->size_x, dtss->size_y,
-					dtss->size_z, ti->z
+					dtss->size_z, ti->z,
+					HASBIT(_transparent_opt, TO_BUILDINGS)
 				);
 			}
 			break;
Index: src/settings.cpp
===================================================================
--- src/settings.cpp	(revision 9579)
+++ src/settings.cpp	(working copy)
@@ -1312,12 +1312,14 @@
 	 SDT_VAR(Patches, toolbar_pos,        SLE_UINT8, S,MS,  0, 0,  2, 0, STR_CONFIG_PATCHES_TOOLBAR_POS,           v_PositionMainToolbar),
 	 SDT_VAR(Patches, window_snap_radius, SLE_UINT8, S,D0, 10, 1, 32, 0, STR_CONFIG_PATCHES_SNAP_RADIUS,           NULL),
 	SDT_BOOL(Patches, invisible_trees,               S, 0, false,        STR_CONFIG_PATCHES_INVISIBLE_TREES,       RedrawScreen),
+	SDT_BOOL(Patches, invisible_houses,              S, 0, false,        STR_CONFIG_PATCHES_INVISIBLE_HOUSES,      RedrawScreen),
 	SDT_BOOL(Patches, population_in_label,           S, 0,  true,        STR_CONFIG_PATCHES_POPULATION_IN_LABEL,   PopulationInLabelActive),
 	 SDT_VAR(Patches, map_x,              SLE_UINT8, S, 0,  8, 6, 11, 0, STR_CONFIG_PATCHES_MAP_X,                 NULL),
 	 SDT_VAR(Patches, map_y,              SLE_UINT8, S, 0,  8, 6, 11, 0, STR_CONFIG_PATCHES_MAP_Y,                 NULL),
 	SDT_BOOL(Patches, link_terraform_toolbar,        S, 0, false,        STR_CONFIG_PATCHES_LINK_TERRAFORM_TOOLBAR,NULL),
 	 SDT_VAR(Patches, liveries,           SLE_UINT8, S,MS,  2, 0,  2, 0, STR_CONFIG_PATCHES_LIVERIES,              RedrawScreen),
 	SDT_BOOL(Patches, prefer_teamchat,               S, 0, false,        STR_CONFIG_PATCHES_PREFER_TEAMCHAT,       NULL),
+	SDT_BOOL(Patches, memorize_transp,               S, 0, false,        STR_CONFIG_PATCHES_TRANSPARENCY_MEM      ,NULL),
 	SDT_VAR(Patches, scrollwheel_scrolling,SLE_UINT8,S,MS, 0,  0,  2, 0, STR_CONFIG_PATCHES_SCROLLWHEEL_SCROLLING, NULL),
 	SDT_VAR(Patches,scrollwheel_multiplier,SLE_UINT8,S, 0, 5,  1, 15, 1, STR_CONFIG_PATCHES_SCROLLWHEEL_MULTIPLIER,NULL),
 
Index: src/settings_gui.cpp
===================================================================
--- src/settings_gui.cpp	(revision 9579)
+++ src/settings_gui.cpp	(working copy)
@@ -591,10 +591,12 @@
 	"measure_tooltip",
 	"window_snap_radius",
 	"invisible_trees",
+	"invisible_houses",
 	"population_in_label",
 	"link_terraform_toolbar",
 	"liveries",
 	"prefer_teamchat",
+	"memorize_transp",
 	/* While the horizontal scrollwheel scrolling is written as general code, only
 	 *  the cocoa (OSX) driver generates input for it.
 	 *  Since it's also able to completely disable the scrollwheel will we display it on all platforms anyway */
Index: src/station_cmd.cpp
===================================================================
--- src/station_cmd.cpp	(revision 9579)
+++ src/station_cmd.cpp	(working copy)
@@ -1959,10 +1959,7 @@
 		}
 
 		SpriteID pal;
-		if (HASBIT(_transparent_opt, TO_BUILDINGS)) {
-			SETBIT(image, PALETTE_MODIFIER_TRANSPARENT);
-			pal = PALETTE_TO_TRANSPARENT;
-		} else if (HASBIT(image, PALETTE_MODIFIER_COLOR)) {
+		if (HASBIT(image, PALETTE_MODIFIER_COLOR)) {
 			pal = palette;
 		} else {
 			pal = dtss->pal;
@@ -1973,7 +1970,8 @@
 				image, pal,
 				ti->x + dtss->delta_x, ti->y + dtss->delta_y,
 				dtss->size_x, dtss->size_y,
-				dtss->size_z, ti->z + dtss->delta_z
+				dtss->size_z, ti->z + dtss->delta_z,
+				HASBIT(_transparent_opt, TO_BUILDINGS)
 			);
 		} else {
 			AddChildSpriteScreen(image, pal, dtss->delta_x, dtss->delta_y);
Index: src/town_cmd.cpp
===================================================================
--- src/town_cmd.cpp	(revision 9579)
+++ src/town_cmd.cpp	(working copy)
@@ -150,24 +150,21 @@
 
 	/* Add a house on top of the ground? */
 	image = dcts->building.sprite;
-	if (image != 0) {
-		if (HASBIT(_transparent_opt, TO_HOUSES)) {
-			SETBIT(image, PALETTE_MODIFIER_TRANSPARENT);
-			pal = PALETTE_TO_TRANSPARENT;
-		} else {
-			pal = dcts->building.pal;
-		}
+	
+	if (!HASBIT(_transparent_opt, TO_HOUSES) || !_patches.invisible_houses) {
+		if (image != 0) {
+			AddSortableSpriteToDraw(image, pal,
+				ti->x + dcts->subtile_x,
+				ti->y + dcts->subtile_y,
+				dcts->width + 1,
+				dcts->height + 1,
+				dcts->dz,
+				ti->z,
+				HASBIT(_transparent_opt, TO_HOUSES)
+			);
 
-		AddSortableSpriteToDraw(image, pal,
-			ti->x + dcts->subtile_x,
-			ti->y + dcts->subtile_y,
-			dcts->width + 1,
-			dcts->height + 1,
-			dcts->dz,
-			ti->z
-		);
-
-		if (HASBIT(_transparent_opt, TO_HOUSES)) return;
+			if (HASBIT(_transparent_opt, TO_HOUSES)) return;
+		}
 	}
 
 	{
Index: src/transparency_gui.cpp
===================================================================
--- src/transparency_gui.cpp	(revision 9579)
+++ src/transparency_gui.cpp	(working copy)
@@ -12,6 +12,22 @@
 #include "sound.h"
 #include "variables.h"
 
+enum TransparencyToolbarWidgets{
+	/* Widgets not toggled when pressing the X key */
+	TTW_WIDGET_SIGNS = 4,    ///< Make signs background transparent
+	
+	/* Widgets toggled when pressing the X key */
+	TTW_WIDGET_TREES,        ///< Make trees transparent
+	TTW_WIDGET_HOUSES,       ///< Make houses transparent
+	TTW_WIDGET_INDUSTRIES,   ///< Make Industries transparent
+	TTW_WIDGET_BUILDINGS,    ///< Make player buildings and structures transparent
+	TTW_WIDGET_BRIDGES,      ///< Make bridges transparent
+	TTW_WIDGET_STRUCTURES,   ///< Make unmovable structures transparent
+};
+
+/** Toggle the bits of the transparencies variable when clicking on a widget, and play a sound 
+ * @param widget been clicked. We have 7 transparencies, so we use a byte, remember this when adding new transparencies, if required
+ */
 static void Transparent_Click(byte widget)
 {
 	TOGGLEBIT(_transparent_opt, widget);
@@ -21,41 +37,46 @@
 static void TransparencyToolbWndProc(Window *w, WindowEvent *e)
 {
 	switch (e->event) {
-		case WE_PAINT:
-			for (uint i = 0; i < 7; i++) {
-				SetWindowWidgetLoweredState(w, i + 3, HASBIT(_transparent_opt, i));
-			}
-			DrawWindowWidgets(w);
-			break;
+	case WE_PAINT:
+		/* must be sure that the widgets show the transparency variable changes also when we use shortcuts */
+		for (uint i = TTW_WIDGET_SIGNS; i <= TTW_WIDGET_STRUCTURES; i++) 
+			SetWindowWidgetLoweredState(w, i, HASBIT(_transparent_opt, i - TTW_WIDGET_SIGNS));
 
-		case WE_CLICK:
-			if (e->we.click.widget >= 3) {
-				Transparent_Click(e->we.click.widget - 3);
-				MarkWholeScreenDirty();
-			}
-			break;
+		DrawWindowWidgets(w);
+		break;
+
+	case WE_CLICK:
+		if (e->we.click.widget >= TTW_WIDGET_SIGNS) {
+			Transparent_Click(e->we.click.widget - TTW_WIDGET_SIGNS);
+			MarkWholeScreenDirty();
+		}
+		break;
+
 	}
 }
 
 static const Widget _transparency_widgets[] = {
 { WWT_CLOSEBOX,   RESIZE_NONE,  7,   0,  10,   0,  13, STR_00C5,                 STR_018B_CLOSE_WINDOW},
-{  WWT_CAPTION,   RESIZE_NONE,  7,  11, 162,   0,  13, STR_TRANSPARENCY_TOOLB,   STR_018C_WINDOW_TITLE_DRAG_THIS},
-{WWT_STICKYBOX,   RESIZE_NONE,  7, 163, 174,   0,  13, STR_NULL,                 STR_STICKY_BUTTON},
+{  WWT_CAPTION,   RESIZE_NONE,  7,  11, 166,   0,  13, STR_TRANSPARENCY_TOOLB,   STR_018C_WINDOW_TITLE_DRAG_THIS},
+{WWT_STICKYBOX,   RESIZE_NONE,  7, 167, 178,   0,  13, STR_NULL,                 STR_STICKY_BUTTON},
 
-/* transparency widgets: transparent signs, trees, houses, industries, player's buildings */
+/* a little beam to divide the widgets which are toggled by the X key from the ones toggled manually, currently only transparent signs */
+{    WWT_PANEL,   RESIZE_NONE,  7,  22,  25,  14,  35, 0x0,                    STR_NULL},
+
+/* transparency widgets: transparent signs, trees, houses, industries, player's buildings, bridges and unmovable structures */
 {   WWT_IMGBTN,   RESIZE_NONE,  7,   0,  21,  14,  35, SPR_IMG_PLACE_SIGN,   STR_TRANSPARENT_SIGNS_DESC},
-{   WWT_IMGBTN,   RESIZE_NONE,  7,  22,  43,  14,  35, SPR_IMG_PLANTTREES,   STR_TRANSPARENT_TREES_DESC},
-{   WWT_IMGBTN,   RESIZE_NONE,  7,  44,  65,  14,  35, SPR_IMG_TOWN,         STR_TRANSPARENT_HOUSES_DESC},
-{   WWT_IMGBTN,   RESIZE_NONE,  7,  66,  87,  14,  35, SPR_IMG_INDUSTRY,     STR_TRANSPARENT_INDUSTRIES_DESC},
-{   WWT_IMGBTN,   RESIZE_NONE,  7,  88, 109,  14,  35, SPR_IMG_COMPANY_LIST, STR_TRANSPARENT_BUILDINGS_DESC},
-{   WWT_IMGBTN,   RESIZE_NONE,  7, 110, 152,  14,  35, SPR_IMG_BRIDGE,       STR_TRANSPARENT_BRIDGES_DESC},
-{   WWT_IMGBTN,   RESIZE_NONE,  7, 153, 174,  14,  35, SPR_IMG_TRANSMITTER,  STR_TRANSPARENT_STRUCTURES_DESC},
+{   WWT_IMGBTN,   RESIZE_NONE,  7,  26,  47,  14,  35, SPR_IMG_PLANTTREES,   STR_TRANSPARENT_TREES_DESC},
+{   WWT_IMGBTN,   RESIZE_NONE,  7,  48,  69,  14,  35, SPR_IMG_TOWN,         STR_TRANSPARENT_HOUSES_DESC},
+{   WWT_IMGBTN,   RESIZE_NONE,  7,  70,  91,  14,  35, SPR_IMG_INDUSTRY,     STR_TRANSPARENT_INDUSTRIES_DESC},
+{   WWT_IMGBTN,   RESIZE_NONE,  7,  92, 113,  14,  35, SPR_IMG_COMPANY_LIST, STR_TRANSPARENT_BUILDINGS_DESC},
+{   WWT_IMGBTN,   RESIZE_NONE,  7, 114, 156,  14,  35, SPR_IMG_BRIDGE,       STR_TRANSPARENT_BRIDGES_DESC},
+{   WWT_IMGBTN,   RESIZE_NONE,  7, 157, 178,  14,  35, SPR_IMG_TRANSMITTER,  STR_TRANSPARENT_STRUCTURES_DESC},
 
 {   WIDGETS_END},
 };
 
 static const WindowDesc _transparency_desc = {
-	WDP_ALIGN_TBR, 58+36, 175, 36,
+	WDP_ALIGN_TBR, 58+36, 179, 36,
 	WC_TRANSPARENCY_TOOLBAR, WC_NONE,
 	WDF_STD_TOOLTIPS | WDF_STD_BTN | WDF_DEF_WIDGET | WDF_STICKY_BUTTON,
 	_transparency_widgets,
Index: src/tree_cmd.cpp
===================================================================
--- src/tree_cmd.cpp	(revision 9579)
+++ src/tree_cmd.cpp	(working copy)
@@ -376,13 +376,8 @@
 		i = GetTreeCount(ti->tile) + 1;
 		do {
 			SpriteID image = s[0].sprite + (--i == 0 ? GetTreeGrowth(ti->tile) : 3);
-			SpriteID pal;
-			if (HASBIT(_transparent_opt, TO_TREES)) {
-				SETBIT(image, PALETTE_MODIFIER_TRANSPARENT);
-				pal = PALETTE_TO_TRANSPARENT;
-			} else {
-				pal = s[0].pal;
-			}
+			SpriteID pal = s[0].pal;
+
 			te[i].image = image;
 			te[i].pal   = pal;
 			te[i].x = d->x;
@@ -406,7 +401,7 @@
 
 			if (tep == NULL) break;
 
-			AddSortableSpriteToDraw(tep->image, tep->pal, ti->x + tep->x, ti->y + tep->y, 5, 5, 0x10, z);
+			AddSortableSpriteToDraw(tep->image, tep->pal, ti->x + tep->x, ti->y + tep->y, 5, 5, 0x10, z, HASBIT(_transparent_opt, TO_TREES));
 			tep->image = 0;
 		}
 	}
Index: src/tunnelbridge_cmd.cpp
===================================================================
--- src/tunnelbridge_cmd.cpp	(revision 9579)
+++ src/tunnelbridge_cmd.cpp	(working copy)
@@ -786,7 +786,6 @@
 		int back_height, front_height;
 		int i = z;
 		const byte *p;
-		SpriteID pal;
 
 		static const byte _tileh_bits[4][8] = {
 			{ 2, 1, 8, 4,  16,  2, 0, 9 },
@@ -795,13 +794,6 @@
 			{ 2, 4, 8, 1,   2, 16, 9, 0 }
 		};
 
-		if (HASBIT(_transparent_opt, TO_BRIDGES)) {
-			SETBIT(image, PALETTE_MODIFIER_TRANSPARENT);
-			pal = PALETTE_TO_TRANSPARENT;
-		} else {
-			pal = psid->pal;
-		}
-
 		p = _tileh_bits[(image & 1) * 2 + (axis == AXIS_X ? 0 : 1)];
 		front_height = ti->z + (ti->tileh & p[0] ? TILE_HEIGHT : 0);
 		back_height  = ti->z + (ti->tileh & p[1] ? TILE_HEIGHT : 0);
@@ -816,11 +808,11 @@
 			 * sprites is at the top
 			 */
 			if (z >= front_height) { // front facing pillar
-				AddSortableSpriteToDraw(image, pal, x, y, p[4], p[5], 1, z);
+				AddSortableSpriteToDraw(image, psid->pal, x, y, p[4], p[5], 1, z, HASBIT(_transparent_opt, TO_BRIDGES));
 			}
 
 			if (drawfarpillar && z >= back_height && z < i - TILE_HEIGHT) { // back facing pillar
-				AddSortableSpriteToDraw(image, pal, x - p[6], y - p[7], p[4], p[5], 1, z);
+				AddSortableSpriteToDraw(image, psid->pal, x - p[6], y - p[7], p[4], p[5], 1, z, HASBIT(_transparent_opt, TO_BRIDGES));
 			}
 		}
 	}
@@ -864,7 +856,6 @@
 static void DrawTile_TunnelBridge(TileInfo *ti)
 {
 	SpriteID image;
-	SpriteID pal;
 
 	if (IsTunnel(ti->tile)) {
 		if (GetTunnelTransportType(ti->tile) == TRANSPORT_RAIL) {
@@ -917,21 +908,13 @@
 
 		if (GetRailType(ti->tile) == RAILTYPE_ELECTRIC) DrawCatenary(ti);
 
-		image = psid->sprite;
-
 		/* draw ramp */
-		if (HASBIT(_transparent_opt, TO_BRIDGES)) {
-			SETBIT(image, PALETTE_MODIFIER_TRANSPARENT);
-			pal = PALETTE_TO_TRANSPARENT;
-		} else {
-			pal = psid->pal;
-		}
 
 		/* HACK set the height of the BB of a sloped ramp to 1 so a vehicle on
 		 * it doesn't disappear behind it
 		 */
 		AddSortableSpriteToDraw(
-			image, pal, ti->x, ti->y, 16, 16, ti->tileh == SLOPE_FLAT ? 1 : 8, ti->z
+			psid->sprite, psid->pal, ti->x, ti->y, 16, 16, ti->tileh == SLOPE_FLAT ? 1 : 8, ti->z, HASBIT(_transparent_opt, TO_BRIDGES)
 		);
 
 		DrawBridgeMiddle(ti);
@@ -974,8 +957,6 @@
 void DrawBridgeMiddle(const TileInfo* ti)
 {
 	const PalSpriteID* psid;
-	SpriteID image;
-	SpriteID pal;
 	uint base_offset;
 	TileIndex rampnorth;
 	TileIndex rampsouth;
@@ -1011,36 +992,21 @@
 	y = ti->y;
 	z = GetBridgeHeight(rampsouth) - 3;
 
-	image = psid->sprite;
-	if (HASBIT(_transparent_opt, TO_BRIDGES)) {
-		SETBIT(image, PALETTE_MODIFIER_TRANSPARENT);
-		pal = PALETTE_TO_TRANSPARENT;
-	} else {
-		pal = psid->pal;
-	}
-
 	if (axis == AXIS_X) {
-		AddSortableSpriteToDraw(image, pal, x, y, 16, 11, 1, z);
+		AddSortableSpriteToDraw(psid->sprite, psid->pal, x, y, 16, 11, 1, z, HASBIT(_transparent_opt, TO_BRIDGES));
 	} else {
-		AddSortableSpriteToDraw(image, pal, x, y, 11, 16, 1, z);
+		AddSortableSpriteToDraw(psid->sprite, psid->pal, x, y, 11, 16, 1, z, HASBIT(_transparent_opt, TO_BRIDGES));
 	}
 
 	psid++;
-	image = psid->sprite;
-	if (HASBIT(_transparent_opt, TO_BRIDGES)) {
-		SETBIT(image, PALETTE_MODIFIER_TRANSPARENT);
-		pal = PALETTE_TO_TRANSPARENT;
-	} else {
-		pal = psid->pal;
-	}
 
 	/* draw roof, the component of the bridge which is logically between the vehicle and the camera */
 	if (axis == AXIS_X) {
 		y += 12;
-		if (image & SPRITE_MASK) AddSortableSpriteToDraw(image, pal, x, y, 16, 1, 0x28, z);
+		if (psid->sprite & SPRITE_MASK) AddSortableSpriteToDraw(psid->sprite, psid->pal, x, y, 16, 1, 0x28, z, HASBIT(_transparent_opt, TO_BRIDGES));
 	} else {
 		x += 12;
-		if (image & SPRITE_MASK) AddSortableSpriteToDraw(image, pal, x, y, 1, 16, 0x28, z);
+		if (psid->sprite & SPRITE_MASK) AddSortableSpriteToDraw(psid->sprite, psid->pal, x, y, 1, 16, 0x28, z, HASBIT(_transparent_opt, TO_BRIDGES));
 	}
 
 	if (GetRailType(rampsouth) == RAILTYPE_ELECTRIC) DrawCatenary(ti);
@@ -1049,7 +1015,9 @@
 	if (ti->z + 5 == z) {
 		/* draw poles below for small bridges */
 		if (psid->sprite != 0) {
-			image = psid->sprite;
+			SpriteID image = psid->sprite;
+			SpriteID pal;
+
 			if (HASBIT(_transparent_opt, TO_BRIDGES)) {
 				SETBIT(image, PALETTE_MODIFIER_TRANSPARENT);
 				pal = PALETTE_TO_TRANSPARENT;
@@ -1057,7 +1025,7 @@
 				pal = psid->pal;
 			}
 
-			DrawGroundSpriteAt(image, pal, x, y, z);
+			DrawGroundSpriteAt(psid->sprite, pal, x, y, z);
 		}
 	} else if (_patches.bridge_pillars) {
 		/* draw pillars below for high bridges */
Index: src/unmovable_cmd.cpp
===================================================================
--- src/unmovable_cmd.cpp	(revision 9579)
+++ src/unmovable_cmd.cpp	(working copy)
@@ -111,8 +111,6 @@
 
 static void DrawTile_Unmovable(TileInfo *ti)
 {
-	SpriteID image;
-	SpriteID pal;
 
 	switch (GetUnmovableType(ti->tile)) {
 		case UNMOVABLE_TRANSMITTER:
@@ -124,17 +122,10 @@
 
 			dtus = &_draw_tile_unmovable_data[GetUnmovableType(ti->tile)];
 
-			image = dtus->image;
-			if (HASBIT(_transparent_opt, TO_STRUCTURES)) {
-				SETBIT(image, PALETTE_MODIFIER_TRANSPARENT);
-				pal = PALETTE_TO_TRANSPARENT;
-			} else {
-				pal = PAL_NONE;
-			}
-
 			AddSortableSpriteToDraw(
-				image, pal, ti->x | dtus->subcoord_x, ti->y | dtus->subcoord_y,
-				dtus->width, dtus->height, dtus->z_size, ti->z
+				dtus->image, PAL_NONE, ti->x | dtus->subcoord_x, ti->y | dtus->subcoord_y,
+				dtus->width, dtus->height, dtus->z_size, ti->z,
+				HASBIT(_transparent_opt, TO_STRUCTURES)
 			);
 			break;
 		}
@@ -142,23 +133,14 @@
 		case UNMOVABLE_STATUE:
 			DrawGroundSprite(SPR_CONCRETE_GROUND, PAL_NONE);
 
-			image = SPR_STATUE_COMPANY;
-			if (HASBIT(_transparent_opt, TO_STRUCTURES)) {
-				SETBIT(image, PALETTE_MODIFIER_TRANSPARENT);
-				pal = PALETTE_TO_TRANSPARENT;
-			} else {
-				pal = PLAYER_SPRITE_COLOR(GetTileOwner(ti->tile));
-			}
-			AddSortableSpriteToDraw(image, pal, ti->x, ti->y, 16, 16, 25, ti->z);
+			AddSortableSpriteToDraw(SPR_STATUE_COMPANY, PLAYER_SPRITE_COLOR(GetTileOwner(ti->tile)), ti->x, ti->y, 16, 16, 25, ti->z, HASBIT(_transparent_opt, TO_STRUCTURES));
 			break;
 
 		case UNMOVABLE_OWNED_LAND:
 			DrawClearLandTile(ti, 0);
 
-			image = SPR_BOUGHT_LAND;
-			pal = PLAYER_SPRITE_COLOR(GetTileOwner(ti->tile));
 			AddSortableSpriteToDraw(
-				image, pal,
+				SPR_BOUGHT_LAND, PLAYER_SPRITE_COLOR(GetTileOwner(ti->tile)),
 				ti->x + TILE_SIZE / 2, ti->y + TILE_SIZE / 2, 1, 1, 10, GetSlopeZ(ti->x + TILE_SIZE / 2, ti->y + TILE_SIZE / 2)
 			);
 			DrawBridgeMiddle(ti);
@@ -178,18 +160,12 @@
 			DrawGroundSprite(t->ground_sprite, palette);
 
 			foreach_draw_tile_seq(dtss, t->seq) {
-				image = dtss->image;
-				if (HASBIT(_transparent_opt, TO_STRUCTURES)) {
-					SETBIT(image, PALETTE_MODIFIER_TRANSPARENT);
-					pal = PALETTE_TO_TRANSPARENT;
-				} else {
-					pal = palette;
-				}
 				AddSortableSpriteToDraw(
-					image, pal,
+					dtss->image, palette,
 					ti->x + dtss->delta_x, ti->y + dtss->delta_y,
 					dtss->size_x, dtss->size_y,
-					dtss->size_z, ti->z + dtss->delta_z
+					dtss->size_z, ti->z + dtss->delta_z,
+					HASBIT(_transparent_opt, TO_STRUCTURES)
 				);
 			}
 			break;
Index: src/variables.h
===================================================================
--- src/variables.h	(revision 9579)
+++ src/variables.h	(working copy)
@@ -131,6 +131,7 @@
 	bool measure_tooltip;               // Show a permanent tooltip when dragging tools
 	byte liveries;                      // Options for displaying company liveries, 0=none, 1=self, 2=all
 	bool prefer_teamchat;               // Choose the chat message target with <ENTER>, true=all players, false=your team
+	bool invisible_houses;              // Make the transparent part of the houses invisible
 
 	uint8 toolbar_pos;                  // position of toolbars, 0=left, 1=center, 2=right
 	uint8 window_snap_radius;           // Windows snap at each other if closer than this
@@ -220,6 +221,8 @@
 
 	uint8 freight_trains; // Value to multiply the weight of cargo by
 
+	bool memorize_transp; // Memorize transparency options to toggle between reset and memorized instead of set-reset
+
 	/** YAPF settings */
 	YapfSettings  yapf;
 
@@ -282,7 +285,7 @@
 VARDEF int _autosave_ctr;
 
 VARDEF byte _display_opt;
-VARDEF byte _transparent_opt;
+VARDEF byte _transparent_opt; // Store the transparency informations, split from _display_opt
 VARDEF int _caret_timer;
 VARDEF uint32 _news_display_opt;
 VARDEF bool _news_ticker_sound;
Index: src/vehicle.cpp
===================================================================
--- src/vehicle.cpp	(revision 9579)
+++ src/vehicle.cpp	(working copy)
@@ -808,17 +808,14 @@
 	SpriteID image = v->cur_image;
 	SpriteID pal;
 
-	if (v->vehstatus & VS_SHADOW) {
-		SETBIT(image, PALETTE_MODIFIER_TRANSPARENT);
-		pal = PALETTE_TO_TRANSPARENT;
-	} else if (v->vehstatus & VS_DEFPAL) {
+	if (v->vehstatus & VS_DEFPAL) {
 		pal = (v->vehstatus & VS_CRASHED) ? PALETTE_CRASH : GetVehiclePalette(v);
 	} else {
 		pal = PAL_NONE;
 	}
 
 	AddSortableSpriteToDraw(image, pal, v->x_pos + v->x_offs, v->y_pos + v->y_offs,
-		v->sprite_width, v->sprite_height, v->z_height, v->z_pos);
+		v->sprite_width, v->sprite_height, v->z_height, v->z_pos, v->vehstatus & VS_SHADOW);
 }
 
 void ViewportAddVehicles(DrawPixelInfo *dpi)
Index: src/viewport.cpp
===================================================================
--- src/viewport.cpp	(revision 9579)
+++ src/viewport.cpp	(working copy)
@@ -469,8 +469,18 @@
 	AddChildSpriteScreen(image, pal, pt.x - vd->parent_list[-1]->left, pt.y - vd->parent_list[-1]->top);
 }
 
-
-void AddSortableSpriteToDraw(SpriteID image, SpriteID pal, int x, int y, int w, int h, byte dz, byte z)
+/** Draw a (transparent) sprite at given coordinates
+ * @param image the image to combine and draw,
+ * @param pal the provided palette,
+ * @param x position x of the sprite,
+ * @param y position y of the sprite,
+ * @param w width of the sprite,
+ * @param h height of the sprite,
+ * @param dz delta z, difference of elevation between sprite and parent sprite,
+ * @param z elevation of the sprite,
+ * @param transparent if true, switch the palette between the provided palette and the transparent palette
+ */
+void AddSortableSpriteToDraw(SpriteID image, SpriteID pal, int x, int y, int w, int h, byte dz, byte z, bool transparent)
 {
 	ViewportDrawer *vd = _cur_vd;
 	ParentSpriteToDraw *ps;
@@ -479,6 +489,12 @@
 
 	assert((image & SPRITE_MASK) < MAX_SPRITES);
 
+	/* make the sprites transparent with the right palette */
+	if (transparent) {
+		SETBIT(image, PALETTE_MODIFIER_TRANSPARENT);
+		pal = PALETTE_TO_TRANSPARENT;
+	}
+
 	if (vd->combine_sprites == 2) {
 		AddCombinedSprite(image, pal, x, y, z);
 		return;
@@ -1193,7 +1209,7 @@
 
 		/* Draw the rectangle if 'tranparent station signs' is off,
 		 * or if we are drawing a general text sign (STR_2806) */
-			if (!HASBIT(_transparent_opt, TO_SIGNS) || ss->string == STR_2806) {
+			if (!HASBIT(_transparent_opt, TO_BUILDINGS) || ss->string == STR_2806) {
 				DrawFrameRect(
 					x, y, x + w, bottom, ss->color,
 					HASBIT(_transparent_opt, TO_SIGNS) ? FR_TRANSPARENT : FR_NONE
Index: src/viewport.h
===================================================================
--- src/viewport.h	(revision 9579)
+++ src/viewport.h	(working copy)
@@ -46,7 +46,7 @@
 
 void DrawGroundSprite(SpriteID image, SpriteID pal);
 void DrawGroundSpriteAt(SpriteID image, SpriteID pal, int32 x, int32 y, byte z);
-void AddSortableSpriteToDraw(SpriteID image, SpriteID pal, int x, int y, int w, int h, byte dz, byte z);
+void AddSortableSpriteToDraw(SpriteID image, SpriteID pal, int x, int y, int w, int h, byte dz, byte z, bool transparent = false); // added a bool variable for the palette switching directly on the function
 void *AddStringToDraw(int x, int y, StringID string, uint32 params_1, uint32 params_2);
 void AddChildSpriteScreen(SpriteID image, SpriteID pal, int x, int y);
 
Index: src/water_cmd.cpp
===================================================================
--- src/water_cmd.cpp	(revision 9579)
+++ src/water_cmd.cpp	(working copy)
@@ -423,20 +423,11 @@
 	DrawGroundSprite(wdts++->image, PAL_NONE);
 
 	for (; wdts->delta_x != 0x80; wdts++) {
-		SpriteID image = wdts->image + base;
-		SpriteID pal;
-
-		if (HASBIT(_transparent_opt, TO_BUILDINGS)) {
-			SETBIT(image, PALETTE_MODIFIER_TRANSPARENT);
-			pal = PALETTE_TO_TRANSPARENT;
-		} else {
-			pal = palette;
-		}
-
-		AddSortableSpriteToDraw(image, pal,
+		AddSortableSpriteToDraw(wdts->image + base, palette,
 			ti->x + wdts->delta_x, ti->y + wdts->delta_y,
 			wdts->width, wdts->height,
-			wdts->unk, ti->z + wdts->delta_z);
+			wdts->unk, ti->z + wdts->delta_z,
+			HASBIT(_transparent_opt, TO_BUILDINGS));
 	}
 }
 
