Index: src/openttd.h
===================================================================
--- src/openttd.h	(revision 10239)
+++ src/openttd.h	(working copy)
@@ -69,8 +69,55 @@
 typedef uint16 GroupID;
 typedef uint16 EngineRenewID;
 typedef uint16 DestinationID;
-typedef int64 Money;
+//typedef int64 Money;
+class Money
+{
+private:
+	int64 value;
+public:
+	Money() { value = 0; }
+	Money(int64 v) { value = v; }
 
+	//operator int() const { return (int)value; }
+	//operator byte() const { return (byte)value; }
+	//operator uint64() const { return (uint64)value; }
+	//operator int64() const { return (int64)value; }
+
+	bool  operator <  (const Money other) const { return (value < other.value); }
+	bool  operator >  (const Money other) const { return (value > other.value); }
+	bool  operator <= (const Money other) const { return (value <= other.value); }
+	bool  operator >= (const Money other) const { return (value >= other.value); }
+	bool  operator == (const Money other) const { return (value == other.value); }
+	bool  operator != (const Money other) const { return (value != other.value); }
+	Money operator + (const Money other) const { return Money(value + other.value); }
+	Money operator - () const { return Money(-value); }
+	Money operator - (const Money other) const { return Money(value + other.value); }
+	Money operator * (const int64 other) const { return Money(value * other); }
+	Money operator / (const int64 other) const { return Money(value / other); }
+	Money operator % (const int64 other) const { return Money(value % other); }
+
+	// XXX: bitshifting money == classic example of premature optimization.  For clarity's sake, just use * and /.
+	Money operator << (const int shift) { return (value << shift); }
+	Money operator >> (const int shift) { return (value >> shift); }
+
+	Money operator ++ () { ++value; return *this; }
+	Money operator -- () { --value; return *this; }
+	Money operator ++ (int) { Money ret = *this; value++; return ret; }
+	Money operator -- (int) { Money ret = *this; value--; return ret; }
+	Money operator += (const Money other) { value += other.value; return *this; }
+	Money operator -= (const Money other) { value -= other.value; return *this; }
+	Money operator *= (const int64 other) { value *= other; return *this; }
+	Money operator /= (const int64 other) { value /= other; return *this; }
+	Money operator %= (const int64 other) { value %= other; return *this; }
+	Money operator >>= (const int shift) { value >>= shift; return *this; }
+	Money operator <<= (const int shift) { value <<= shift; return *this; }
+};
+bool  operator < (int64 a, Money b) { return Money(a) < b; }
+Money operator + (int64 a, Money b) { return Money(a) + b; }
+Money operator - (int64 a, Money b) { return Money(a) - b; }
+Money operator * (int64 a, Money b) { return b * a; }
+
+
 /* DestinationID must be at least as large as every these below, because it can
  * be any of them
  */
