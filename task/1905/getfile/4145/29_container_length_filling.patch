diff -r 65f668c56e62 src/widget.cpp
--- a/src/widget.cpp	Fri Mar 20 22:45:43 2009 +0100
+++ b/src/widget.cpp	Sat Mar 21 20:13:52 2009 +0100
@@ -892,8 +892,10 @@
 
 void NWidgetHorizontal::AssignMinimalPosition(int x, int y, int given_width, int given_height, bool allow_resize_x, bool allow_resize_y, bool rtl)
 {
+	int additional_length = given_width - this->min_x; // Additional width given to us.
+
 	assert(x >= 0 && y >= 0);
-	assert(given_width >= 0 && given_height >= 0);
+	assert(given_width >= this->min_x && given_height >= this->min_y);
 	this->pos_x = x;
 	this->pos_y = y;
 	this->min_x = given_width;
@@ -909,9 +911,7 @@
 	}
 
 	/* Fill and position the child widgets. */
-	int additional_length = given_width - this->min_x; // Additional width given to us.
 	int position = 0; // Place to put next child relative to origin of the container.
-
 	allow_resize_x = (this->resize_x > 0);
 	child_wid = rtl ? this->tail : this->head;
 	while (child_wid != NULL) {
@@ -992,8 +992,10 @@
 
 void NWidgetVertical::AssignMinimalPosition(int x, int y, int given_width, int given_height, bool allow_resize_x, bool allow_resize_y, bool rtl)
 {
+	int additional_length = given_height - this->min_y; // Additional height given to us.
+
 	assert(x >= 0 && y >= 0);
-	assert(given_width >= 0 && given_height >= 0);
+	assert(given_width >= this->min_x && given_height >= this->min_y);
 	this->pos_x = x;
 	this->pos_y = y;
 	this->min_x = given_width;
@@ -1005,13 +1007,11 @@
 	int num_changing_childs = 0; // Number of childs that can change size.
 	NWidgetBase *child_wid;
 	for (child_wid = this->head; child_wid != NULL; child_wid = child_wid->next) {
-		if (child_wid->fill_x) num_changing_childs++;
+		if (child_wid->fill_y) num_changing_childs++;
 	}
 
 	/* Fill and position the child widgets. */
-	int additional_length = given_height - this->min_y; // Additional width given to us.
 	int position = 0; // Place to put next child relative to origin of the container.
-
 	allow_resize_y = (this->resize_y > 0);
 	for (child_wid = this->head; child_wid != NULL; child_wid = child_wid->next) {
 		/* Decide about horizontal filling of the child. */
