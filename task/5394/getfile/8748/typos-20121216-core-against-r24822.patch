diff --git a/src/core/bitmath_func.cpp b/src/core/bitmath_func.cpp
index 1293716..af0200b 100644
--- a/src/core/bitmath_func.cpp
+++ b/src/core/bitmath_func.cpp
@@ -27,7 +27,7 @@ const uint8 _ffb_64[64] = {
  * Search the first set bit in a 32 bit variable.
  *
  * This algorithm is a static implementation of a log
- * conguence search algorithm. It checks the first half
+ * congruence search algorithm. It checks the first half
  * if there is a bit set search there further. And this
  * way further. If no bit is set return 0.
  *
@@ -55,7 +55,7 @@ uint8 FindFirstBit(uint32 x)
  * Search the last set bit in a 64 bit variable.
  *
  * This algorithm is a static implementation of a log
- * conguence search algorithm. It checks the second half
+ * congruence search algorithm. It checks the second half
  * if there is a bit set search there further. And this
  * way further. If no bit is set return 0.
  *
diff --git a/src/core/enum_type.hpp b/src/core/enum_type.hpp
index a633229..35a0cb2 100644
--- a/src/core/enum_type.hpp
+++ b/src/core/enum_type.hpp
@@ -89,7 +89,7 @@ template <typename Tenum_t> struct TinyEnumT;
 template <typename Tenum_t>
 struct TinyEnumT {
 	typedef Tenum_t enum_type;                      ///< expose our enumeration type (i.e. Trackdir) to outside
-	typedef EnumPropsT<Tenum_t> Props;              ///< make easier access to our enumeration propeties
+	typedef EnumPropsT<Tenum_t> Props;              ///< make easier access to our enumeration properties
 	typedef typename Props::storage storage_type;   ///< small storage type
 	static const enum_type begin = Props::begin;    ///< enum beginning (i.e. TRACKDIR_BEGIN)
 	static const enum_type end = Props::end;        ///< enum end (i.e. TRACKDIR_END)
diff --git a/src/core/pool_func.hpp b/src/core/pool_func.hpp
index 729f7d8..eafd057 100644
--- a/src/core/pool_func.hpp
+++ b/src/core/pool_func.hpp
@@ -108,7 +108,7 @@ DEFINE_POOL_METHOD(inline void *)::AllocateItem(size_t size, size_t index)
 		item = (Titem *)this->alloc_cache;
 		this->alloc_cache = this->alloc_cache->next;
 		if (Tzero) {
-			/* Explicitly casting to (void *) prevets a clang warning -
+			/* Explicitly casting to (void *) prevents a clang warning -
 			 * we are actually memsetting a (not-yet-constructed) object */
 			memset((void *)item, 0, sizeof(Titem));
 		}
diff --git a/src/core/pool_type.hpp b/src/core/pool_type.hpp
index f4b1558..131b5ce 100644
--- a/src/core/pool_type.hpp
+++ b/src/core/pool_type.hpp
@@ -45,7 +45,7 @@ struct PoolBase {
 	static void Clean(PoolType);
 
 	/**
-	 * Contructor registers this object in the pool vector.
+	 * Constructor registers this object in the pool vector.
 	 * @param pt type of this pool.
 	 */
 	PoolBase(PoolType pt) : type(pt)
@@ -278,7 +278,7 @@ struct Pool : PoolBase {
 	};
 
 private:
-	static const size_t NO_FREE_ITEM = MAX_UVALUE(size_t); ///< Contant to indicate we can't allocate any more items
+	static const size_t NO_FREE_ITEM = MAX_UVALUE(size_t); ///< Constant to indicate we can't allocate any more items
 
 	/**
 	 * Helper struct to cache 'freed' PoolItems so we
diff --git a/src/core/sort_func.hpp b/src/core/sort_func.hpp
index 4181fd6..470a0cc 100644
--- a/src/core/sort_func.hpp
+++ b/src/core/sort_func.hpp
@@ -37,7 +37,7 @@ static inline void QSortT(T *base, uint num, int (CDECL *comparator)(const T*, c
 /**
  * Type safe Gnome Sort.
  *
- * This is a slightly modifyied Gnome search. The basic
+ * This is a slightly modified Gnome search. The basic
  * Gnome search tries to sort already sorted list parts.
  * The modification skips these.
  *
