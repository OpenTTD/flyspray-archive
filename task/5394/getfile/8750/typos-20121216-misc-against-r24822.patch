diff --git a/src/misc/binaryheap.hpp b/src/misc/binaryheap.hpp
index 0a2e02e..092ab72 100644
--- a/src/misc/binaryheap.hpp
+++ b/src/misc/binaryheap.hpp
@@ -44,7 +44,7 @@
  * implementation.
  *
  * @par
- * For further information about the Binary Heap algotithm, see
+ * For further information about the Binary Heap algorithm, see
  * http://www.policyalmanac.org/games/binaryHeaps.htm
  *
  * @tparam T Type of the items stored in the binary heap
@@ -187,7 +187,7 @@ public:
 	/**
 	 * Get the LAST item in the binary tree.
 	 *
-	 * @note The last item is not neccesary the biggest!
+	 * @note The last item is not necessary the biggest!
 	 *
 	 * @return The last item
 	 */
@@ -266,7 +266,7 @@ public:
 
 	/**
 	 * Search for an item in the priority queue.
-	 *  Matching is done by comparing adress of the
+	 *  Matching is done by comparing address of the
 	 *  item.
 	 *
 	 * @param item The reference to the item
diff --git a/src/misc/blob.hpp b/src/misc/blob.hpp
index 0b14a7e..bf93693 100644
--- a/src/misc/blob.hpp
+++ b/src/misc/blob.hpp
@@ -31,7 +31,7 @@
  *     Always, when it allocates memory the allocated size is:
  *                                                      sizeof(BlobHeader) + <data capacity>
  *  3. Two 'virtual' members (items and capacity) are stored in the BlobHeader at beginning
- *     of the alloated block.
+ *     of the allocated block.
  *  4. The pointer of the union pobsize_ts behind the header (to the first data byte).
  *     When memory block is allocated, the sizeof(BlobHeader) it added to it.
  *  5. Benefits of this layout:
diff --git a/src/misc/countedptr.hpp b/src/misc/countedptr.hpp
index 0187422..5dfc9a7 100644
--- a/src/misc/countedptr.hpp
+++ b/src/misc/countedptr.hpp
@@ -140,7 +140,7 @@ template <class T> struct AdaptT {
 /**
  * Simple counted object. Use it as base of your struct/class if you want to use
  *  basic reference counting. Your struct/class will destroy and free itself when
- *  last reference to it is released (using Relese() method). The initial reference
+ *  last reference to it is released (using Release() method). The initial reference
  *  count (when it is created) is zero (don't forget AddRef() at least one time if
  *  not using CCountedPtr<T>.
  *
