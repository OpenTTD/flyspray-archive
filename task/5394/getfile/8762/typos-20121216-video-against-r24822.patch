diff --git a/src/video/allegro_v.cpp b/src/video/allegro_v.cpp
index e225b05..029cc06 100644
--- a/src/video/allegro_v.cpp
+++ b/src/video/allegro_v.cpp
@@ -29,7 +29,7 @@
 
 #ifdef _DEBUG
 /* Allegro replaces SEGV/ABRT signals meaning that the debugger will never
- * be triggered, so rereplace the signals and make the debugger userful. */
+ * be triggered, so rereplace the signals and make the debugger useful. */
 #include <signal.h>
 #endif
 
@@ -438,7 +438,7 @@ const char *VideoDriver_Allegro::Start(const char * const *parm)
 
 #if defined _DEBUG
 /* Allegro replaces SEGV/ABRT signals meaning that the debugger will never
- * be triggered, so rereplace the signals and make the debugger userful. */
+ * be triggered, so rereplace the signals and make the debugger useful. */
 	signal(SIGABRT, NULL);
 	signal(SIGSEGV, NULL);
 #endif
diff --git a/src/video/cocoa/cocoa_v.h b/src/video/cocoa/cocoa_v.h
index a27b3c2..9f7f55c 100644
--- a/src/video/cocoa/cocoa_v.h
+++ b/src/video/cocoa/cocoa_v.h
@@ -134,7 +134,7 @@ public:
 	virtual bool IsFullscreen() = 0;
 
 	/** Toggle between fullscreen and windowed mode
-	 * @return whether switch was successfull
+	 * @return whether switch was successful
 	 */
 	virtual bool ToggleFullscreen() { return false; };
 
@@ -180,7 +180,7 @@ public:
 	virtual void SetPortAlphaOpaque() { return; };
 
 	/** Whether the window was successfully resized
-	 * @return whether the window was succesfully resized
+	 * @return whether the window was successfully resized
 	 */
 	virtual bool WindowResized() { return false; };
 };
diff --git a/src/video/cocoa/fullscreen.mm b/src/video/cocoa/fullscreen.mm
index c8148ed..86de2cd 100644
--- a/src/video/cocoa/fullscreen.mm
+++ b/src/video/cocoa/fullscreen.mm
@@ -357,7 +357,7 @@ class FullscreenSubdriver: public CocoaSubdriver {
 
 		this->UpdatePalette(0, 256);
 
-		/* Move the mouse cursor to approx the same location */
+		/* Move the mouse cursor to approx. the same location */
 		CGPoint display_mouseLocation;
 		display_mouseLocation.x = mouseLocation.x * this->device_width;
 		display_mouseLocation.y = this->device_height - (mouseLocation.y * this->device_height);
diff --git a/src/video/cocoa/wnd_quickdraw.mm b/src/video/cocoa/wnd_quickdraw.mm
index 97dfac7..17ac21c 100644
--- a/src/video/cocoa/wnd_quickdraw.mm
+++ b/src/video/cocoa/wnd_quickdraw.mm
@@ -158,7 +158,7 @@ bool WindowQuickdrawSubdriver::SetVideoMode(int width, int height, int bpp)
 	this->GetDeviceInfo();
 
 	if (bpp > this->device_depth) {
-		DEBUG(driver, 0, "Cannot use a blitter with a higer screen depth than the display when running in windowed mode.");
+		DEBUG(driver, 0, "Cannot use a blitter with a higher screen depth than the display when running in windowed mode.");
 		this->setup = false;
 		return false;
 	}
diff --git a/src/video/dedicated_v.cpp b/src/video/dedicated_v.cpp
index cdc5983..4dcfbbe 100644
--- a/src/video/dedicated_v.cpp
+++ b/src/video/dedicated_v.cpp
@@ -237,7 +237,7 @@ static void DedicatedHandleKeyInput()
 #if defined(UNIX) || defined(__OS2__) || defined(PSP)
 	if (fgets(input_line, lengthof(input_line), stdin) == NULL) return;
 #else
-	/* Handle console input, and singal console thread, it can accept input again */
+	/* Handle console input, and signal console thread, it can accept input again */
 	assert_compile(lengthof(_win_console_thread_buffer) <= lengthof(input_line));
 	strecpy(input_line, _win_console_thread_buffer, lastof(input_line));
 	SetEvent(_hWaitForInputHandling);
diff --git a/src/video/sdl_v.cpp b/src/video/sdl_v.cpp
index 34d3121..050f746 100644
--- a/src/video/sdl_v.cpp
+++ b/src/video/sdl_v.cpp
@@ -620,7 +620,7 @@ void VideoDriver_SDL::MainLoop()
 #endif
 			if (old_ctrl_pressed != _ctrl_pressed) HandleCtrlChanged();
 
-			/* The gameloop is the part that can run asynchroniously. The rest
+			/* The gameloop is the part that can run asynchronously. The rest
 			 * except sleeping can't. */
 			if (_draw_threaded) _draw_mutex->EndCritical();
 
diff --git a/src/video/win32_v.cpp b/src/video/win32_v.cpp
index 2caa839..c72b87b 100644
--- a/src/video/win32_v.cpp
+++ b/src/video/win32_v.cpp
@@ -352,7 +352,7 @@ bool VideoDriver_Win32::MakeWindow(bool full_screen)
 	BlitterFactoryBase::GetCurrentBlitter()->PostResize();
 
 	GameSizeChanged(); // invalidate all windows, force redraw
-	return true; // the request succedded
+	return true; // the request succeeded
 }
 
 /** Do palette animation and blit to the window. */
