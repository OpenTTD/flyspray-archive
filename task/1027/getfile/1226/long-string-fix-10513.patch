Index: src/string.cpp
===================================================================
--- src/string.cpp	(revision 10513)
+++ src/string.cpp	(working copy)
@@ -55,7 +55,15 @@
 	return dst;
 }
 
+char* strecpy_c(char* dst, const char* src, const char* last)
+{
+	assert(dst <= last);
+	for (; *src != '\0' && dst != last; ++dst, ++src) *dst = *src;
+	*dst = '\0';
+	return dst;
+}
 
+
 char* CDECL str_fmt(const char* str, ...)
 {
 	char buf[4096];
Index: src/string.h
===================================================================
--- src/string.h	(revision 10513)
+++ src/string.h	(working copy)
@@ -26,6 +26,11 @@
  */
 char* strecat(char* dst, const char* src, const char* last);
 char* strecpy(char* dst, const char* src, const char* last);
+/**
+ * Like strecpy, but when string is too long, it will silently truncate it
+ * instead of crashing
+ */
+char* strecpy_c(char* dst, const char* src, const char* last);
 
 char* CDECL str_fmt(const char* str, ...);
 
Index: src/strings.cpp
===================================================================
--- src/strings.cpp	(revision 10513)
+++ src/strings.cpp	(working copy)
@@ -160,7 +160,7 @@
 			/* dynamic strings. These are NOT to be passed through the formatter,
 			 * but passed through verbatim. */
 			if (index < (STR_SPEC_USERSTRING & 0x7FF)) {
-				return strecpy(buffr, _bound_strings[index], last);
+				return strecpy_c(buffr, _bound_strings[index], last);
 			}
 
 			return FormatString(buffr, _userstring, NULL, 0, last);
