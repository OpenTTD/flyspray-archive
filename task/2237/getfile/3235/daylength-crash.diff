Index: src/settings.cpp
===================================================================
--- src/settings.cpp	(revision 14103)
+++ src/settings.cpp	(working copy)
@@ -1676,6 +1676,10 @@
 	 SDT_CONDVAR(GameSettings, economy.larger_towns,                 SLE_UINT8, 54, SL_MAX_VERSION, 0, D0,    4,     0,     255, 1, STR_CONFIG_PATCHES_LARGER_TOWNS,           NULL),
 	 SDT_CONDVAR(GameSettings, economy.initial_city_size,            SLE_UINT8, 56, SL_MAX_VERSION, 0, 0,     2,     1,      10, 1, STR_CONFIG_PATCHES_CITY_SIZE_MULTIPLIER,   NULL),
 	SDT_CONDBOOL(GameSettings, economy.mod_road_rebuild,                        77, SL_MAX_VERSION, 0, 0, false,                    STR_CONFIG_MODIFIED_ROAD_REBUILD,          NULL),
+	 SDT_CONDVAR(GameSettings, economy.daylength,                    SLE_UINT8, 94, SL_MAX_VERSION, 0, NC,    1,     1,     255, 1, STR_CONFIG_PATCHES_DAYLENGTH,              NULL),
+	SDT_CONDBOOL(GameSettings, economy.daylength_vrcfactor,                     94, SL_MAX_VERSION, 0, 0,  true,                    STR_CONFIG_PATCHES_DAYLENGTH_VRCFACTOR,    NULL),
+	SDT_CONDBOOL(GameSettings, economy.daylength_cdifactor,                     94, SL_MAX_VERSION, 0, 0, false,                    STR_CONFIG_PATCHES_DAYLENGTH_CDIFACTOR,    NULL),
+	SDT_CONDBOOL(GameSettings, economy.daylength_iprfactor,                     94, SL_MAX_VERSION, 0, 0,  true,                    STR_CONFIG_PATCHES_DAYLENGTH_IPRFACTOR,    NULL),
 
 	    SDT_BOOL(GameSettings, ai.ainew_active,                                                     0, 0, false,                    STR_CONFIG_PATCHES_AINEW_ACTIVE,           AiNew_PatchActive_Warning),
 	    SDT_BOOL(GameSettings, ai.ai_in_multiplayer,                                                0, 0, false,                    STR_CONFIG_PATCHES_AI_IN_MULTIPLAYER,      Ai_In_Multiplayer_Warning),
Index: src/lang/english.txt
===================================================================
--- src/lang/english.txt	(revision 14103)
+++ src/lang/english.txt	(working copy)
@@ -151,6 +151,7 @@
 STR_ABBREV_ALL                                                  :{TINYFONT}ALL
 STR_00AE                                                        :{WHITE}{DATE_SHORT}
 STR_00AF                                                        :{WHITE}{DATE_LONG}
+STR_DATE_TIME                                                   :{WHITE}{DATE_TIME}
 STR_00B0_MAP                                                    :{WHITE}Map - {STRING}
 STR_00B1_GAME_OPTIONS                                           :{WHITE}Game Options
 STR_00B2_MESSAGE                                                :{YELLOW}Message
@@ -835,6 +836,8 @@
 STR_02F5                                                        :{BLACK}{SKIP}{SKIP}{SKIP}{SKIP}{SKIP}{STRING}
 STR_02F6_SELECT_INTERVAL_BETWEEN                                :{BLACK}Select interval between automatic game saves
 STR_02F7_OFF                                                    :Off
+STR_EVERY_DAY                                                   :Every day
+STR_EVERY_WEEK                                                  :Every week
 STR_02F8_EVERY_3_MONTHS                                         :Every 3 months
 STR_02F9_EVERY_6_MONTHS                                         :Every 6 months
 STR_02FA_EVERY_12_MONTHS                                        :Every 12 months
@@ -1210,6 +1213,11 @@
 STR_CONFIG_PATCHES_CITY_SIZE_MULTIPLIER                         :{LTBLUE}Initial city size multiplier: {ORANGE}{STRING1}
 STR_CONFIG_MODIFIED_ROAD_REBUILD                                :{LTBLUE}Remove absurd road-elements during the road construction
 
+STR_CONFIG_PATCHES_DAYLENGTH                                    :{LTBLUE}Daylength factor: {ORANGE}{STRING1}
+STR_CONFIG_PATCHES_DAYLENGTH_VRCFACTOR                          :{LTBLUE}Daylength affects vehicle running costs
+STR_CONFIG_PATCHES_DAYLENGTH_CDIFACTOR                          :{LTBLUE}Daylength affects cargo delivery prices
+STR_CONFIG_PATCHES_DAYLENGTH_IPRFACTOR                          :{LTBLUE}Daylength affects industry production rates
+
 STR_CONFIG_PATCHES_GUI                                          :{BLACK}Interface
 STR_CONFIG_PATCHES_CONSTRUCTION                                 :{BLACK}Construction
 STR_CONFIG_PATCHES_VEHICLES                                     :{BLACK}Vehicles
@@ -2779,7 +2787,7 @@
 STR_TIMETABLE_TRAVEL_FOR                                        :{SETX 30}Travel for {STRING1}
 STR_TIMETABLE_STAY_FOR                                          :and stay for {STRING1}
 STR_TIMETABLE_AND_TRAVEL_FOR                                    :and travel for {STRING1}
-STR_TIMETABLE_DAYS                                              :{COMMA} day{P "" s}
+STR_TIMETABLE_DAYS                                            :{COMMA} day{P "" s}
 STR_TIMETABLE_TICKS                                             :{COMMA} tick{P "" s}
 
 STR_HEADING_FOR_TRAIN_DEPOT                                     :{ORANGE}Heading for {TOWN} Train Depot
@@ -3469,6 +3477,7 @@
 STR_DATE_TINY                                                   :{RAW_STRING}-{RAW_STRING}-{NUM}
 STR_DATE_SHORT                                                  :{STRING} {NUM}
 STR_DATE_LONG                                                   :{STRING} {STRING} {NUM}
+STR_DATE_WITH_TIME                                              :{NUM}:{NUM}{NUM}, {STRING} {STRING} {NUM}
 
 ########
 
Index: src/settings_gui.cpp
===================================================================
--- src/settings_gui.cpp	(revision 14103)
+++ src/settings_gui.cpp	(working copy)
@@ -47,6 +47,8 @@
 
 static const StringID _autosave_dropdown[] = {
 	STR_02F7_OFF,
+	STR_EVERY_DAY,
+	STR_EVERY_WEEK,
 	STR_AUTOSAVE_1_MONTH,
 	STR_02F8_EVERY_3_MONTHS,
 	STR_02F9_EVERY_6_MONTHS,
@@ -663,6 +665,10 @@
 	"economy.town_growth_rate",
 	"economy.larger_towns",
 	"economy.initial_city_size",
+	"economy.daylength",
+	"economy.daylength_vrcfactor",
+	"economy.daylength_cdifactor",
+	"economy.daylength_iprfactor",
 };
 
 static const char *_patches_ai[] = {
Index: src/date.cpp
===================================================================
--- src/date.cpp	(revision 14103)
+++ src/date.cpp	(working copy)
@@ -175,8 +175,10 @@
 extern void ShowEndGameChart();
 
 
-static const Month _autosave_months[] = {
+static uint8 _autosave_interval[] = {
 	 0, ///< never
+	 1, ///< every day
+	 7, ///< every week
 	 1, ///< every month
 	 3, ///< every 3 months
 	 6, ///< every 6 months
@@ -184,14 +186,14 @@
 };
 
 /**
- * Runs the day_proc for every DAY_TICKS vehicle starting at daytick.
+ * Runs the day_proc for every day vehicle starting at daytick.
  */
 static void RunVehicleDayProc(uint daytick)
 {
 	uint total = GetMaxVehicleIndex() + 1;
 	uint i;
 
-	for (i = daytick; i < total; i += DAY_TICKS) {
+	for (i = daytick; i < total; i += DayLength()) {
 		Vehicle *v = GetVehicle(i);
 
 		if (v->IsValid()) {
@@ -215,14 +217,24 @@
 
 	/* increase day, and check if a new day is there? */
 	_tick_counter++;
+	_date_fract++;
 
-	_date_fract++;
-	if (_date_fract < DAY_TICKS) return;
+	if(!_pause_game && _settings_client.gui.status_long_date && _settings_game.economy.daylength > 14) {
+		SetWindowDirty(FindWindowById(WC_STATUS_BAR, 0));
+	}
+
+	if (_date_fract < DayLength()) return;
+
 	_date_fract = 0;
 
 	/* yeah, increase day counter and call various daily loops */
 	_date++;
 
+//	if (_settings_client.gui.autosave < 3 && _settings_client.gui.autosave != 0 && (_date % _autosave_interval[_settings_client.gui.autosave]) == 0) {
+//		_do_autosave = true;
+//		RedrawAutosave();
+//	}
+
 #ifdef ENABLE_NETWORK
 	NetworkChatMessageDailyLoop();
 #endif /* ENABLE_NETWORK */
@@ -248,7 +260,7 @@
 		SaveOrLoad(name, SL_SAVE, AUTOSAVE_DIR);
 		DebugDumpCommands("ddc:save:%s\n", name);
 #endif /* DUMP_COMMANDS */
-		if (_settings_client.gui.autosave != 0 && (_cur_month % _autosave_months[_settings_client.gui.autosave]) == 0) {
+		if (_settings_client.gui.autosave > 2 && (_cur_month % _autosave_interval[_settings_client.gui.autosave]) == 0) {
 			_do_autosave = true;
 			RedrawAutosave();
 		}
Index: src/timetable_cmd.cpp
===================================================================
--- src/timetable_cmd.cpp	(revision 14103)
+++ src/timetable_cmd.cpp	(working copy)
@@ -194,8 +194,11 @@
 		if (timetabled == 0) {
 			/* Round the time taken up to the nearest day, as this will avoid
 			 * confusion for people who are timetabling in days, and can be
-			 * adjusted later by people who aren't. */
-			time_taken = (((time_taken - 1) / DAY_TICKS) + 1) * DAY_TICKS;
+			 * adjusted later by people who aren't.
+			 * Rounding is only done when daylength is set to 1 and thus days are very short. */
+			if (_settings_game.economy.daylength == 1) {
+				time_taken = (((time_taken - 1) / DAY_TICKS) + 1) * DAY_TICKS;
+			}
 
 			if (!v->current_order.IsType(OT_CONDITIONAL)) {
 				ChangeTimetable(v, v->cur_order_index, time_taken, travelling);
Index: src/build_vehicle_gui.cpp
===================================================================
--- src/build_vehicle_gui.cpp	(revision 14103)
+++ src/build_vehicle_gui.cpp	(working copy)
@@ -544,7 +544,7 @@
 
 	/* Running cost */
 	if (rvi->running_cost_class != 0xFF) {
-		SetDParam(0, GetEngineProperty(engine_number, 0x0D, rvi->running_cost) * GetPriceByIndex(rvi->running_cost_class) >> 8);
+		SetDParam(0, GetEngineProperty(engine_number, 0x0D, rvi->running_cost) * VehRunCostFactor() * GetPriceByIndex(rvi->running_cost_class) >> 8);
 		DrawString(x, y, STR_PURCHASE_INFO_RUNNINGCOST, TC_FROMSTRING);
 		y += 10;
 	}
@@ -572,7 +572,7 @@
 	y += 10;
 
 	/* Running cost */
-	SetDParam(0, rvi->running_cost * GetPriceByIndex(rvi->running_cost_class) >> 8);
+	SetDParam(0, rvi->running_cost * VehRunCostFactor() * GetPriceByIndex(rvi->running_cost_class) >> 8);
 	DrawString(x, y, STR_PURCHASE_INFO_RUNNINGCOST, TC_FROMSTRING);
 	y += 10;
 
@@ -597,7 +597,7 @@
 	y += 10;
 
 	/* Running cost */
-	SetDParam(0, GetEngineProperty(engine_number, 0x0F, svi->running_cost) * _price.ship_running >> 8);
+	SetDParam(0, GetEngineProperty(engine_number, 0x0F, svi->running_cost) * VehRunCostFactor() * _price.ship_running >> 8);
 	DrawString(x, y, STR_PURCHASE_INFO_RUNNINGCOST, TC_FROMSTRING);
 	y += 10;
 
@@ -632,7 +632,7 @@
 	y += 10;
 
 	/* Running cost */
-	SetDParam(0, GetEngineProperty(engine_number, 0x0E, avi->running_cost) * _price.aircraft_running >> 8);
+	SetDParam(0, GetEngineProperty(engine_number, 0x0E, avi->running_cost) * VehRunCostFactor() * _price.aircraft_running >> 8);
 	DrawString(x, y, STR_PURCHASE_INFO_RUNNINGCOST, TC_FROMSTRING);
 	y += 10;
 
Index: src/table/control_codes.h
===================================================================
--- src/table/control_codes.h	(revision 14103)
+++ src/table/control_codes.h	(working copy)
@@ -53,6 +53,7 @@
 	SCC_DATE_TINY,
 	SCC_DATE_SHORT,
 	SCC_DATE_LONG,
+	SCC_DATE_TIME,
 
 	SCC_STRING1,
 	SCC_STRING2,
Index: src/ship_cmd.cpp
===================================================================
--- src/ship_cmd.cpp	(revision 14103)
+++ src/ship_cmd.cpp	(working copy)
@@ -171,7 +171,7 @@
 
 	if (this->running_ticks == 0) return;
 
-	CommandCost cost(EXPENSES_SHIP_RUN, GetVehicleProperty(this, 0x0F, ShipVehInfo(this->engine_type)->running_cost) * _price.ship_running * this->running_ticks / (364 * DAY_TICKS));
+	CommandCost cost(EXPENSES_SHIP_RUN, GetVehicleProperty(this, 0x0F, ShipVehInfo(this->engine_type)->running_cost) * _price.ship_running * this->running_ticks * VehRunCostFactor() / (364 * DayLength()));
 
 	this->profit_this_year -= cost.GetCost();
 	this->running_ticks = 0;
Index: src/train_cmd.cpp
===================================================================
--- src/train_cmd.cpp	(revision 14103)
+++ src/train_cmd.cpp	(working copy)
@@ -4366,7 +4366,7 @@
 
 		if (this->running_ticks != 0) {
 			/* running costs */
-			CommandCost cost(EXPENSES_TRAIN_RUN, this->GetRunningCost() * this->running_ticks / (364 * DAY_TICKS));
+			CommandCost cost(EXPENSES_TRAIN_RUN, this->GetRunningCost() * VehRunCostFactor() * this->running_ticks / (364 * DayLength()));
 
 			this->profit_this_year -= cost.GetCost();
 			this->running_ticks = 0;
Index: src/settings_type.h
===================================================================
--- src/settings_type.h	(revision 14103)
+++ src/settings_type.h	(working copy)
@@ -312,6 +312,10 @@
 	TownLayoutByte town_layout;              ///< select town layout
 	bool   station_noise_level;              ///< build new airports when the town noise level is still within accepted limits
 	uint16 town_noise_population[3];         ///< population to base decision on noise evaluation (@see town_council_tolerance)
+	byte   daylength;                        ///< Allows to set the daylength.
+	bool   daylength_vrcfactor;              ///< Wheter daylength has an effect on vehicle running costs or not.
+	bool   daylength_cdifactor;              ///< Wheter daylength has an effect on cargo delivery graphs.
+	bool   daylength_iprfactor;              ///< Wheter daylength has an effect on industry production rates.
 };
 
 /** Settings related to stations. */
Index: src/timetable_gui.cpp
===================================================================
--- src/timetable_gui.cpp	(revision 14103)
+++ src/timetable_gui.cpp	(working copy)
@@ -17,6 +17,7 @@
 #include "player_func.h"
 #include "order_func.h"
 #include "settings_type.h"
+#include "date_func.h"
 
 #include "table/strings.h"
 
@@ -38,12 +39,19 @@
 
 void SetTimetableParams(int param1, int param2, uint32 time)
 {
+	uint32 fract;
+
 	if (_settings_client.gui.timetable_in_ticks) {
 		SetDParam(param1, STR_TIMETABLE_TICKS);
 		SetDParam(param2, time);
 	} else {
 		SetDParam(param1, STR_TIMETABLE_DAYS);
-		SetDParam(param2, time / DAY_TICKS);
+		SetDParam(param2, time / DayLength());
+
+		fract = time % DayLength();
+		SetDParam(param2+1,  fract *   24 / DayLength());
+		SetDParam(param2+2, (fract *  144 / DayLength()) %  6);
+		SetDParam(param2+3, (fract * 1440 / DayLength()) % 10);
 	}
 }
 
@@ -173,7 +181,7 @@
 		}
 		y += 10;
 
-		if (v->lateness_counter == 0 || (!_settings_client.gui.timetable_in_ticks && v->lateness_counter / DAY_TICKS == 0)) {
+		if (v->lateness_counter == 0 || (!_settings_client.gui.timetable_in_ticks && v->lateness_counter / DayLength() == 0)) {
 			DrawString(2, y, STR_TIMETABLE_STATUS_ON_TIME, TC_BLACK);
 		} else {
 			SetTimetableParams(0, 1, abs(v->lateness_counter));
@@ -223,7 +231,7 @@
 
 				if (order != NULL) {
 					uint time = (selected % 2 == 1) ? order->travel_time : order->wait_time;
-					if (!_settings_client.gui.timetable_in_ticks) time /= DAY_TICKS;
+					if (!_settings_client.gui.timetable_in_ticks) time /= DayLength();
 
 					if (time != 0) {
 						SetDParam(0, time);
@@ -260,7 +268,7 @@
 		uint32 p1 = PackTimetableArgs(v, this->sel_index);
 
 		uint64 time = StrEmpty(str) ? 0 : strtoul(str, NULL, 10);
-		if (!_settings_client.gui.timetable_in_ticks) time *= DAY_TICKS;
+		if (!_settings_client.gui.timetable_in_ticks) time *= DayLength();
 
 		uint32 p2 = minu(time, UINT16_MAX);
 
Index: src/strings.cpp
===================================================================
--- src/strings.cpp	(revision 14103)
+++ src/strings.cpp	(working copy)
@@ -277,6 +277,15 @@
 	return FormatString(buff, GetStringPtr(STR_DATE_LONG), args, 0, last);
 }
 
+static char *FormatDateWithTime(char *buff, Date date, const char* last)
+{
+	YearMonthDay ymd;
+	ConvertDateToYMD(date, &ymd);
+
+	int64 args[6] = { GetHours(), GetMinutes_high(), GetMinutes_low(), ymd.day + STR_01AC_1ST - 1, STR_0162_JAN + ymd.month, ymd.year };
+	return FormatString(buff, GetStringPtr(STR_DATE_WITH_TIME), args, 0, last);
+}
+
 static char *FormatMonthAndYear(char *buff, Date date, const char* last)
 {
 	YearMonthDay ymd;
@@ -565,6 +574,10 @@
 				buff = FormatYmdString(buff, GetInt32(&argv), last);
 				break;
 
+			case SCC_DATE_TIME: // {DATE_TIME}
+				buff = FormatDateWithTime(buff, GetInt32(&argv), last);
+				break;
+
 			case SCC_DATE_SHORT: // {DATE_SHORT}
 				buff = FormatMonthAndYear(buff, GetInt32(&argv), last);
 				break;
Index: src/economy.cpp
===================================================================
--- src/economy.cpp	(revision 14103)
+++ src/economy.cpp	(working copy)
@@ -1151,6 +1151,12 @@
 		SlObject(&_subsidies[index], _subsidies_desc);
 }
 
+/* Nappe1: Apply Day Length Multiplier as Divider in Cargo rates.*/
+Money DayLengthEffectToIncome(Money original_payment_rate)
+{
+	return (_settings_game.economy.daylength_cdifactor ? original_payment_rate / Money(_settings_game.economy.daylength) : original_payment_rate);
+}
+
 Money GetTransportedGoodsIncome(uint num_pieces, uint dist, byte transit_days, CargoID cargo_type)
 {
 	const CargoSpec *cs = GetCargo(cargo_type);
@@ -1168,7 +1174,7 @@
 			/* "The result should be a signed multiplier that gets multiplied
 			 * by the amount of cargo moved and the price factor, then gets
 			 * divided by 8192." */
-			return result * num_pieces * _cargo_payment_rates[cargo_type] / 8192;
+			return result * num_pieces * DayLengthEffectToIncome(_cargo_payment_rates[cargo_type]) / 8192;
 		}
 	}
 
@@ -1204,7 +1210,7 @@
 
 	if (time_factor < MIN_TIME_FACTOR) time_factor = MIN_TIME_FACTOR;
 
-	return BigMulS(dist * time_factor * num_pieces, _cargo_payment_rates[cargo_type], 21);
+	return BigMulS(dist * time_factor * num_pieces, DayLengthEffectToIncome(_cargo_payment_rates[cargo_type]), 21);
 }
 
 static void DeliverGoodsToIndustry(TileIndex xy, CargoID cargo_type, int num_pieces)
Index: src/variables.h
===================================================================
--- src/variables.h	(revision 14103)
+++ src/variables.h	(working copy)
@@ -29,6 +29,7 @@
 
 VARDEF uint _cur_player_tick_index;
 VARDEF uint _next_competitor_start;
+VARDEF uint _next_competitor_daylength;
 
 /* Determines how often to run the tree loop */
 VARDEF byte _trees_tick_ctr;
Index: src/players.cpp
===================================================================
--- src/players.cpp	(revision 14103)
+++ src/players.cpp	(working copy)
@@ -543,7 +543,8 @@
 void StartupPlayers()
 {
 	/* The AI starts like in the setting with +2 month max */
-	_next_competitor_start = _settings_game.difficulty.competitor_start_time * 90 * DAY_TICKS + RandomRange(60 * DAY_TICKS) + 1;
+	_next_competitor_start     = _settings_game.difficulty.competitor_start_time * 90 + RandomRange(60) + 1;
+	_next_competitor_daylength = DayLength();
 }
 
 static void MaybeStartNewPlayer()
@@ -569,8 +570,8 @@
 	}
 
 	/* The next AI starts like the difficulty setting said, with +2 month max */
-	_next_competitor_start = _settings_game.difficulty.competitor_start_time * 90 * DAY_TICKS + 1;
-	_next_competitor_start += _network_server ? InteractiveRandomRange(60 * DAY_TICKS) : RandomRange(60 * DAY_TICKS);
+	_next_competitor_start = _settings_game.difficulty.competitor_start_time * 90 + 1;
+	_next_competitor_start += _network_server ? InteractiveRandomRange(60) : RandomRange(60);
 }
 
 void InitializePlayers()
@@ -588,8 +589,18 @@
 		Player *p = GetPlayer((PlayerID)_cur_player_tick_index);
 		if (p->name_1 != 0) GenerateCompanyName(p);
 
-		if (AI_AllowNewAI() && _game_mode != GM_MENU && !--_next_competitor_start) {
-			MaybeStartNewPlayer();
+//		if (AI_AllowNewAI() && _game_mode != GM_MENU && !--_next_competitor_start) {
+//			MaybeStartNewPlayer();
+//         }
+   		if (AI_AllowNewAI() && _game_mode != GM_MENU && !--_next_competitor_daylength) {
+       		if (!--_next_competitor_start) MaybeStartNewPlayer();
+
+	        if (_next_competitor_start) {
+           		_next_competitor_daylength = DayLength();
+	       } else {
+   	       	    // Make the AI starts at a random time in the last day
+   	      	    _next_competitor_daylength = _network_server ? InteractiveRandomRange(DayLength()) : RandomRange(DayLength());
+           }
 		}
 	}
 
Index: src/economy_func.h
===================================================================
--- src/economy_func.h	(revision 14103)
+++ src/economy_func.h	(working copy)
@@ -37,6 +37,7 @@
 void DeleteSubsidyWithIndustry(IndustryID index);
 void DeleteSubsidyWithStation(StationID index);
 
+uint16 DayLengthEffectToIncome(uint16 original_payment_rate);
 Money GetTransportedGoodsIncome(uint num_pieces, uint dist, byte transit_days, CargoID cargo_type);
 uint MoveGoodsToStation(TileIndex tile, int w, int h, CargoID type, uint amount);
 
Index: src/roadveh_cmd.cpp
===================================================================
--- src/roadveh_cmd.cpp	(revision 14103)
+++ src/roadveh_cmd.cpp	(working copy)
@@ -1958,7 +1958,7 @@
 	if (this->running_ticks == 0) return;
 
 	const RoadVehicleInfo *rvi = RoadVehInfo(this->engine_type);
-	CommandCost cost(EXPENSES_ROADVEH_RUN, rvi->running_cost * GetPriceByIndex(rvi->running_cost_class) * this->running_ticks / (364 * DAY_TICKS));
+	CommandCost cost(EXPENSES_ROADVEH_RUN, rvi->running_cost * GetPriceByIndex(rvi->running_cost_class) * VehRunCostFactor() * this->running_ticks / (364 * DayLength()));
 
 	this->profit_this_year -= cost.GetCost();
 	this->running_ticks = 0;
Index: src/strgen/strgen.cpp
===================================================================
--- src/strgen/strgen.cpp	(revision 14103)
+++ src/strgen/strgen.cpp	(working copy)
@@ -486,6 +486,7 @@
 	{"DATE_TINY",  EmitSingleChar, SCC_DATE_TINY, 1, 0},
 	{"DATE_SHORT", EmitSingleChar, SCC_DATE_SHORT, 1, 0},
 	{"DATE_LONG",  EmitSingleChar, SCC_DATE_LONG, 1, 0},
+	{"DATE_TIME",  EmitSingleChar, SCC_DATE_TIME,  1, 0},
 
 	{"SKIP", EmitSingleChar, SCC_SKIP, 1, 0},
 
Index: src/industry_cmd.cpp
===================================================================
--- src/industry_cmd.cpp	(revision 14103)
+++ src/industry_cmd.cpp	(working copy)
@@ -48,6 +48,7 @@
 
 void ShowIndustryViewWindow(int industry);
 void BuildOilRig(TileIndex tile);
+byte DayLengthEffectToIndustry(byte original_production_rate);
 
 static byte _industry_sound_ctr;
 static TileIndex _industry_sound_tile;
@@ -1028,8 +1029,8 @@
 		if (HasBit(indsp->callback_flags, CBM_IND_PRODUCTION_256_TICKS)) IndustryProductionCallback(i, 1);
 
 		IndustryBehaviour indbehav = indsp->behaviour;
-		i->produced_cargo_waiting[0] = min(0xffff, i->produced_cargo_waiting[0] + i->production_rate[0]);
-		i->produced_cargo_waiting[1] = min(0xffff, i->produced_cargo_waiting[1] + i->production_rate[1]);
+		i->produced_cargo_waiting[0] = min(0xffff, i->produced_cargo_waiting[0] + DayLengthEffectToIndustry(i->production_rate[0]));
+		i->produced_cargo_waiting[1] = min(0xffff, i->produced_cargo_waiting[1] + DayLengthEffectToIndustry(i->production_rate[1]));
 
 		if ((indbehav & INDUSTRYBEH_PLANT_FIELDS) != 0) {
 			bool plant;
@@ -1054,6 +1055,11 @@
 		StartStopIndustryTileAnimation(i, IAT_INDUSTRY_TICK);
 	}
 }
+/* Nappe1: Apply Day Length Multiplier as Divider in industry production rates.*/
+byte DayLengthEffectToIndustry(byte original_production_rate)
+{
+	return (!_settings_game.economy.daylength_iprfactor ? original_production_rate / _settings_game.economy.daylength : original_production_rate);
+}
 
 void OnTick_Industry()
 {
Index: src/vehicle_base.h
===================================================================
--- src/vehicle_base.h	(revision 14103)
+++ src/vehicle_base.h	(working copy)
@@ -24,6 +24,8 @@
 #include "engine_type.h"
 #include "order_func.h"
 #include "transport_type.h"
+#include "variables.h"
+#include "settings_type.h"
 
 /** Road vehicle states */
 enum RoadVehicleStates {
@@ -188,6 +190,12 @@
 	TrackBitsByte state;
 };
 
+/* Function to determine correct vehicle running costs depending on daylength */
+static inline uint16 VehRunCostFactor()
+{
+	return (_settings_game.economy.daylength_vrcfactor ? _settings_game.economy.daylength : 1);
+};
+
 DECLARE_OLD_POOL(Vehicle, Vehicle, 9, 125)
 
 /* Some declarations of functions, so we can make them friendly */
@@ -293,7 +301,7 @@
 
 	byte day_counter;        ///< Increased by one for each day
 	byte tick_counter;       ///< Increased by one for each tick
-	byte running_ticks;      ///< Number of ticks this vehicle was not stopped this day
+	uint16 running_ticks;    ///< Number of ticks this vehicle was not stopped this day
 
 	byte vehstatus;                 ///< Status
 	Order current_order;            ///< The current order (+ status, like: loading)
@@ -437,7 +445,7 @@
 	 * Gets the running cost of a vehicle  that can be sent into SetDParam for string processing.
 	 * @return the vehicle's running cost
 	 */
-	Money GetDisplayRunningCost() const { return (this->GetRunningCost() >> 8); }
+	Money GetDisplayRunningCost() const { return (this->GetRunningCost() * VehRunCostFactor() >> 8); }
 
 	/**
 	 * Gets the profit vehicle had this year. It can be sent into SetDParam for string processing.
Index: src/statusbar_gui.cpp
===================================================================
--- src/statusbar_gui.cpp	(revision 14103)
+++ src/statusbar_gui.cpp	(working copy)
@@ -82,7 +82,11 @@
 
 		this->DrawWidgets();
 		SetDParam(0, _date);
-		DrawStringCentered(70, 1, (_pause_game || _settings_client.gui.status_long_date) ? STR_00AF : STR_00AE, TC_FROMSTRING);
+		if(_settings_game.economy.daylength <= 14) {
+			DrawStringCentered(70, 1, (_pause_game || _settings_client.gui.status_long_date) ? STR_00AF : STR_00AE, TC_FROMSTRING);
+		} else {
+			DrawStringCentered(70, 1, (_pause_game || _settings_client.gui.status_long_date) ? STR_DATE_TIME : STR_00AF, TC_FROMSTRING);
+		}
 
 		if (p != NULL) {
 			/* Draw player money */
Index: src/aircraft_cmd.cpp
===================================================================
--- src/aircraft_cmd.cpp	(revision 14103)
+++ src/aircraft_cmd.cpp	(working copy)
@@ -655,7 +655,7 @@
 
 	if (this->running_ticks == 0) return;
 
-	CommandCost cost(EXPENSES_AIRCRAFT_RUN, GetVehicleProperty(this, 0x0E, AircraftVehInfo(this->engine_type)->running_cost) * _price.aircraft_running * this->running_ticks / (364 * DAY_TICKS));
+	CommandCost cost(EXPENSES_AIRCRAFT_RUN, GetVehicleProperty(this, 0x0E, AircraftVehInfo(this->engine_type)->running_cost) * _price.aircraft_running * VehRunCostFactor() * this->running_ticks / (364 * DayLength()));
 
 	this->profit_this_year -= cost.GetCost();
 	this->running_ticks = 0;
Index: src/date_func.h
===================================================================
--- src/date_func.h	(revision 14103)
+++ src/date_func.h	(working copy)
@@ -5,6 +5,7 @@
 #ifndef DATE_FUNC_H
 #define DATE_FUNC_H
 
+#include "settings_type.h"
 #include "date_type.h"
 
 extern Year      _cur_year;
@@ -12,6 +13,18 @@
 extern Date      _date;
 extern DateFract _date_fract;
 
+/* This function is used to get the daylength */
+static inline uint16 DayLength() { return DAY_TICKS * _settings_game.economy.daylength; }
+
+/* This function is used to get the hours */
+static inline int64 GetHours() { return int64(_date_fract*24/DayLength()); }
+
+/* This function is used to get the high digit of the minutes */
+static inline int64 GetMinutes_high() { return int64((_date_fract*144/DayLength()) % 6); }
+
+/* This function is used to get the low digit of the minutes minutes */
+static inline int64 GetMinutes_low() { return int64((_date_fract*1440/DayLength()) % 10); }
+
 void SetDate(Date date);
 void ConvertDateToYMD(Date date, YearMonthDay *ymd);
 Date ConvertYMDToDate(Year year, Month month, Day day);
