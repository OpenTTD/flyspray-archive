Index: projects/openttd.vcproj
===================================================================
--- projects/openttd.vcproj	(revision 8440)
+++ projects/openttd.vcproj	(working copy)
@@ -769,6 +769,9 @@
 				RelativePath=".\..\src\train_gui.cpp">
 			</File>
 			<File
+				RelativePath=".\..\src\transparency_gui.cpp">
+			</File>
+			<File
 				RelativePath=".\..\src\vehicle_gui.cpp">
 			</File>
 		</Filter>
Index: projects/openttd_vs80.vcproj
===================================================================
--- projects/openttd_vs80.vcproj	(revision 8440)
+++ projects/openttd_vs80.vcproj	(working copy)
@@ -1052,6 +1052,9 @@
 				RelativePath=".\..\src\train_gui.cpp">
 			</File>
 			<File
+				RelativePath=".\..\src\transparency_gui.cpp">
+			</File>
+			<File
 				RelativePath=".\..\src\vehicle_gui.cpp">
 			</File>
 		</Filter>
Index: source.list
===================================================================
--- source.list	(revision 8440)
+++ source.list	(working copy)
@@ -224,6 +224,7 @@
 terraform_gui.cpp
 town_gui.cpp
 train_gui.cpp
+transparency_gui.cpp
 vehicle_gui.cpp
 
 # Landscape
Index: src/elrail.cpp
===================================================================
--- src/elrail.cpp	(revision 8440)
+++ src/elrail.cpp	(working copy)
@@ -261,6 +261,8 @@
 		if (PPPallowed[i] != 0 && HASBIT(PCPstatus, i) && !HASBIT(OverridePCP, i)) {
 			for (k = 0; k < DIR_END; k++) {
 				byte temp = PPPorder[i][GetTLG(ti->tile)][k];
+				SpriteID pal;
+				SpriteID img;
 
 				if (HASBIT(PPPallowed[i], temp)) {
 					uint x  = ti->x + x_pcp_offsets[i] + x_ppp_offsets[temp];
@@ -273,7 +275,14 @@
 						continue; /* No neighbour, go looking for a better position */
 					}
 
-					AddSortableSpriteToDraw(pylons_normal[temp], PAL_NONE, x, y, 1, 1, 10,
+					img=pylons_normal[temp];
+					if (_transparent_opt & DO_TRANS_BUILDINGS) {
+						SETBIT(img, PALETTE_MODIFIER_TRANSPARENT);
+						pal = PALETTE_TO_TRANSPARENT;
+					} else {
+						pal = PAL_NONE;
+					}
+					AddSortableSpriteToDraw(img, pal, x, y, 1, 1, 10,
 							GetSlopeZ(ti->x + x_pcp_offsets[i], ti->y + y_pcp_offsets[i]));
 					break; /* We already have drawn a pylon, bail out */
 				}
@@ -282,7 +291,7 @@
 	}
 
 	/* Don't draw a wire under a low bridge */
-	if (MayHaveBridgeAbove(ti->tile) && IsBridgeAbove(ti->tile) && !(_display_opt & DO_TRANS_BUILDINGS)) {
+	if (MayHaveBridgeAbove(ti->tile) && IsBridgeAbove(ti->tile) && !(_transparent_opt & DO_TRANS_BUILDINGS)) {
 		uint height = GetBridgeHeight(GetNorthernBridgeEnd(ti->tile));
 
 		if (height <= TilePixelHeight(ti->tile) + TILE_HEIGHT) return;
@@ -295,6 +304,8 @@
 			byte PCPconfig = HASBIT(PCPstatus, PCPpositions[t][0]) +
 				(HASBIT(PCPstatus, PCPpositions[t][1]) << 1);
 
+			SpriteID img;
+			SpriteID pal;
 			const SortableSpriteStruct *sss;
 			int tileh_selector = !(tileh[TS_HOME] % 3) * tileh[TS_HOME] / 3; /* tileh for the slopes, 0 otherwise */
 
@@ -302,7 +313,14 @@
 			assert(!IsSteepSlope(tileh[TS_HOME]));
 			sss = &CatenarySpriteData[Wires[tileh_selector][t][PCPconfig]];
 
-			AddSortableSpriteToDraw( sss->image, PAL_NONE, ti->x + sss->x_offset, ti->y + sss->y_offset,
+			img=sss->image;
+			if (_transparent_opt & DO_TRANS_BUILDINGS) {
+				SETBIT(img, PALETTE_MODIFIER_TRANSPARENT);
+				pal = PALETTE_TO_TRANSPARENT;
+			} else {
+				pal = PAL_NONE;
+			}
+			AddSortableSpriteToDraw( img, pal, ti->x + sss->x_offset, ti->y + sss->y_offset,
 				sss->x_size, sss->y_size, sss->z_size, GetSlopeZ(ti->x + min(sss->x_offset, TILE_SIZE - 1), ti->y + min(sss->y_offset, TILE_SIZE - 1)) + sss->z_offset);
 		}
 	}
@@ -317,6 +335,8 @@
 	uint num = DistanceMax(ti->tile, start);
 	uint height;
 
+	SpriteID img;
+	SpriteID pal;
 	const SortableSpriteStruct *sss;
 	Axis axis = GetBridgeAxis(ti->tile);
 	TLG tlg = GetTLG(ti->tile);
@@ -332,9 +352,16 @@
 		sss = &CatenarySpriteData[WIRE_X_FLAT_SW + (num % 2) + offset];
 	}
 
+	img=sss->image;
 	height = GetBridgeHeight(end);
 
-	AddSortableSpriteToDraw( sss->image, PAL_NONE, ti->x + sss->x_offset, ti->y + sss->y_offset,
+	if (_transparent_opt & DO_TRANS_BUILDINGS) {
+		SETBIT(img, PALETTE_MODIFIER_TRANSPARENT);
+		pal = PALETTE_TO_TRANSPARENT;
+	} else {
+		pal = PAL_NONE;
+	}
+	AddSortableSpriteToDraw( img, pal, ti->x + sss->x_offset, ti->y + sss->y_offset,
 		sss->x_size, sss->y_size, sss->z_size, height + sss->z_offset
 	);
 
@@ -342,18 +369,46 @@
 	/* every other tile needs a pylon on the northern end */
 	if (num % 2) {
 		if (axis == AXIS_X) {
-			AddSortableSpriteToDraw(pylons_bridge[0 + HASBIT(tlg, 0)], PAL_NONE, ti->x, ti->y + 4 + 8 * HASBIT(tlg, 0), 1, 1, 10, height);
+			img=pylons_bridge[0 + HASBIT(tlg, 0)];
+			if (_transparent_opt & DO_TRANS_BUILDINGS) {
+				SETBIT(img, PALETTE_MODIFIER_TRANSPARENT);
+				pal = PALETTE_TO_TRANSPARENT;
+			} else {
+				pal = PAL_NONE;
+			}
+			AddSortableSpriteToDraw(img, pal, ti->x, ti->y + 4 + 8 * HASBIT(tlg, 0), 1, 1, 10, height);
 		} else {
-			AddSortableSpriteToDraw(pylons_bridge[2 + HASBIT(tlg, 1)], PAL_NONE, ti->x + 4 + 8 * HASBIT(tlg, 1), ti->y, 1, 1, 10, height);
+			img=pylons_bridge[2 + HASBIT(tlg, 1)];
+			if (_transparent_opt & DO_TRANS_BUILDINGS) {
+				SETBIT(img, PALETTE_MODIFIER_TRANSPARENT);
+				pal = PALETTE_TO_TRANSPARENT;
+			} else {
+				pal = PAL_NONE;
+			}
+			AddSortableSpriteToDraw(img, pal, ti->x + 4 + 8 * HASBIT(tlg, 1), ti->y, 1, 1, 10, height);
 		}
 	}
 
 	/* need a pylon on the southern end of the bridge */
 	if (DistanceMax(ti->tile, start) == length) {
 		if (axis == AXIS_X) {
-			AddSortableSpriteToDraw(pylons_bridge[0 + HASBIT(tlg, 0)], PAL_NONE, ti->x + 16, ti->y + 4 + 8 * HASBIT(tlg, 0), 1, 1, 10, height);
+			img=pylons_bridge[0 + HASBIT(tlg, 0)];
+			if (_transparent_opt & DO_TRANS_BUILDINGS) {
+				SETBIT(img, PALETTE_MODIFIER_TRANSPARENT);
+				pal = PALETTE_TO_TRANSPARENT;
+			} else {
+				pal = PAL_NONE;
+			}
+			AddSortableSpriteToDraw(img, pal, ti->x + 16, ti->y + 4 + 8 * HASBIT(tlg, 0), 1, 1, 10, height);
 		} else {
-			AddSortableSpriteToDraw(pylons_bridge[2 + HASBIT(tlg, 1)], PAL_NONE, ti->x + 4 + 8 * HASBIT(tlg, 1), ti->y + 16, 1, 1, 10, height);
+			img=pylons_bridge[2 + HASBIT(tlg, 1)];
+			if (_transparent_opt & DO_TRANS_BUILDINGS) {
+				SETBIT(img, PALETTE_MODIFIER_TRANSPARENT);
+				pal = PALETTE_TO_TRANSPARENT;
+			} else {
+				pal = PAL_NONE;
+			}
+			AddSortableSpriteToDraw(img, pal, ti->x + 4 + 8 * HASBIT(tlg, 1), ti->y + 16, 1, 1, 10, height);
 		}
 	}
 }
@@ -374,8 +429,16 @@
 			if (IsRailDepot(ti->tile)) {
 				const SortableSpriteStruct* sss = &CatenarySpriteData_Depot[GetRailDepotDirection(ti->tile)];
 
+				SpriteID img=sss->image;
+				SpriteID pal;
+				if (_transparent_opt & DO_TRANS_BUILDINGS) {
+					SETBIT(img, PALETTE_MODIFIER_TRANSPARENT);
+					pal = PALETTE_TO_TRANSPARENT;
+				} else {
+					pal = PAL_NONE;
+				}
 				AddSortableSpriteToDraw(
-					sss->image, PAL_NONE, ti->x + sss->x_offset, ti->y + sss->y_offset,
+					img, pal, ti->x + sss->x_offset, ti->y + sss->y_offset,
 					sss->x_size, sss->y_size, sss->z_size,
 					GetTileMaxZ(ti->tile) + sss->z_offset
 				);
Index: src/gui.h
===================================================================
--- src/gui.h	(revision 8440)
+++ src/gui.h	(working copy)
@@ -87,6 +87,7 @@
 void ShowPlayerStations(PlayerID player);
 void ShowPlayerFinances(PlayerID player);
 void ShowPlayerCompany(PlayerID player);
+void ShowTransparencyToolbar(void);
 
 void ShowEstimatedCostOrIncome(int32 cost, int x, int y);
 void ShowErrorMessage(StringID msg_1, StringID msg_2, int x, int y);
Index: src/industry_cmd.cpp
===================================================================
--- src/industry_cmd.cpp	(revision 8440)
+++ src/industry_cmd.cpp	(working copy)
@@ -240,7 +240,7 @@
 	/* Add industry on top of the ground? */
 	image = dits->building.sprite;
 	if (image != 0) {
-		if (_display_opt & DO_TRANS_BUILDINGS) {
+		if (_transparent_opt & DO_TRANS_INDUSTRIES) {
 			SETBIT(image, PALETTE_MODIFIER_TRANSPARENT);
 			pal = PALETTE_TO_TRANSPARENT;
 		} else {
@@ -255,7 +255,7 @@
 			dits->dz,
 			z);
 
-		if (_display_opt & DO_TRANS_BUILDINGS) return;
+		if (_transparent_opt & DO_TRANS_INDUSTRIES) return;
 	}
 
 	{
Index: src/lang/english.txt
===================================================================
--- src/lang/english.txt	(revision 8440)
+++ src/lang/english.txt	(working copy)
@@ -782,8 +782,6 @@
 STR_WAYPOINTS_DISPLAYED2                                        :{SETX 12}Waypoints displayed
 STR_02D0_FULL_ANIMATION                                         :{SETX 12}Full animation
 STR_02D2_FULL_DETAIL                                            :{SETX 12}Full detail
-STR_02D4_TRANSPARENT_BUILDINGS                                  :{SETX 12}Transparent buildings
-STR_TRANSPARENT_SIGNS                                           :{SETX 12}Transparent station signs
 ############ range ends	here
 
 ############ range for menu	starts
@@ -802,6 +800,7 @@
 STR_02DE_MAP_OF_WORLD                                           :Map of world
 STR_EXTRA_VIEW_PORT                                             :Extra viewport
 STR_SIGN_LIST                                                   :Sign list
+STR_TRANSPARENCY_OPTIONS                                        :Transparency Toolbar
 STR_02DF_TOWN_DIRECTORY                                         :Town directory
 STR_TOWN_POPULATION                                             :{BLACK}World population: {COMMA}
 STR_EXTRA_VIEW_PORT_TITLE                                       :{WHITE}Viewport {COMMA}
@@ -809,6 +808,14 @@
 STR_EXTRA_VIEW_MOVE_VIEW_TO_MAIN_TT                             :{BLACK}Copy the location of the global view to this viewport
 STR_EXTRA_VIEW_MOVE_MAIN_TO_VIEW                                :{BLACK}Paste from viewport
 STR_EXTRA_VIEW_MOVE_MAIN_TO_VIEW_TT                             :{BLACK}Paste the location of this viewport to the global view
+STR_TRANSPARENCY_TOOLB                                          :{WHITE}Transparency Options
+STR_TRANSPARENT_SIGNS_DESC                                      :{BLACK}Toggle transparency for station signs
+STR_TRANSPARENT_TREES_DESC                                      :{BLACK}Toggle transparency for trees
+STR_TRANSPARENT_HOUSES_DESC                                     :{BLACK}Toggle transparency for houses
+STR_TRANSPARENT_INDUSTRIES_DESC                                 :{BLACK}Toggle transparency for industries
+STR_TRANSPARENT_BUILDINGS_DESC                                  :{BLACK}Toggle transparency for buildables like stations, depots, waypoints and catenary
+STR_TRANSPARENT_BRIDGES_DESC                                    :{BLACK}Toggle transparency for bridges
+STR_TRANSPARENT_STRUCTURES_DESC                                 :{BLACK}Toggle transparency for structures like lighthouses and antennas, maybe in future for eyecandy
 
 STR_02E0_CURRENCY_UNITS                                         :{BLACK}Currency units
 STR_02E1                                                        :{BLACK}{SKIP}{STRING}
@@ -1128,6 +1135,7 @@
 STR_CONFIG_PATCHES_TOOLBAR_POS_RIGHT                            :Right
 STR_CONFIG_PATCHES_SNAP_RADIUS                                  :{LTBLUE}Window snap radius: {ORANGE}{STRING1} px
 STR_CONFIG_PATCHES_SNAP_RADIUS_DISABLED                         :{LTBLUE}Window snap radius: {ORANGE}disabled
+STR_CONFIG_PATCHES_TRANSPARENCY_MEM                             :{LTBLUE}Toggle transparency memorization: {ORANGE}{STRING1}
 
 STR_CONFIG_PATCHES_GUI                                          :{BLACK}Interface
 STR_CONFIG_PATCHES_CONSTRUCTION                                 :{BLACK}Construction
Index: src/main_gui.cpp
===================================================================
--- src/main_gui.cpp	(revision 8440)
+++ src/main_gui.cpp	(working copy)
@@ -159,8 +159,6 @@
 		case  8: _display_opt ^= DO_WAYPOINTS;          break;
 		case  9: _display_opt ^= DO_FULL_ANIMATION;     break;
 		case 10: _display_opt ^= DO_FULL_DETAIL;        break;
-		case 11: _display_opt ^= DO_TRANS_BUILDINGS;    break;
-		case 12: _display_opt ^= DO_TRANS_SIGNS;        break;
 	}
 	MarkWholeScreenDirty();
 }
@@ -190,6 +188,7 @@
 		case 0: ShowSmallMap();            break;
 		case 1: ShowExtraViewPortWindow(); break;
 		case 2: ShowSignList();            break;
+		case 3: ShowTransparencyToolbar(); break;
 	}
 }
 
@@ -204,7 +203,8 @@
 		case 0: ShowSmallMap();            break;
 		case 1: ShowExtraViewPortWindow(); break;
 		case 2: ShowSignList();            break;
-		case 3: ShowTownDirectory();       break;
+		case 3: ShowTransparencyToolbar(); break;
+		case 4: ShowTownDirectory();       break;
 	}
 }
 
@@ -760,7 +760,7 @@
 
 static void ToolbarMapClick(Window *w)
 {
-	PopupMainToolbMenu(w, 4, STR_02DE_MAP_OF_WORLD, 3, 0);
+	PopupMainToolbMenu(w, 4, STR_02DE_MAP_OF_WORLD, 4, 0);
 }
 
 static void ToolbarTownClick(Window *w)
@@ -951,7 +951,7 @@
 {
 	uint16 x = 0;
 
-	w = PopupMainToolbMenu(w, 2, STR_02C3_GAME_OPTIONS, 13, 0);
+	w = PopupMainToolbMenu(w, 2, STR_02C3_GAME_OPTIONS, 11, 0);
 
 	if (_display_opt & DO_SHOW_TOWN_NAMES)    SETBIT(x,  5);
 	if (_display_opt & DO_SHOW_STATION_NAMES) SETBIT(x,  6);
@@ -959,8 +959,6 @@
 	if (_display_opt & DO_WAYPOINTS)          SETBIT(x,  8);
 	if (_display_opt & DO_FULL_ANIMATION)     SETBIT(x,  9);
 	if (_display_opt & DO_FULL_DETAIL)        SETBIT(x, 10);
-	if (_display_opt & DO_TRANS_BUILDINGS)    SETBIT(x, 11);
-	if (_display_opt & DO_TRANS_SIGNS)        SETBIT(x, 12);
 	WP(w,menu_d).checked_items = x;
 }
 
@@ -999,7 +997,7 @@
 static void ToolbarScenMapTownDir(Window *w)
 {
 	/* Scenario editor button, *hack*hack* use different button to activate */
-	PopupMainToolbMenu(w, 8 | (17 << 8), STR_02DE_MAP_OF_WORLD, 4, 0);
+	PopupMainToolbMenu(w, 8 | (17 << 8), STR_02DE_MAP_OF_WORLD, 5, 0);
 }
 
 static void ToolbarScenZoomIn(Window *w)
@@ -2257,6 +2255,9 @@
 
 		if (_game_mode == GM_MENU) break;
 
+		/* transparency hotkeys */
+		if ((e->we.keypress.keycode >= (WKC_CTRL | '1')) && (e->we.keypress.keycode <= (WKC_CTRL | '7'))) { TOGGLEBIT(_transparent_opt, e->we.keypress.keycode - (WKC_CTRL | '1')); MarkWholeScreenDirty(); }
+
 		switch (e->we.keypress.keycode) {
 			case 'C':
 			case 'Z': {
@@ -2289,11 +2290,26 @@
 				break;
 #endif
 
-			case 'X':
-				_display_opt ^= DO_TRANS_BUILDINGS;
-				MarkWholeScreenDirty();
-				break;
+			case 'X' | WKC_CTRL: {
+				ShowTransparencyToolbar();
+ 				break;
+			}
 
+			case 'X': { //toggle all transparent (as normal behaviour)
+				static byte trans_opt = 0x7F;
+				if (GB(_transparent_opt, 0, 7) == 0) {
+					// If transparency is off, set to our remembered selection.
+					if (_patches.memorize_transp) SB(_transparent_opt, 0, 7, trans_opt);
+					else SB(_transparent_opt,0,7,0x7F);
+				} else {
+					// Remember the existing selection, and then clear it.
+					if (_patches.memorize_transp) trans_opt = GB(_transparent_opt, 0, 7);
+					SB(_transparent_opt, 0, 7, 0);
+ 				}
+ 				MarkWholeScreenDirty();
+ 				break;
+			}
+
 #ifdef ENABLE_NETWORK
 			case WKC_RETURN: case 'T': // smart chat; send to team if any, otherwise to all
 				if (_networking) {
@@ -2437,3 +2453,4 @@
 
 
 
+
Index: src/news_gui.cpp
===================================================================
--- src/news_gui.cpp	(revision 8440)
+++ src/news_gui.cpp	(working copy)
@@ -137,10 +137,10 @@
 					DrawStringMultiCenter(215, ni->display_mode == NM_NORMAL ? 76 : 56,
 						ni->string_id, 426);
 				} else {
-					byte bk = _display_opt;
-					_display_opt &= ~DO_TRANS_BUILDINGS;
+					uint8 bk = _transparent_opt;
+					_transparent_opt = 0;
 					DrawWindowViewport(w);
-					_display_opt = bk;
+					_transparent_opt = bk;
 
 					/* Shade the viewport into gray, or color*/
 					vp = w->viewport;
Index: src/openttd.cpp
===================================================================
--- src/openttd.cpp	(revision 8440)
+++ src/openttd.cpp	(working copy)
@@ -298,7 +298,9 @@
 	char filename[256];
 
 	_game_mode = GM_MENU;
-	CLRBITS(_display_opt, DO_TRANS_BUILDINGS); // don't make buildings transparent in intro
+	/* clear all transparencies */
+	_transparent_opt = 0;
+
 	_opt_ptr = &_opt_newgame;
 	ResetGRFConfig(false);
 
@@ -1734,3 +1736,6 @@
 HalSoundDriver *_sound_driver;
 HalVideoDriver *_video_driver;
 
+
+
+
Index: src/openttd.h
===================================================================
--- src/openttd.h	(revision 8440)
+++ src/openttd.h	(working copy)
@@ -176,10 +176,19 @@
 	DO_SHOW_STATION_NAMES = 1 << 1,
 	DO_SHOW_SIGNS         = 1 << 2,
 	DO_FULL_ANIMATION     = 1 << 3,
+	DO_FULL_DETAIL        = 1 << 4,
+	DO_WAYPOINTS          = 1 << 5,
+};
+
+/* Transparent Options */
+enum {
+	DO_TRANS_SIGNS        = 1 << 0,
+	DO_TRANS_TREES        = 1 << 1,
+	DO_TRANS_HOUSES       = 1 << 2,
+	DO_TRANS_INDUSTRIES   = 1 << 3,
 	DO_TRANS_BUILDINGS    = 1 << 4,
-	DO_FULL_DETAIL        = 1 << 5,
-	DO_WAYPOINTS          = 1 << 6,
-	DO_TRANS_SIGNS        = 1 << 7,
+	DO_TRANS_BRIDGES      = 1 << 5,
+	DO_TRANS_STRUCTURES   = 1 << 6,
 };
 
 /* Landscape types */
@@ -464,6 +473,7 @@
 	WC_GENERATE_LANDSCAPE,
 	WC_GENERATE_PROGRESS_WINDOW,
 	WC_CONFIRM_POPUP_QUERY,
+	WC_TRANSPARENCY_TOOLBAR,
 };
 
 
Index: src/rail_cmd.cpp
===================================================================
--- src/rail_cmd.cpp	(revision 8440)
+++ src/rail_cmd.cpp	(working copy)
@@ -1360,7 +1360,7 @@
 				image += relocation;
 			}
 
-			if (_display_opt & DO_TRANS_BUILDINGS) {
+			if (_transparent_opt & DO_TRANS_BUILDINGS) {
 				SETBIT(image, PALETTE_MODIFIER_TRANSPARENT);
 				pal = PALETTE_TO_TRANSPARENT;
 			} else if (HASBIT(image, PALETTE_MODIFIER_COLOR)) {
Index: src/road_cmd.cpp
===================================================================
--- src/road_cmd.cpp	(revision 8440)
+++ src/road_cmd.cpp	(working copy)
@@ -756,7 +756,7 @@
 				SpriteID image = dtss->image;
 				SpriteID pal;
 
-				if (_display_opt & DO_TRANS_BUILDINGS) {
+				if (_transparent_opt & DO_TRANS_BUILDINGS) {
 					SETBIT(image, PALETTE_MODIFIER_TRANSPARENT);
 					pal = PALETTE_TO_TRANSPARENT;
 				} else if (HASBIT(image, PALETTE_MODIFIER_COLOR)) {
Index: src/settings.cpp
===================================================================
--- src/settings.cpp	(revision 8440)
+++ src/settings.cpp	(working copy)
@@ -1182,7 +1182,7 @@
 #endif /* WIN32 */
 
 static const SettingDescGlobVarList _misc_settings[] = {
-	SDTG_MMANY("display_opt",     SLE_UINT8, S, 0, _display_opt,       (DO_SHOW_TOWN_NAMES|DO_SHOW_STATION_NAMES|DO_SHOW_SIGNS|DO_FULL_ANIMATION|DO_FULL_DETAIL|DO_TRANS_BUILDINGS|DO_WAYPOINTS), "SHOW_TOWN_NAMES|SHOW_STATION_NAMES|SHOW_SIGNS|FULL_ANIMATION|TRANS_BUILDINGS|FULL_DETAIL|WAYPOINTS", STR_NULL, NULL),
+	SDTG_MMANY("display_opt",     SLE_UINT8, S, 0, _display_opt,       (DO_SHOW_TOWN_NAMES|DO_SHOW_STATION_NAMES|DO_SHOW_SIGNS|DO_FULL_ANIMATION|DO_FULL_DETAIL|DO_WAYPOINTS), "SHOW_TOWN_NAMES|SHOW_STATION_NAMES|SHOW_SIGNS|FULL_ANIMATION|FULL_DETAIL|WAYPOINTS", STR_NULL, NULL),
 	  SDTG_VAR("news_display_opt", SLE_UINT, S, 0, _news_display_opt,0xAAAAAAAA,0,0xAAAAAAAA,0,STR_NULL, NULL), // default to all full messages: 10101010101010101010 = 0xAAAAAAAA
 	 SDTG_BOOL("news_ticker_sound",          S, 0, _news_ticker_sound,     true,    STR_NULL, NULL),
 	 SDTG_BOOL("fullscreen",                 S, 0, _fullscreen,           false,    STR_NULL, NULL),
@@ -1283,6 +1283,7 @@
 	SDT_BOOL(Patches, link_terraform_toolbar,        S, 0, false,        STR_CONFIG_PATCHES_LINK_TERRAFORM_TOOLBAR,NULL),
 	 SDT_VAR(Patches, liveries,           SLE_UINT8, S,MS,  2, 0,  2, 0, STR_CONFIG_PATCHES_LIVERIES,              RedrawScreen),
 	SDT_BOOL(Patches, prefer_teamchat,               S, 0, false,        STR_CONFIG_PATCHES_PREFER_TEAMCHAT,       NULL),
+	SDT_BOOL(Patches, memorize_transp,               S, 0, false,        STR_CONFIG_PATCHES_TRANSPARENCY_MEM      ,NULL),
 
 	/***************************************************************************/
 	/* Construction section of the GUI-configure patches window */
Index: src/settings_gui.cpp
===================================================================
--- src/settings_gui.cpp	(revision 8440)
+++ src/settings_gui.cpp	(working copy)
@@ -575,6 +575,7 @@
 	"link_terraform_toolbar",
 	"liveries",
 	"prefer_teamchat",
+	"memorize_transp",
 };
 
 static const char *_patches_construction[] = {
Index: src/station_cmd.cpp
===================================================================
--- src/station_cmd.cpp	(revision 8440)
+++ src/station_cmd.cpp	(working copy)
@@ -2073,7 +2073,7 @@
 			image += relocation;
 		}
 
-		if (_display_opt & DO_TRANS_BUILDINGS) {
+		if (_transparent_opt & DO_TRANS_BUILDINGS) {
 			SETBIT(image, PALETTE_MODIFIER_TRANSPARENT);
 			pal = PALETTE_TO_TRANSPARENT;
 		} else if (HASBIT(image, PALETTE_MODIFIER_COLOR)) {
@@ -3041,3 +3041,5 @@
 };
 
 
+
+
Index: src/town_cmd.cpp
===================================================================
--- src/town_cmd.cpp	(revision 8440)
+++ src/town_cmd.cpp	(working copy)
@@ -130,7 +130,7 @@
 	/* Add a house on top of the ground? */
 	image = dcts->building.sprite;
 	if (image != 0) {
-		if (_display_opt & DO_TRANS_BUILDINGS) {
+		if (_transparent_opt & DO_TRANS_HOUSES) {
 			SETBIT(image, PALETTE_MODIFIER_TRANSPARENT);
 			pal = PALETTE_TO_TRANSPARENT;
 		} else {
@@ -146,7 +146,7 @@
 			ti->z
 		);
 
-		if (_display_opt & DO_TRANS_BUILDINGS) return;
+		if (_transparent_opt & DO_TRANS_HOUSES) return;
 	}
 
 	{
Index: src/transparency_gui.cpp
===================================================================
--- src/transparency_gui.cpp	(revision 0)
+++ src/transparency_gui.cpp	(revision 0)
@@ -0,0 +1,68 @@
+/* $Id$ */
+
+#include "stdafx.h"
+#include "openttd.h"
+#include "table/sprites.h"
+#include "table/strings.h"
+#include "functions.h"
+#include "window.h"
+#include "gui.h"
+#include "viewport.h"
+#include "gfx.h"
+#include "sound.h"
+#include "variables.h"
+
+static void Transparent_Click(byte widget)
+{
+	TOGGLEBIT(_transparent_opt, widget);
+	SndPlayFx(SND_15_BEEP);
+}
+
+static void TransparencyToolbWndProc(Window *w, WindowEvent *e)
+{
+	switch (e->event) {
+	case WE_PAINT:
+		for (uint i=0; i<7; i++) SetWindowWidgetLoweredState(w, i+3, HASBIT(_transparent_opt, i));
+		DrawWindowWidgets(w);
+		break;
+
+	case WE_CLICK:
+		if (e->we.click.widget >= 3) {
+			Transparent_Click(e->we.click.widget - 3);
+			MarkWholeScreenDirty();
+		}
+		break;
+
+	}
+}
+
+static const Widget _transparency_widgets[] = {
+{ WWT_CLOSEBOX,   RESIZE_NONE,     7,   0,  10,   0,  13, STR_00C5,                 STR_018B_CLOSE_WINDOW},
+{  WWT_CAPTION,   RESIZE_NONE,     7,  11, 162,   0,  13, STR_TRANSPARENCY_TOOLB,   STR_018C_WINDOW_TITLE_DRAG_THIS},
+{WWT_STICKYBOX,   RESIZE_NONE,     7, 163, 174,   0,  13, STR_NULL,                 STR_STICKY_BUTTON},
+
+//{    WWT_PANEL,   RESIZE_NONE,     7,  0,  0,  14,  35, 0x0,                    STR_NULL},
+/* transparency widgets: transparent signs, trees, houses, industries, player's buildings */
+{   WWT_IMGBTN,   RESIZE_NONE,     7,   0,  21,  14,  35, SPR_IMG_PLACE_SIGN,   STR_TRANSPARENT_SIGNS_DESC},
+{   WWT_IMGBTN,   RESIZE_NONE,     7,  22,  43,  14,  35, SPR_IMG_PLANTTREES,   STR_TRANSPARENT_TREES_DESC},
+{   WWT_IMGBTN,   RESIZE_NONE,     7,  44,  65,  14,  35, SPR_IMG_TOWN,         STR_TRANSPARENT_HOUSES_DESC},
+{   WWT_IMGBTN,   RESIZE_NONE,     7,  66,  87,  14,  35, SPR_IMG_INDUSTRY,     STR_TRANSPARENT_INDUSTRIES_DESC},
+{   WWT_IMGBTN,   RESIZE_NONE,     7,  88, 109,  14,  35, SPR_IMG_COMPANY_LIST, STR_TRANSPARENT_BUILDINGS_DESC},
+{   WWT_IMGBTN,   RESIZE_NONE,     7, 110, 152,  14,  35, SPR_IMG_BRIDGE,       STR_TRANSPARENT_BRIDGES_DESC},
+{   WWT_IMGBTN,   RESIZE_NONE,     7, 153, 174,  14,  35, SPR_IMG_TRANSMITTER,  STR_TRANSPARENT_STRUCTURES_DESC},
+
+{   WIDGETS_END},
+};
+
+static const WindowDesc _transparency_desc = {
+	WDP_ALIGN_TBR, 58+36, 175, 36,
+	WC_TRANSPARENCY_TOOLBAR, 0,
+	WDF_STD_TOOLTIPS | WDF_STD_BTN | WDF_DEF_WIDGET | WDF_STICKY_BUTTON,
+	_transparency_widgets,
+	TransparencyToolbWndProc
+};
+
+void ShowTransparencyToolbar(void)
+{
+	AllocateWindowDescFront(&_transparency_desc, 0);
+}
Index: src/tree_cmd.cpp
===================================================================
--- src/tree_cmd.cpp	(revision 8440)
+++ src/tree_cmd.cpp	(working copy)
@@ -366,7 +366,7 @@
 
 	StartSpriteCombine();
 
-	if (!(_display_opt & DO_TRANS_BUILDINGS) || !_patches.invisible_trees) {
+	if (!(_transparent_opt & DO_TRANS_TREES) || !_patches.invisible_trees) {
 		TreeListEnt te[4];
 		uint i;
 
@@ -375,7 +375,7 @@
 		do {
 			SpriteID image = s[0].sprite + (--i == 0 ? GetTreeGrowth(ti->tile) : 3);
 			SpriteID pal;
-			if (_display_opt & DO_TRANS_BUILDINGS) {
+			if (_transparent_opt & DO_TRANS_TREES) {
 				SETBIT(image, PALETTE_MODIFIER_TRANSPARENT);
 				pal = PALETTE_TO_TRANSPARENT;
 			} else {
Index: src/tunnelbridge_cmd.cpp
===================================================================
--- src/tunnelbridge_cmd.cpp	(revision 8440)
+++ src/tunnelbridge_cmd.cpp	(working copy)
@@ -737,7 +737,7 @@
 			{ 2, 4, 8, 1,   2, 16, 9, 0 }
 		};
 
-		if (_display_opt & DO_TRANS_BUILDINGS) {
+		if (_transparent_opt & DO_TRANS_BRIDGES) {
 			SETBIT(image, PALETTE_MODIFIER_TRANSPARENT);
 			pal = PALETTE_TO_TRANSPARENT;
 		} else {
@@ -861,7 +861,7 @@
 		image = psid->sprite;
 
 		// draw ramp
-		if (_display_opt & DO_TRANS_BUILDINGS) {
+		if (_transparent_opt & DO_TRANS_BRIDGES) {
 			SETBIT(image, PALETTE_MODIFIER_TRANSPARENT);
 			pal = PALETTE_TO_TRANSPARENT;
 		} else {
@@ -953,7 +953,7 @@
 	z = GetBridgeHeight(rampsouth) - 3;
 
 	image = psid->sprite;
-	if (_display_opt & DO_TRANS_BUILDINGS) {
+	if (_transparent_opt & DO_TRANS_BRIDGES) {
 		SETBIT(image, PALETTE_MODIFIER_TRANSPARENT);
 		pal = PALETTE_TO_TRANSPARENT;
 	} else {
@@ -968,7 +968,7 @@
 
 	psid++;
 	image = psid->sprite;
-	if (_display_opt & DO_TRANS_BUILDINGS) {
+	if (_transparent_opt & DO_TRANS_BRIDGES) {
 		SETBIT(image, PALETTE_MODIFIER_TRANSPARENT);
 		pal = PALETTE_TO_TRANSPARENT;
 	} else {
@@ -991,7 +991,7 @@
 		// draw poles below for small bridges
 		if (psid->sprite != 0) {
 			image = psid->sprite;
-			if (_display_opt & DO_TRANS_BUILDINGS) {
+			if (_transparent_opt & DO_TRANS_BRIDGES) {
 				SETBIT(image, PALETTE_MODIFIER_TRANSPARENT);
 				pal = PALETTE_TO_TRANSPARENT;
 			} else {
Index: src/unmovable_cmd.cpp
===================================================================
--- src/unmovable_cmd.cpp	(revision 8440)
+++ src/unmovable_cmd.cpp	(working copy)
@@ -121,7 +121,7 @@
 			dtus = &_draw_tile_unmovable_data[GetUnmovableType(ti->tile)];
 
 			image = dtus->image;
-			if (_display_opt & DO_TRANS_BUILDINGS) {
+			if (_transparent_opt & DO_TRANS_STRUCTURES) {
 				SETBIT(image, PALETTE_MODIFIER_TRANSPARENT);
 				pal = PALETTE_TO_TRANSPARENT;
 			} else {
@@ -139,7 +139,7 @@
 			DrawGroundSprite(SPR_CONCRETE_GROUND, PAL_NONE);
 
 			image = SPR_STATUE_COMPANY;
-			if (_display_opt & DO_TRANS_BUILDINGS) {
+			if (_transparent_opt & DO_TRANS_STRUCTURES) {
 				SETBIT(image, PALETTE_MODIFIER_TRANSPARENT);
 				pal = PALETTE_TO_TRANSPARENT;
 			} else {
@@ -152,7 +152,7 @@
 			DrawClearLandTile(ti, 0);
 
 			image = SPR_BOUGHT_LAND;
-			if (_display_opt & DO_TRANS_BUILDINGS) {
+			if (_transparent_opt & DO_TRANS_STRUCTURES) {
 				SETBIT(image, PALETTE_MODIFIER_TRANSPARENT);
 				pal = PALETTE_TO_TRANSPARENT;
 			} else {
@@ -180,7 +180,7 @@
 
 			foreach_draw_tile_seq(dtss, t->seq) {
 				image = dtss->image;
-				if (_display_opt & DO_TRANS_BUILDINGS) {
+				if (_transparent_opt & DO_TRANS_STRUCTURES) {
 					SETBIT(image, PALETTE_MODIFIER_TRANSPARENT);
 					pal = PALETTE_TO_TRANSPARENT;
 				} else {
Index: src/variables.h
===================================================================
--- src/variables.h	(revision 8440)
+++ src/variables.h	(working copy)
@@ -217,6 +217,8 @@
 
 	bool population_in_label; // Show the population of a town in his label?
 
+	bool memorize_transp; //memorize transparency options to toggle between reset and memorized instead of set-reset
+
 	uint8 freight_trains; ///< Value to multiply the weight of cargo by
 
 	/** YAPF settings */
@@ -279,6 +281,7 @@
 VARDEF int _autosave_ctr;
 
 VARDEF byte _display_opt;
+VARDEF byte _transparent_opt;
 VARDEF int _caret_timer;
 VARDEF uint32 _news_display_opt;
 VARDEF bool _news_ticker_sound;
Index: src/viewport.cpp
===================================================================
--- src/viewport.cpp	(revision 8440)
+++ src/viewport.cpp	(working copy)
@@ -1192,10 +1192,10 @@
 
 		/* Draw the rectangle if 'tranparent station signs' is off,
 		 * or if we are drawing a general text sign (STR_2806) */
-			if (!(_display_opt & DO_TRANS_SIGNS) || ss->string == STR_2806)
+			if (!(_transparent_opt & DO_TRANS_SIGNS) || ss->string == STR_2806)
 				DrawFrameRect(
 					x, y, x + w, bottom, ss->color,
-					(_display_opt & DO_TRANS_BUILDINGS) ? FR_TRANSPARENT : FR_NONE
+					(_transparent_opt & DO_TRANS_BUILDINGS) ? FR_TRANSPARENT : FR_NONE
 				);
 		}
 
@@ -1204,8 +1204,8 @@
 		/* if we didn't draw a rectangle, or if transparant building is on,
 		 * draw the text in the color the rectangle would have */
 		if ((
-					(_display_opt & DO_TRANS_BUILDINGS) ||
-					(_display_opt & DO_TRANS_SIGNS && ss->string != STR_2806)
+					(_transparent_opt & DO_TRANS_BUILDINGS) ||
+					(_transparent_opt & DO_TRANS_SIGNS && ss->string != STR_2806)
 				) && ss->width != 0) {
 			/* Real colors need the IS_PALETTE_COLOR flag
 			 * otherwise colors from _string_colormap are assumed. */
Index: src/water_cmd.cpp
===================================================================
--- src/water_cmd.cpp	(revision 8440)
+++ src/water_cmd.cpp	(working copy)
@@ -416,7 +416,7 @@
 		SpriteID image = wdts->image + base;
 		SpriteID pal;
 
-		if (_display_opt & DO_TRANS_BUILDINGS) {
+		if (_transparent_opt & DO_TRANS_BUILDINGS) {
 			SETBIT(image, PALETTE_MODIFIER_TRANSPARENT);
 			pal = PALETTE_TO_TRANSPARENT;
 		} else {
