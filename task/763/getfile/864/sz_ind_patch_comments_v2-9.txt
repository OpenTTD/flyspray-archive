Comments to the SirkoZ' smooth_economy patch fix (v2.9):

INDEX:
1.) production_rate and production_level difference
2.) influence integer
3.) increase clause
4.) decrease clause
5.) regards from the author :-)



CONTENTS:

1.)	production_rate x 8 or 9 = production_level (monthly industry production)

2.)	influence -> 1 or -1 "weights" to affect the chance of increasing/decreasing if the 
		percent_transported is more or less than 60% (like with the original TTD economy).
		
3.)	if (CHANCE16I((2 + influence), 100, r))
					
					new_prod += ((old_prod / 3) - (old_prod / 6) - RandomRange((old_prod / 12) + 1) 
					
											+ (old_prod >> 4) - (old_prod >> 5) - (old_prod >> 6) - (old_prod >> 7));
		
		This is the increase "clause" - if we transport over 60%, influence is +1 and we get the
		chance of 3% (Chance16I (3, 100, r) to increase - if not over 60% the chance gets down to 
		1% - so the industries are more responsive to service (nothing radical though - it's been
		thoroughly tested through the years).
		
		The new_prod += ...... "clause" increases the production in nearly exponential fashion, but
		there is some randomness to it as increases can in random moments be a bit higher.
		The general behaviour is though - the higher production, the lower increase.
		Written in percents - the clause would look like this:
		
		new_production_rate += (33% * old) - (16.5% * old) - (Random of 8.25% * old) + (6% * old) -
														
														- (3% * old) - (2% * old) - (1% * old).
														
		The parts of the new_prod += ... "clause" "kick into effect" when production_rate	raises
		to a specific height - e.g. (old >> 6) "kicks in" when production_rate reaches 64 and it 
		lowers the possible increase by ~2% (1/64).
		
		So - without the random element - the highest increase is 33% but only from production_level
		of 24 or 30 units per month - all other increases range from tops 25% (only 2 occurances) to
		the least one of only ~8,5% when the random range produces the lowest value possible.
		BTW: +1 is added to the random range for it to encompass all of the values, not just (all-1).
		
		With the random element - the values again - 33% in 1 occurence, 25% in 2 and the least
		increases are ~8,5 to ~14% (with production rate of over 128 and prod_level of over 1024).
		
		This way - the passenger production of Oil Rigs is not affected (always at production_rate of
		2, so the clause cannot "reach" it.
		
4.) if (CHANCE16I((2 - influence), 100, r >> 16))
					
					new_prod -= (RandomRange((old_prod >> 2) + 1) - (old_prod >> 3) + (old_prod >> 4) 
											
											+ (old_prod >> 5) + (old_prod >> 6) + (old_prod >> 7));
											
		The decrease "clause" kicks in randomly 1-3% (1 with percent_transported over 60%, 2 with
		percent_transported of 60% and 3 with percent_transported under 60% - that way industry
		reacts to poor transportation in most of the cases).
		
		new_production_rate -= (Random(25% * old)) - (12.5% * old) + (6.25% * old) +
														
														+ (old * 3%) + (old * 2%) + (old * 1%).
														
		The highest decrease thusly is 25% (with the highest (= over 128) and 
		the lowest production_rate (= 4 - cannot be done otherwise with fractions) the lowest decrease
		is 12%, of course taking into accout the Random Range - it can also be lower with lower
		production_rate's.
		
		This way the decreases nicely follow the logarithmic scale but with some Random element, that
		can make them a little lower.
		
		Again RandomRange expression has been added "+1" to take into accout all of the interval - 
		in this case [1%, 25%].
		
		The lowest production_rate affected by this clause is 4 and the lowest production after
		decreasing is 24/30 units per month - just right for the increase clause to "reach" it.
		
5.) There that is all to say about this patch - I hope this readme has been successful in 
		explaining the patch behaviour.
		
		Thanks for reading
		
		Regards
		
		SirkoZ 											