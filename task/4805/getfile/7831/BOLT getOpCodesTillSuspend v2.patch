Index: src/ai/ai_instance.cpp
===================================================================
--- src/ai/ai_instance.cpp	(revision 23029)
+++ src/ai/ai_instance.cpp	(working copy)
@@ -789,3 +789,8 @@
 	sq_pop(vm, 4);
 	return true;
 }
+
+SQInteger AIInstance::GetOpsTillSuspend()
+{
+	return this->engine->GetOpsTillSuspend();
+}
\ No newline at end of file
Index: src/ai/ai_instance.hpp
===================================================================
--- src/ai/ai_instance.hpp	(revision 23029)
+++ src/ai/ai_instance.hpp	(working copy)
@@ -172,6 +172,12 @@
 	 * call from within a function called by the AI.
 	 */
 	void Suspend();
+
+	/**
+	 * Get the number of opcodes the AI have left. This function is safe to
+	 * call from within a function called by the AI.
+	 */
+	SQInteger GetOpsTillSuspend();
 private:
 	class AIController *controller;  ///< The AI main class.
 	class AIStorage *storage;        ///< Some global information for each running AI.
@@ -216,6 +222,8 @@
 	 * @return True if the loading was successful.
 	 */
 	static bool LoadObjects(HSQUIRRELVM vm);
+
+	
 };
 
 #endif /* AI_INSTANCE_HPP */
Index: src/ai/api/ai_controller.cpp
===================================================================
--- src/ai/api/ai_controller.cpp	(revision 23029)
+++ src/ai/api/ai_controller.cpp	(working copy)
@@ -66,6 +66,11 @@
 	return ::Company::Get(_current_company)->ai_instance->GetController()->ticks;
 }
 
+/* static */ uint AIController::GetOpsTillSuspend()
+{
+	return ::Company::Get(_current_company)->ai_instance->GetOpsTillSuspend();
+}
+
 /* static */ int AIController::GetSetting(const char *name)
 {
 	return AIConfig::GetConfig(_current_company)->GetSetting(name);
Index: src/ai/api/ai_controller.hpp
===================================================================
--- src/ai/api/ai_controller.hpp	(revision 23029)
+++ src/ai/api/ai_controller.hpp	(working copy)
@@ -52,6 +52,12 @@
 	static uint GetTick();
 
 	/**
+	 * Find at which OPCode your AI currently has remainings.
+	 * @return returns the current tick.
+	 */
+	static uint GetOpsTillSuspend();
+
+	/**
 	 * Get the value of one of your settings you set via info.nut.
 	 * @param name The name of the setting.
 	 * @return the value for the setting, or -1 if the setting is not known.
Index: src/ai/api/ai_controller.hpp.sq
===================================================================
--- src/ai/api/ai_controller.hpp.sq	(revision 23029)
+++ src/ai/api/ai_controller.hpp.sq	(working copy)
@@ -14,6 +14,7 @@
 	DefSQClass <AIController> SQAIController("AIController");
 	SQAIController.PreRegister(engine);
 	SQAIController.DefSQStaticMethod(engine, &AIController::GetTick,         "GetTick",         1, ".");
+	SQAIController.DefSQStaticMethod(engine, &AIController::GetOpsTillSuspend,         "GetOpsTillSuspend",         1, ".");
 	SQAIController.DefSQStaticMethod(engine, &AIController::SetCommandDelay, "SetCommandDelay", 2, ".i");
 	SQAIController.DefSQStaticMethod(engine, &AIController::Sleep,           "Sleep",           2, ".i");
 	SQAIController.DefSQStaticMethod(engine, &AIController::GetSetting,      "GetSetting",      2, ".s");
Index: src/script/squirrel.cpp
===================================================================
--- src/script/squirrel.cpp	(revision 23029)
+++ src/script/squirrel.cpp	(working copy)
@@ -549,3 +549,8 @@
 {
 	return sq_can_suspend(this->vm);
 }
+
+SQInteger Squirrel::GetOpsTillSuspend()
+{
+	return this->vm->_ops_till_suspend;
+}
\ No newline at end of file
Index: src/script/squirrel.hpp
===================================================================
--- src/script/squirrel.hpp	(revision 23029)
+++ src/script/squirrel.hpp	(working copy)
@@ -253,6 +253,11 @@
 	 * Are we allowed to suspend the squirrel script at this moment?
 	 */
 	bool CanSuspend();
+
+	/**
+	 * Get The Ops till suspend?
+	 */
+	SQInteger GetOpsTillSuspend();
 };
 
 #endif /* SQUIRREL_HPP */
