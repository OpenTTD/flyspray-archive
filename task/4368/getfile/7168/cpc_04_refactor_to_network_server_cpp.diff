diff -r 11eedf4c5e35 -r bfd5ac99ffcf src/network/network.cpp
--- a/src/network/network.cpp	Wed Jan 19 00:24:50 2011 +0100
+++ b/src/network/network.cpp	Wed Jan 19 00:47:42 2011 +0100
@@ -203,25 +203,6 @@
 }
 
 /**
- * Hash the current company password; used when the server 'company' sets his/her password.
- */
-void HashCurrentCompanyPassword(const char *password)
-{
-	uint32 password_game_seed;
-	char password_server_id[NETWORK_SERVER_ID_LENGTH];
-
-	password_game_seed = _settings_game.game_creation.generation_seed;
-	strecpy(password_server_id, _settings_client.network.network_id, lastof(password_server_id));
-
-	const char *new_pw = GenerateCompanyPasswordHash(password, password_server_id, password_game_seed);
-	strecpy(_network_company_states[_local_company].password, new_pw, lastof(_network_company_states[_local_company].password));
-
-	if (_network_server) {
-		NetworkServerUpdateCompanyPassworded(_local_company, !StrEmpty(_network_company_states[_local_company].password));
-	}
-}
-
-/**
  * Check if the company we want to join requires a password.
  * @param company_id id of the company we want to check the 'passworded' flag for.
  * @return true if the company requires a password.
diff -r 11eedf4c5e35 -r bfd5ac99ffcf src/network/network.h
--- a/src/network/network.h	Wed Jan 19 00:24:50 2011 +0100
+++ b/src/network/network.h	Wed Jan 19 00:47:42 2011 +0100
@@ -19,9 +19,6 @@
 void NetworkShutDown();
 void NetworkDrawChatMessage();
 
-const char *GenerateCompanyPasswordHash(const char *password, const char *password_server_id, uint32 password_game_seed);
-void HashCurrentCompanyPassword(const char *password);
-
 extern bool _networking;         ///< are we in networking mode?
 extern bool _network_server;     ///< network-server is active
 extern bool _network_available;  ///< is network mode available?
diff -r 11eedf4c5e35 -r bfd5ac99ffcf src/network/network_internal.h
--- a/src/network/network_internal.h	Wed Jan 19 00:24:50 2011 +0100
+++ b/src/network/network_internal.h	Wed Jan 19 00:47:42 2011 +0100
@@ -168,6 +168,7 @@
 NetworkClientSocket *NetworkFindClientStateFromClientID(ClientID client_id);
 StringID GetNetworkErrorMsg(NetworkErrorCode err);
 bool NetworkFindName(char new_name[NETWORK_CLIENT_NAME_LENGTH]);
+const char *GenerateCompanyPasswordHash(const char *password, const char *password_server_id, uint32 password_game_seed);
 
 #endif /* ENABLE_NETWORK */
 #endif /* NETWORK_INTERNAL_H */
diff -r 11eedf4c5e35 -r bfd5ac99ffcf src/network/network_server.cpp
--- a/src/network/network_server.cpp	Wed Jan 19 00:24:50 2011 +0100
+++ b/src/network/network_server.cpp	Wed Jan 19 00:47:42 2011 +0100
@@ -1629,6 +1629,26 @@
 	return true;
 }
 
+/**
+ * Hash the current company password; used when the server 'company' sets his/her password.
+ * @param password The password to hash.
+ */
+void HashCurrentCompanyPassword(const char *password)
+{
+	uint32 password_game_seed;
+	char password_server_id[NETWORK_SERVER_ID_LENGTH];
+
+	password_game_seed = _settings_game.game_creation.generation_seed;
+	strecpy(password_server_id, _settings_client.network.network_id, lastof(password_server_id));
+
+	const char *new_pw = GenerateCompanyPasswordHash(password, password_server_id, password_game_seed);
+	strecpy(_network_company_states[_local_company].password, new_pw, lastof(_network_company_states[_local_company].password));
+
+	if (_network_server) {
+		NetworkServerUpdateCompanyPassworded(_local_company, !StrEmpty(_network_company_states[_local_company].password));
+	}
+}
+
 /* Handle the local command-queue */
 static void NetworkHandleCommandQueue(NetworkClientSocket *cs)
 {
diff -r 11eedf4c5e35 -r bfd5ac99ffcf src/network/network_server.h
--- a/src/network/network_server.h	Wed Jan 19 00:24:50 2011 +0100
+++ b/src/network/network_server.h	Wed Jan 19 00:47:42 2011 +0100
@@ -118,6 +118,7 @@
 };
 
 void NetworkServer_Tick(bool send_frame);
+void HashCurrentCompanyPassword(const char *password);
 
 #define FOR_ALL_CLIENT_SOCKETS_FROM(var, start) FOR_ALL_ITEMS_FROM(NetworkClientSocket, clientsocket_index, var, start)
 #define FOR_ALL_CLIENT_SOCKETS(var) FOR_ALL_CLIENT_SOCKETS_FROM(var, 0)
