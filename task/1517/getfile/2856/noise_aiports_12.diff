Index: src/settings.cpp
===================================================================
--- src/settings.cpp	(revision 12991)
+++ src/settings.cpp	(working copy)
@@ -1475,6 +1475,7 @@
 	SDT_CONDBOOL(Patches, gradual_loading, 40, SL_MAX_VERSION, 0, 0,  true, STR_CONFIG_PATCHES_GRADUAL_LOADING,    NULL),
 	SDT_CONDBOOL(Patches, road_stop_on_town_road, 47, SL_MAX_VERSION, 0, 0, false, STR_CONFIG_PATCHES_STOP_ON_TOWN_ROAD, NULL),
 	SDT_CONDBOOL(Patches, adjacent_stations,      62, SL_MAX_VERSION, 0, 0, true,  STR_CONFIG_PATCHES_ADJACENT_STATIONS, NULL),
+	SDT_CONDBOOL(Patches, station_noise_level,    96, SL_MAX_VERSION, 0, 0, false, STR_CONFIG_PATCHES_NOISE_LEVEL,       NULL),
 
 	/***************************************************************************/
 	/* Economy section of the GUI-configure patches window */
@@ -1516,6 +1517,7 @@
 	 SDT_VAR(Patches, dist_local_authority,SLE_UINT8, 0, 0, 20, 5,  60, 0, STR_NULL, NULL),
 	 SDT_VAR(Patches, wait_oneway_signal,  SLE_UINT8, 0, 0, 15, 2, 100, 0, STR_NULL, NULL),
 	 SDT_VAR(Patches, wait_twoway_signal,  SLE_UINT8, 0, 0, 41, 2, 100, 0, STR_NULL, NULL),
+	SDT_CONDLISTO(Patches, town_noise_population, 3, SLE_UINT16, 96, SL_MAX_VERSION, 0, D0, "800,2000,4000", STR_NULL, NULL),
 
 	/***************************************************************************/
 	/* New Pathfinding patch settings */
Index: src/lang/english.txt
===================================================================
--- src/lang/english.txt	(revision 12991)
+++ src/lang/english.txt	(working copy)
@@ -3549,3 +3549,9 @@
 STR_OSK_KEYBOARD_LAYOUT                                         :`1234567890-=\qwertyuiop[]asdfghjkl;'  zxcvbnm,./ .
 STR_OSK_KEYBOARD_LAYOUT_CAPS                                    :~!@#$%^&*()_+|QWERTYUIOP{{}}ASDFGHJKL:"  ZXCVBNM<>? .
 ########
+
+############ town controlled noise level
+STR_CONFIG_PATCHES_NOISE_LEVEL                                  :{LTBLUE}Allow town controlled noise level for airports: {ORANGE}{STRING}
+STR_NOISE_IN_TOWN                                               :{BLACK}Noise limit in town: {ORANGE}{COMMA}{BLACK}  max: {ORANGE}{COMMA}
+STR_STATION_NOISE                                               :{BLACK}Noise generated: {GOLD}{COMMA}
+########
Index: src/settings_gui.cpp
===================================================================
--- src/settings_gui.cpp	(revision 12991)
+++ src/settings_gui.cpp	(working copy)
@@ -758,6 +758,7 @@
 	"gradual_loading",
 	"road_stop_on_town_road",
 	"adjacent_stations",
+	"station_noise_level",
 };
 
 static const char *_patches_economy[] = {
Index: src/town.h
===================================================================
--- src/town.h	(revision 12991)
+++ src/town.h	(working copy)
@@ -116,6 +116,9 @@
 	 * bit 2 = STADIUM */
 	byte flags12;
 
+	/* level of noise that all the airports are generating */
+	uint16 noise_reached;
+
 	/* Which players have a statue? */
 	byte statues;
 
@@ -184,6 +187,18 @@
 	void InitializeLayout();
 
 	inline TownLayout GetActiveLayout() const;
+
+	/** Calculate the max town noise */
+	inline uint16 MaxTownNoise() {
+		/* the value of population that raise the max town noise by 1 must be at least 1
+		 * _opt.diff.town_council_tolerance : 0 permissive, 1 neutral, 2 hostile */
+		if (_patches.town_noise_population[_opt.diff.town_council_tolerance] == 0) {
+			_patches.town_noise_population[_opt.diff.town_council_tolerance] = 1;
+		}
+
+		return (this->population == 0) ? 0 :
+				(this->population / _patches.town_noise_population[_opt.diff.town_council_tolerance] + 3);
+	}
 };
 
 /**
Index: src/saveload.cpp
===================================================================
--- src/saveload.cpp	(revision 12991)
+++ src/saveload.cpp	(working copy)
@@ -34,7 +34,7 @@
 
 #include "table/strings.h"
 
-extern const uint16 SAVEGAME_VERSION = 95;
+extern const uint16 SAVEGAME_VERSION = 96;
 
 SavegameType _savegame_type; ///< type of savegame we are loading
 
Index: src/airport.cpp
===================================================================
--- src/airport.cpp	(revision 12991)
+++ src/airport.cpp	(working copy)
@@ -43,7 +43,7 @@
 		_airport_fta_dummy,
 		NULL,
 		0,
-		0, 0,
+		0, 0, 0,
 		0,
 		0
 	);
@@ -57,7 +57,7 @@
 		_airport_fta_country,
 		_airport_depots_country,
 		lengthof(_airport_depots_country),
-		4, 3,
+		4, 3, 3,
 		0,
 		4
 	);
@@ -71,7 +71,7 @@
 		_airport_fta_city,
 		_airport_depots_city,
 		lengthof(_airport_depots_city),
-		6, 6,
+		6, 6, 5,
 		0,
 		5
 	);
@@ -85,7 +85,7 @@
 		_airport_fta_metropolitan,
 		_airport_depots_metropolitan,
 		lengthof(_airport_depots_metropolitan),
-		6, 6,
+		6, 6, 8,
 		0,
 		6
 	);
@@ -99,7 +99,7 @@
 		_airport_fta_international,
 		_airport_depots_international,
 		lengthof(_airport_depots_international),
-		7, 7,
+		7, 7, 17,
 		0,
 		8
 	);
@@ -113,7 +113,7 @@
 		_airport_fta_intercontinental,
 		_airport_depots_intercontinental,
 		lengthof(_airport_depots_intercontinental),
-		9, 11,
+		9, 11, 25,
 		0,
 		10
 	);
@@ -127,7 +127,7 @@
 		_airport_fta_heliport_oilrig,
 		NULL,
 		0,
-		1, 1,
+		1, 1, 1,
 		60,
 		4
 	);
@@ -141,7 +141,7 @@
 		_airport_fta_heliport_oilrig,
 		NULL,
 		0,
-		1, 1,
+		1, 1, 0,
 		54,
 		3
 	);
@@ -155,7 +155,7 @@
 		_airport_fta_commuter,
 		_airport_depots_commuter,
 		lengthof(_airport_depots_commuter),
-		5, 4,
+		5, 4, 4,
 		0,
 		4
 	);
@@ -169,7 +169,7 @@
 		_airport_fta_helidepot,
 		_airport_depots_helidepot,
 		lengthof(_airport_depots_helidepot),
-		2, 2,
+		2, 2, 2,
 		0,
 		4
 	);
@@ -183,7 +183,7 @@
 		_airport_fta_helistation,
 		_airport_depots_helistation,
 		lengthof(_airport_depots_helistation),
-		4, 2,
+		4, 2, 3,
 		0,
 		4
 	);
@@ -225,6 +225,7 @@
 	const byte nof_depots_,
 	uint size_x_,
 	uint size_y_,
+	byte noise_level_,
 	byte delta_z_,
 	byte catchment_
 ) :
@@ -238,6 +239,7 @@
 	entry_points(entry_points_),
 	size_x(size_x_),
 	size_y(size_y_),
+	noise_level(noise_level_),
 	delta_z(delta_z_),
 	catchment(catchment_)
 {
Index: src/newgrf.cpp
===================================================================
--- src/newgrf.cpp	(revision 12991)
+++ src/newgrf.cpp	(working copy)
@@ -5109,7 +5109,7 @@
 	                   |                                        (1 << 0x1D)  // lowmemory
 	                   |                                        (1 << 0x1E); // generalfixes
 
-	_ttdpatch_flags[1] =                                        (0 << 0x07)  // moreairports - based on units of noise
+	_ttdpatch_flags[1] =                                        (1 << 0x07)  // moreairports - based on units of noise
 	                   |        ((_patches.mammoth_trains ? 1 : 0) << 0x08)  // mammothtrains
 	                   |                                        (1 << 0x09)  // trainrefit
 	                   |                                        (0 << 0x0B)  // subsidiaries
Index: src/station_cmd.cpp
===================================================================
--- src/station_cmd.cpp	(revision 12991)
+++ src/station_cmd.cpp	(working copy)
@@ -1612,6 +1612,67 @@
 	_airport_sections_helistation        // Helistation
 };
 
+struct TileIndexDistance {
+	TileIndex index;
+	uint distance;
+};
+
+/** Get a possible noise reduction factor based on distance from town center.
+ * The further you get, the less noise you generate.
+ * So all those folks at city council can now happily slee...  work in their offices
+ * @param afc AirportFTAClass pointer of the class being proposed
+ * @param t Town who will receive the airport's candidature
+ * @param tile TileIndex where the new airport might be built
+ * @return the noise taht will be generated, according to distance
+ */
+uint8 GetAirportNoiseLevelForTown(const AirportFTAClass *afc, Town *t, TileIndex tile)
+{
+	uint distance;
+	uint8 town_tolerance_distance = 8 + (_opt.diff.town_council_tolerance * 4);
+
+	/* 0 cannot be accounted, and 1 is the lowest that can be reduced from town.
+	 * So no need to go any further*/
+	if (afc->noise_level <= 1) return afc->noise_level;
+
+	/* Find the airport-to-be's closest corner to the town */
+	if (afc->size_x == 1 && afc->size_y == 1) {
+		distance = DistanceManhattan(t->xy, tile);  // there are no closest corner, IT is THE corner
+	} else {
+		/* calculate manhattan distance to town of each side of the airport */
+		TileIndexDistance dist[4];
+		uint min_tile = UINT_MAX; ///< Sentinel value
+		uint min_indice = 4;
+
+		dist[0].index = tile; // north tile
+		dist[1].index = TileAddWrap(tile, afc->size_x - 1, afc->size_y - 1);  // south tile
+		dist[2].index = TileAddWrap(tile, afc->size_x - 1, 0);  // west tile
+		dist[3].index = TileAddWrap(tile, 0, afc->size_y - 1); //east tile
+
+		/* now, go and find the smallest one, thus the closest */
+		for (uint i = 0; i < 4; i++) {
+			dist[i].distance = DistanceManhattan(t->xy, dist[i].index);
+
+			if (dist[i].distance < min_tile) {
+				min_tile = dist[i].distance;  // here's the new candidate
+				min_indice = i;
+			}
+		}
+
+		distance = dist[min_indice].distance;
+	}
+
+	/* 8 is the "inner" distance where there is no noise reduction */
+	if (distance < town_tolerance_distance) return afc->noise_level;
+
+	/* now, we want to have the distance segmented using the distance judged bareable by town
+	 * This will give us the coefficient of reduction the distance provides. */
+	uint noise_reduction = min(afc->noise_level, distance / town_tolerance_distance);
+
+	/* since nothing is for free */
+	return noise_reduction == 0 ? 0 : max(1U, noise_reduction == afc->noise_level ? afc->noise_level - 1 : noise_reduction);
+
+}
+
 /** Place an Airport.
  * @param tile tile where airport will be built
  * @param flags operation to perform
@@ -1621,6 +1682,7 @@
 CommandCost CmdBuildAirport(TileIndex tile, uint32 flags, uint32 p1, uint32 p2)
 {
 	bool airport_upgrade = true;
+	uint newnoise_level = 0;
 
 	/* Check if a valid, buildable airport was chosen for construction */
 	if (p1 > lengthof(_airport_sections) || !HasBit(GetValidAirports(), p1)) return CMD_ERROR;
@@ -1643,15 +1705,28 @@
 	CommandCost cost = CheckFlatLandBelow(tile, w, h, flags, 0, NULL);
 	if (CmdFailed(cost)) return cost;
 
-	/* Check if local auth refuses a new airport */
-	uint num = 0;
-	FOR_ALL_STATIONS(st) {
-		if (st->town == t && st->facilities & FACIL_AIRPORT && st->airport_type != AT_OILRIG) num++;
+	/* Check if local auth would allow a new airport */
+	if (_patches.station_noise_level) {
+		/* Go get the final noise level, that is base noise minus factor from distance to town center */
+		newnoise_level = GetAirportNoiseLevelForTown(afc, t, tile);
+
+		/* do not allow to build a new airport if this raise the town noise over the maximum allowed by town */
+		if ((t->noise_reached + newnoise_level) > t->MaxTownNoise()) {
+			SetDParam(0, t->index);
+			return_cmd_error(STR_2009_LOCAL_AUTHORITY_REFUSES);
+		}
+	} else {
+		uint num = 0;
+		const Station *st;
+		FOR_ALL_STATIONS(st) {
+			if (st->town == t && st->facilities & FACIL_AIRPORT && st->airport_type != AT_OILRIG) num++;
+		}
+
+		if (num >= 2) {
+			SetDParam(0, t->index);
+			return_cmd_error(STR_2035_LOCAL_AUTHORITY_REFUSES);
+		}
 	}
-	if (num >= 2) {
-		SetDParam(0, t->index);
-		return_cmd_error(STR_2035_LOCAL_AUTHORITY_REFUSES);
-	}
 
 	if (!_patches.adjacent_stations || !HasBit(p2, 0)) {
 		st = GetStationAround(tile, w, h, INVALID_STATION);
@@ -1695,6 +1770,7 @@
 	cost.AddCost(_price.build_airport * w * h);
 
 	if (flags & DC_EXEC) {
+		st->town->noise_reached += newnoise_level;
 		st->airport_tile = tile;
 		st->AddFacility(FACIL_AIRPORT, tile);
 		st->airport_type = (byte)p1;
@@ -1725,6 +1801,9 @@
 		RebuildStationLists();
 		InvalidateWindow(WC_STATION_LIST, st->owner);
 		InvalidateWindowWidget(WC_STATION_VIEW, st->index, SVW_PLANES);
+		if (_patches.station_noise_level) {
+			InvalidateWindow(WC_TOWN_VIEW, st->town->index);
+		}
 	}
 
 	return cost;
@@ -1767,12 +1846,23 @@
 			);
 		}
 
+		if (_patches.station_noise_level) {
+			/* Go get the final noise level, that is base noise minus factor from distance to town center */
+			uint newnoise_level = GetAirportNoiseLevelForTown(afc, st->town, tile);
+			st->town->noise_reached = newnoise_level > st->town->noise_reached ? 0 : st->town->noise_reached - newnoise_level;
+		} else {
+			st->town->noise_reached = 0;  // just in case.
+		}
+
 		st->rect.AfterRemoveRect(st, tile, w, h);
 
 		st->airport_tile = 0;
 		st->facilities &= ~FACIL_AIRPORT;
 
 		InvalidateWindowWidget(WC_STATION_VIEW, st->index, SVW_PLANES);
+		if (_patches.station_noise_level) {
+			InvalidateWindow(WC_TOWN_VIEW, st->town->index);
+		}
 		UpdateStationVirtCoordDirty(st);
 		DeleteStationIfEmpty(st);
 	}
Index: src/town_cmd.cpp
===================================================================
--- src/town_cmd.cpp	(revision 12991)
+++ src/town_cmd.cpp	(working copy)
@@ -1490,6 +1490,8 @@
 			break;
 	}
 
+	t->noise_reached = 0;
+
 	t->num_houses += x;
 	UpdateTownRadius(t);
 
Index: src/airport_gui.cpp
===================================================================
--- src/airport_gui.cpp	(revision 12991)
+++ src/airport_gui.cpp	(working copy)
@@ -12,6 +12,7 @@
 #include "airport.h"
 #include "sound_func.h"
 #include "window_func.h"
+#include "strings_func.h"
 #include "settings_type.h"
 #include "viewport_func.h"
 #include "gfx_func.h"
@@ -164,6 +165,11 @@
 			w->SetWidgetLoweredState(BAW_BTN_DONTHILIGHT, !_station_show_coverage);
 			w->SetWidgetLoweredState(BAW_BTN_DOHILIGHT, _station_show_coverage);
 			w->LowerWidget(_selected_airport_type + BAW_SMALL_AIRPORT);
+
+			if (_patches.station_noise_level) {
+				ResizeWindowForWidget(w, BAW_BOTTOMPANEL, 0, 10);
+			}
+
 			break;
 
 		case WE_PAINT: {
@@ -197,8 +203,16 @@
 			if (_station_show_coverage) SetTileSelectBigSize(-rad, -rad, 2 * rad, 2 * rad);
 
 			DrawWindowWidgets(w);
+
+			/* only show the station (airport) noise, if the noise option is activated */
+			if (_patches.station_noise_level) {
+				/* show the noise of the selected airport */
+				SetDParam(0, airport->noise_level);
+				DrawString(2, 206, STR_STATION_NOISE, 0);
+			}
+
 			/* strings such as 'Size' and 'Coverage Area' */
-			int text_end = DrawStationCoverageAreaText(2, 206, SCT_ALL, rad, false);
+			int text_end = DrawStationCoverageAreaText(2, w->widget[BAW_BTN_DOHILIGHT].bottom + 4, SCT_ALL, rad, false);
 			text_end = DrawStationCoverageAreaText(2, text_end + 4, SCT_ALL, rad, true) + 4;
 			if (text_end != w->widget[BAW_BOTTOMPANEL].bottom) {
 				w->SetDirty();
Index: src/settings_type.h
===================================================================
--- src/settings_type.h	(revision 12991)
+++ src/settings_type.h	(working copy)
@@ -221,6 +221,8 @@
 	bool pause_on_newgame;       ///< Whether to start new games paused or not.
 
 	TownLayoutByte town_layout;  ///< Select town layout
+	bool station_noise_level;        ///< build new airports when the town noise level is still withi accepted limits
+	uint16 town_noise_population[3];  ///< Population to base decision on noise evaluation (@see town_council_tolerance)
 
 	bool timetabling;            ///< Whether to allow timetabling.
 	bool timetable_in_ticks;     ///< Whether to show the timetable in ticks rather than days.
Index: src/airport.h
===================================================================
--- src/airport.h	(revision 12991)
+++ src/airport.h	(working copy)
@@ -7,6 +7,7 @@
 
 #include "direction_type.h"
 #include "map_type.h"
+#include "town.h"
 
 enum {MAX_TERMINALS =  10};
 enum {MAX_HELIPADS  =   4};
@@ -144,6 +145,7 @@
 			byte nof_depots,
 			uint size_x,
 			uint size_y,
+			uint8 noise_level,
 			byte delta_z,
 			byte catchment
 		);
@@ -167,6 +169,7 @@
 	const byte *entry_points;             ///< when an airplane arrives at this airport, enter it at position entry_point, index depends on direction
 	byte size_x;
 	byte size_y;
+	uint8 noise_level;                    ///< noise that this airport generates
 	byte delta_z;                         ///< Z adjustment for helicopter pads
 	byte catchment;
 };
@@ -194,4 +197,8 @@
  */
 uint32 GetValidAirports();
 
+
+/* Calculate the noise this type airport will generate */
+uint8 GetAirportNoiseLevelForTown(const AirportFTAClass *afc, Town *t, TileIndex tile);
+
 #endif /* AIRPORT_H */
Index: src/town_gui.cpp
===================================================================
--- src/town_gui.cpp	(revision 12991)
+++ src/town_gui.cpp	(working copy)
@@ -280,7 +280,9 @@
 enum TownViewWidget {
 	TVW_CAPTION = 1,
 	TVW_STICKY,
-	TVW_CENTERVIEW = 6,
+	TVW_VIEWPORTPANEL,
+	TVW_INFOPANEL = 5,
+	TVW_CENTERVIEW,
 	TVW_SHOWAUTORITY,
 	TVW_CHANGENAME,
 	TVW_EXPAND,
@@ -294,6 +296,11 @@
 	switch (e->event) {
 		case WE_CREATE: {
 			bool ingame = _game_mode != GM_EDITOR;
+
+			if (_patches.station_noise_level && _game_mode != GM_EDITOR) {
+				ResizeWindowForWidget(w, TVW_INFOPANEL, 0, 10);
+			}
+
 			if (t->larger_town) w->widget[TVW_CAPTION].data = STR_CITY;
 			w->SetWidgetHiddenState(TVW_DELETE, ingame);  // hide delete button on game mode
 			w->SetWidgetHiddenState(TVW_EXPAND, ingame);  // hide expand button on game mode
@@ -328,6 +335,14 @@
 			SetDParam(1, t->max_mail);
 			DrawString(2, 127, STR_200E_MAIL_LAST_MONTH_MAX, TC_FROMSTRING);
 
+			/* only show the town noise, if the noise option is activated.
+			 * It would be quite useless to have it available on editor too... */
+			if (_patches.station_noise_level && _game_mode != GM_EDITOR) {
+				SetDParam(0, t->noise_reached);
+				SetDParam(1, t->MaxTownNoise());
+				DrawString(2, 137, STR_NOISE_IN_TOWN, 0);
+			}
+
 			DrawWindowViewport(w);
 			break;
 
Index: src/openttd.cpp
===================================================================
--- src/openttd.cpp	(revision 12991)
+++ src/openttd.cpp	(working copy)
@@ -1368,6 +1368,20 @@
 		players[v->owner]->num_engines[v->engine_type]++;
 	}
 
+	/* Towns have a noise controlled number of airports system
+	 * So each airport's noise value must be added to the town->noise_reached value
+	 * Reset each town's noise_reached value to '0' before. */
+	Town *t;
+	Station *st;
+
+	FOR_ALL_TOWNS(t) t->noise_reached = 0;
+
+	FOR_ALL_STATIONS(st) {
+		if (IsAirport(st->xy)) {
+			st->town->noise_reached += GetAirportNoiseLevelForTown(GetAirport(st->airport_type), st->town, st->xy);
+		}
+	}
+
 	return true;
 }
 
