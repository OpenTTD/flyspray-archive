Index: src/airport.cpp
===================================================================
--- src/airport.cpp	(revision 12663)
+++ src/airport.cpp	(working copy)
@@ -43,7 +43,7 @@
 		_airport_fta_dummy,
 		NULL,
 		0,
-		0, 0,
+		0, 0, 0,
 		0,
 		0
 	);
@@ -57,7 +57,7 @@
 		_airport_fta_country,
 		_airport_depots_country,
 		lengthof(_airport_depots_country),
-		4, 3,
+		4, 3, 3,
 		0,
 		4
 	);
@@ -71,7 +71,7 @@
 		_airport_fta_city,
 		_airport_depots_city,
 		lengthof(_airport_depots_city),
-		6, 6,
+		6, 6, 5,
 		0,
 		5
 	);
@@ -85,7 +85,7 @@
 		_airport_fta_metropolitan,
 		_airport_depots_metropolitan,
 		lengthof(_airport_depots_metropolitan),
-		6, 6,
+		6, 6, 8,
 		0,
 		6
 	);
@@ -99,7 +99,7 @@
 		_airport_fta_international,
 		_airport_depots_international,
 		lengthof(_airport_depots_international),
-		7, 7,
+		7, 7, 17,
 		0,
 		8
 	);
@@ -113,7 +113,7 @@
 		_airport_fta_intercontinental,
 		_airport_depots_intercontinental,
 		lengthof(_airport_depots_intercontinental),
-		9, 11,
+		9, 11, 25,
 		0,
 		10
 	);
@@ -127,7 +127,7 @@
 		_airport_fta_heliport_oilrig,
 		NULL,
 		0,
-		1, 1,
+		1, 1, 1,
 		60,
 		4
 	);
@@ -141,7 +141,7 @@
 		_airport_fta_heliport_oilrig,
 		NULL,
 		0,
-		1, 1,
+		1, 1, 1,
 		54,
 		3
 	);
@@ -155,7 +155,7 @@
 		_airport_fta_commuter,
 		_airport_depots_commuter,
 		lengthof(_airport_depots_commuter),
-		5, 4,
+		5, 4, 4,
 		0,
 		4
 	);
@@ -169,7 +169,7 @@
 		_airport_fta_helidepot,
 		_airport_depots_helidepot,
 		lengthof(_airport_depots_helidepot),
-		2, 2,
+		2, 2, 2,
 		0,
 		4
 	);
@@ -183,7 +183,7 @@
 		_airport_fta_helistation,
 		_airport_depots_helistation,
 		lengthof(_airport_depots_helistation),
-		4, 2,
+		4, 2, 3,
 		0,
 		4
 	);
@@ -225,6 +225,7 @@
 	const byte nof_depots_,
 	uint size_x_,
 	uint size_y_,
+	byte noise_level_,
 	byte delta_z_,
 	byte catchment_
 ) :
@@ -238,6 +239,7 @@
 	entry_points(entry_points_),
 	size_x(size_x_),
 	size_y(size_y_),
+	noise_level(noise_level_),
 	delta_z(delta_z_),
 	catchment(catchment_)
 {
Index: src/airport.h
===================================================================
--- src/airport.h	(revision 12663)
+++ src/airport.h	(working copy)
@@ -144,6 +144,7 @@
 			byte nof_depots,
 			uint size_x,
 			uint size_y,
+			byte noise_level,
 			byte delta_z,
 			byte catchment
 		);
@@ -167,6 +168,7 @@
 	const byte *entry_points;             ///< when an airplane arrives at this airport, enter it at position entry_point, index depends on direction
 	byte size_x;
 	byte size_y;
+	byte noise_level;                     ///< noise that this airport generates
 	byte delta_z;                         ///< Z adjustment for helicopter pads
 	byte catchment;
 };
Index: src/airport_gui.cpp
===================================================================
--- src/airport_gui.cpp	(revision 12663)
+++ src/airport_gui.cpp	(working copy)
@@ -13,6 +13,7 @@
 #include "depot.h"
 #include "sound_func.h"
 #include "window_func.h"
+#include "strings_func.h"
 #include "settings_type.h"
 #include "viewport_func.h"
 #include "gfx_func.h"
@@ -144,13 +145,30 @@
 	if (_patches.link_terraform_toolbar) ShowTerraformToolbar(w);
 }
 
+enum {
+	BAW_BOTTOMPANEL = 10,
+	BAW_SMALL_AIRPORT,
+	BAW_CITY_AIRPORT,
+	BAW_HELIPORT,
+	BAW_METRO_AIRPORT,
+	BAW_STR_INTERNATIONAL_AIRPORT,
+	BAW_COMMUTER_AIRPORT,
+	BAW_HELIDEPOT,
+	BAW_STR_INTERCONTINENTAL_AIRPORT,
+	BAW_HELISTATION,
+	BAW_LAST_AIRPORT = BAW_HELISTATION,
+	BAW_AIRPORT_COUNT = BAW_LAST_AIRPORT - BAW_SMALL_AIRPORT,
+	BAW_BTN_DONTHILIGHT = BAW_LAST_AIRPORT + 1,
+	BAW_BTN_DOHILIGHT,
+};
+
 static void BuildAirportPickerWndProc(Window *w, WindowEvent *e)
 {
 	switch (e->event) {
 		case WE_CREATE:
-			w->SetWidgetLoweredState(16, !_station_show_coverage);
-			w->SetWidgetLoweredState(17, _station_show_coverage);
-			w->LowerWidget(_selected_airport_type + 7);
+			w->SetWidgetLoweredState(BAW_BTN_DONTHILIGHT, !_station_show_coverage);
+			w->SetWidgetLoweredState(BAW_BTN_DOHILIGHT, _station_show_coverage);
+			w->LowerWidget(_selected_airport_type + BAW_SMALL_AIRPORT);
 			break;
 
 		case WE_PAINT: {
@@ -162,10 +180,10 @@
 
 			avail_airports = GetValidAirports();
 
-			w->RaiseWidget(_selected_airport_type + 7);
+			w->RaiseWidget(_selected_airport_type + BAW_SMALL_AIRPORT);
 			if (!HasBit(avail_airports, 0) && _selected_airport_type == AT_SMALL) _selected_airport_type = AT_LARGE;
 			if (!HasBit(avail_airports, 1) && _selected_airport_type == AT_LARGE) _selected_airport_type = AT_SMALL;
-			w->LowerWidget(_selected_airport_type + 7);
+			w->LowerWidget(_selected_airport_type + BAW_SMALL_AIRPORT);
 
 			/* 'Country Airport' starts at widget 7, and if its bit is set, it is
 			 * available, so take its opposite value to set the disabled state.
@@ -173,7 +191,7 @@
 			 * XXX TODO : all airports should be held in arrays, with all relevant data.
 			 * This should be part of newgrf-airports, i suppose
 			 */
-			for (i = 0; i < 9; i++) w->SetWidgetDisabledState(i + 7, !HasBit(avail_airports, i));
+			for (i = 0; i < BAW_AIRPORT_COUNT; i++) w->SetWidgetDisabledState(i + BAW_SMALL_AIRPORT, !HasBit(avail_airports, i));
 
 			/* select default the coverage area to 'Off' (16) */
 			airport = GetAirport(_selected_airport_type);
@@ -184,12 +202,20 @@
 			if (_station_show_coverage) SetTileSelectBigSize(-rad, -rad, 2 * rad, 2 * rad);
 
 			DrawWindowWidgets(w);
+
+			/* only show the station (airport) noise, if the noise option is activated */
+			if (_patches.station_noise_level) {
+				/* show the noise of the selected airport */
+				SetDParam(0, airport->noise_level);
+				DrawString(2, 206, STR_STATION_NOISE, 0);
+			}
+
 			/* strings such as 'Size' and 'Coverage Area' */
-			int text_end = DrawStationCoverageAreaText(2, 206, SCT_ALL, rad, false);
+			int text_end = DrawStationCoverageAreaText(2, _patches.station_noise_level ? 216 : 206, SCT_ALL, rad, false);
 			text_end = DrawStationCoverageAreaText(2, text_end + 4, SCT_ALL, rad, true) + 4;
-			if (text_end != w->widget[6].bottom) {
+			if (text_end != w->widget[BAW_BOTTOMPANEL].bottom) {
 				SetWindowDirty(w);
-				ResizeWindowForWidget(w, 6, 0, text_end - w->widget[6].bottom);
+				ResizeWindowForWidget(w, BAW_BOTTOMPANEL, 0, text_end - w->widget[BAW_BOTTOMPANEL].bottom);
 				SetWindowDirty(w);
 			}
 			break;
@@ -197,18 +223,20 @@
 
 		case WE_CLICK: {
 			switch (e->we.click.widget) {
-				case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15:
-					w->RaiseWidget(_selected_airport_type + 7);
-					_selected_airport_type = e->we.click.widget - 7;
-					w->LowerWidget(_selected_airport_type + 7);
+				case BAW_SMALL_AIRPORT: case BAW_CITY_AIRPORT: case BAW_HELIPORT: case BAW_METRO_AIRPORT:
+				case BAW_STR_INTERNATIONAL_AIRPORT: case BAW_COMMUTER_AIRPORT: case BAW_HELIDEPOT:
+				case BAW_STR_INTERCONTINENTAL_AIRPORT: case BAW_HELISTATION:
+					w->RaiseWidget(_selected_airport_type + BAW_SMALL_AIRPORT);
+					_selected_airport_type = e->we.click.widget - BAW_SMALL_AIRPORT;
+					w->LowerWidget(_selected_airport_type + BAW_SMALL_AIRPORT);
 					SndPlayFx(SND_15_BEEP);
 					SetWindowDirty(w);
 					break;
 
-				case 16: case 17:
-					_station_show_coverage = (e->we.click.widget != 16);
-					w->SetWidgetLoweredState(16, !_station_show_coverage);
-					w->SetWidgetLoweredState(17, _station_show_coverage);
+				case BAW_BTN_DONTHILIGHT: case BAW_BTN_DOHILIGHT:
+					_station_show_coverage = (e->we.click.widget != BAW_BTN_DONTHILIGHT);
+					w->SetWidgetLoweredState(BAW_BTN_DONTHILIGHT, !_station_show_coverage);
+					w->SetWidgetLoweredState(BAW_BTN_DOHILIGHT, _station_show_coverage);
 					SndPlayFx(SND_15_BEEP);
 					SetWindowDirty(w);
 					break;
@@ -234,10 +262,14 @@
 {   WWT_CLOSEBOX,   RESIZE_NONE,     7,     0,    10,     0,    13, STR_00C5,                         STR_018B_CLOSE_WINDOW},
 {    WWT_CAPTION,   RESIZE_NONE,     7,    11,   147,     0,    13, STR_3001_AIRPORT_SELECTION,       STR_018C_WINDOW_TITLE_DRAG_THIS},
 {      WWT_PANEL,   RESIZE_NONE,     7,     0,   147,    14,    52, 0x0,                              STR_NULL},
+{      WWT_LABEL,   RESIZE_NONE,     7,     0,   147,    14,    27, STR_SMALL_AIRPORTS,               STR_NULL},
 {      WWT_PANEL,   RESIZE_NONE,     7,     0,   147,    53,    89, 0x0,                              STR_NULL},
+{      WWT_LABEL,   RESIZE_NONE,     7,     0,   147,    52,    65, STR_LARGE_AIRPORTS,               STR_NULL},
 {      WWT_PANEL,   RESIZE_NONE,     7,     0,   147,    90,   127, 0x0,                              STR_NULL},
+{      WWT_LABEL,   RESIZE_NONE,     7,     0,   147,    90,   103, STR_HUB_AIRPORTS,                 STR_NULL},
 {      WWT_PANEL,   RESIZE_NONE,     7,     0,   147,   128,   177, 0x0,                              STR_NULL},
-{      WWT_PANEL,   RESIZE_NONE,     7,     0,   147,   178,   239, 0x0,                              STR_NULL},
+{      WWT_LABEL,   RESIZE_NONE,     7,     0,   147,   128,   141, STR_HELIPORTS,                    STR_NULL},
+{      WWT_PANEL,   RESIZE_NONE,     7,     0,   147,   178,   249, 0x0,                              STR_NULL}, // bottom general box
 {    WWT_TEXTBTN,   RESIZE_NONE,    14,     2,   145,    27,    38, STR_SMALL_AIRPORT,                STR_3058_SELECT_SIZE_TYPE_OF_AIRPORT},
 {    WWT_TEXTBTN,   RESIZE_NONE,    14,     2,   145,    65,    76, STR_CITY_AIRPORT,                 STR_3058_SELECT_SIZE_TYPE_OF_AIRPORT},
 {    WWT_TEXTBTN,   RESIZE_NONE,    14,     2,   145,   141,   152, STR_HELIPORT,                     STR_3058_SELECT_SIZE_TYPE_OF_AIRPORT},
@@ -249,16 +281,12 @@
 {    WWT_TEXTBTN,   RESIZE_NONE,    14,     2,   145,   153,   164, STR_HELISTATION,                  STR_3058_SELECT_SIZE_TYPE_OF_AIRPORT},
 {    WWT_TEXTBTN,   RESIZE_NONE,    14,    14,    73,   191,   202, STR_02DB_OFF,                     STR_3065_DON_T_HIGHLIGHT_COVERAGE},
 {    WWT_TEXTBTN,   RESIZE_NONE,    14,    74,   133,   191,   202, STR_02DA_ON,                      STR_3064_HIGHLIGHT_COVERAGE_AREA},
-{      WWT_LABEL,   RESIZE_NONE,     7,     0,   147,    14,    27, STR_SMALL_AIRPORTS,               STR_NULL},
-{      WWT_LABEL,   RESIZE_NONE,     7,     0,   147,    52,    65, STR_LARGE_AIRPORTS,               STR_NULL},
-{      WWT_LABEL,   RESIZE_NONE,     7,     0,   147,    90,   103, STR_HUB_AIRPORTS,                 STR_NULL},
-{      WWT_LABEL,   RESIZE_NONE,     7,     0,   147,   128,   141, STR_HELIPORTS,                    STR_NULL},
 {      WWT_LABEL,   RESIZE_NONE,     7,     0,   147,   178,   191, STR_3066_COVERAGE_AREA_HIGHLIGHT, STR_NULL},
 {   WIDGETS_END},
 };
 
 static const WindowDesc _build_airport_desc = {
-	WDP_AUTO, WDP_AUTO, 148, 240, 148, 240,
+	WDP_AUTO, WDP_AUTO, 148, 250, 148, 250,
 	WC_BUILD_STATION, WC_BUILD_TOOLBAR,
 	WDF_STD_TOOLTIPS | WDF_STD_BTN | WDF_DEF_WIDGET,
 	_build_airport_picker_widgets,
Index: src/lang/english.txt
===================================================================
--- src/lang/english.txt	(revision 12663)
+++ src/lang/english.txt	(working copy)
@@ -3519,3 +3519,9 @@
 STR_OSK_KEYBOARD_LAYOUT                                         :`1234567890-=\qwertyuiop[]asdfghjkl;'  zxcvbnm,./ .
 STR_OSK_KEYBOARD_LAYOUT_CAPS                                    :~!@#$%^&*()_+|QWERTYUIOP{{}}ASDFGHJKL:"  ZXCVBNM<>? .
 ########
+
+############ town controlled noise level
+STR_CONFIG_PATCHES_NOISE_LEVEL                                  :{LTBLUE}Allow town controlled noise level for airports: {ORANGE}{STRING}
+STR_NOISE_IN_TOWN                                               :{BLACK}Noise in town: {ORANGE}{COMMA}{BLACK}  max: {ORANGE}{COMMA}
+STR_STATION_NOISE                                               :{BLACK}Noise: {GOLD}{COMMA}
+########
Index: src/misc_gui.cpp
===================================================================
--- src/misc_gui.cpp	(revision 12663)
+++ src/misc_gui.cpp	(working copy)
@@ -778,7 +778,7 @@
 			case SCT_ALL: break;
 			default: NOT_REACHED();
 		}
-		if (cargo[i] >= (supplies ? 1 : 8)) {
+		if (cargo[i] >= (supplies ? 1U : 8U)) {
 			if (first) {
 				first = false;
 			} else {
Index: src/newgrf.cpp
===================================================================
--- src/newgrf.cpp	(revision 12663)
+++ src/newgrf.cpp	(working copy)
@@ -4984,7 +4984,7 @@
 	                   |                                        (1 << 0x1D)  // lowmemory
 	                   |                                        (1 << 0x1E); // generalfixes
 
-	_ttdpatch_flags[1] =                                        (0 << 0x07)  // moreairports - based on units of noise
+	_ttdpatch_flags[1] =                                        (1 << 0x07)  // moreairports - based on units of noise
 	                   |        ((_patches.mammoth_trains ? 1 : 0) << 0x08)  // mammothtrains
 	                   |                                        (1 << 0x09)  // trainrefit
 	                   |                                        (0 << 0x0B)  // subsidiaries
Index: src/openttd.cpp
===================================================================
--- src/openttd.cpp	(revision 12663)
+++ src/openttd.cpp	(working copy)
@@ -1328,6 +1328,18 @@
 		players[v->owner]->num_engines[v->engine_type]++;
 	}
 
+	/* Towns have a noise controlled number of airports system
+	 * So each airport's noise value must be added to the town->noise_reached value
+	 * Reset each town's noise_reached value to '0' before. */
+	Town *t;
+	Station *st;
+
+	FOR_ALL_TOWNS(t) t->noise_reached = 0;
+
+	FOR_ALL_STATIONS(st) {
+		if (IsAirport(st->xy)) st->town->noise_reached += GetAirport(st->airport_type)->noise_level;
+	}
+
 	return true;
 }
 
Index: src/saveload.cpp
===================================================================
--- src/saveload.cpp	(revision 12663)
+++ src/saveload.cpp	(working copy)
@@ -34,7 +34,7 @@
 
 #include "table/strings.h"
 
-extern const uint16 SAVEGAME_VERSION = 93;
+extern const uint16 SAVEGAME_VERSION = 94;
 uint16 _sl_version;       ///< the major savegame version identifier
 byte   _sl_minor_version; ///< the minor savegame version, DO NOT USE!
 
Index: src/settings.cpp
===================================================================
--- src/settings.cpp	(revision 12663)
+++ src/settings.cpp	(working copy)
@@ -1473,6 +1473,7 @@
 	SDT_CONDBOOL(Patches, gradual_loading, 40, SL_MAX_VERSION, 0, 0,  true, STR_CONFIG_PATCHES_GRADUAL_LOADING,    NULL),
 	SDT_CONDBOOL(Patches, road_stop_on_town_road, 47, SL_MAX_VERSION, 0, 0, false, STR_CONFIG_PATCHES_STOP_ON_TOWN_ROAD, NULL),
 	SDT_CONDBOOL(Patches, adjacent_stations,      62, SL_MAX_VERSION, 0, 0, true,  STR_CONFIG_PATCHES_ADJACENT_STATIONS, NULL),
+	SDT_CONDBOOL(Patches, station_noise_level,    94, SL_MAX_VERSION, 0, 0, false, STR_CONFIG_PATCHES_NOISE_LEVEL,       NULL),
 
 	/***************************************************************************/
 	/* Economy section of the GUI-configure patches window */
@@ -1514,6 +1515,7 @@
 	 SDT_VAR(Patches, dist_local_authority,SLE_UINT8, 0, 0, 20, 5,  60, 0, STR_NULL, NULL),
 	 SDT_VAR(Patches, wait_oneway_signal,  SLE_UINT8, 0, 0, 15, 2, 100, 0, STR_NULL, NULL),
 	 SDT_VAR(Patches, wait_twoway_signal,  SLE_UINT8, 0, 0, 41, 2, 100, 0, STR_NULL, NULL),
+	SDT_CONDLISTO(Patches, town_noise_population, 3, SLE_UINT16, 94, SL_MAX_VERSION, 0, D0, "1500,2500,5000", STR_NULL, NULL),
 
 	/***************************************************************************/
 	/* New Pathfinding patch settings */
Index: src/settings_gui.cpp
===================================================================
--- src/settings_gui.cpp	(revision 12663)
+++ src/settings_gui.cpp	(working copy)
@@ -758,6 +758,7 @@
 	"gradual_loading",
 	"road_stop_on_town_road",
 	"adjacent_stations",
+	"station_noise_level",
 };
 
 static const char *_patches_economy[] = {
Index: src/settings_type.h
===================================================================
--- src/settings_type.h	(revision 12663)
+++ src/settings_type.h	(working copy)
@@ -220,6 +220,8 @@
 	bool pause_on_newgame;       ///< Whether to start new games paused or not.
 
 	TownLayoutByte town_layout;  ///< Select town layout
+	bool station_noise_level;        ///< build new airports when the town noise level is still withi accepted limits
+	uint16 town_noise_population[3];  ///< Population to base decision on noise evaluation (@see town_council_tolerance)
 
 	bool timetabling;            ///< Whether to allow timetabling.
 	bool timetable_in_ticks;     ///< Whether to show the timetable in ticks rather than days.
Index: src/station_cmd.cpp
===================================================================
--- src/station_cmd.cpp	(revision 12663)
+++ src/station_cmd.cpp	(working copy)
@@ -1675,9 +1675,16 @@
 		return CMD_ERROR;
 
 	Town *t = ClosestTownFromTile(tile, (uint)-1);
+	const AirportFTAClass *afc = GetAirport(p1);
 
-	/* Check if local auth refuses a new airport */
-	{
+	/* Check if local auth would allow a new airport */
+	if (_patches.station_noise_level) {
+		/* do not allow to build a new airport if this raise the town noise over the maximum allowed by town */
+		if ((t->noise_reached + afc->noise_level) > t->MaxTownNoise()) {
+			SetDParam(0, t->index);
+			return_cmd_error(STR_2009_LOCAL_AUTHORITY_REFUSES);
+		}
+	} else {
 		uint num = 0;
 		const Station *st;
 		FOR_ALL_STATIONS(st) {
@@ -1690,7 +1697,6 @@
 		}
 	}
 
-	const AirportFTAClass *afc = GetAirport(p1);
 	int w = afc->size_x;
 	int h = afc->size_y;
 
@@ -1752,6 +1758,7 @@
 	cost.AddCost(_price.build_airport * w * h);
 
 	if (flags & DC_EXEC) {
+		st->town->noise_reached += afc->noise_level;
 		st->airport_tile = tile;
 		st->AddFacility(FACIL_AIRPORT, tile);
 		st->airport_type = (byte)p1;
@@ -1782,6 +1789,7 @@
 		RebuildStationLists();
 		InvalidateWindow(WC_STATION_LIST, st->owner);
 		InvalidateWindowWidget(WC_STATION_VIEW, st->index, SVW_PLANES);
+		InvalidateWindow(WC_TOWN_VIEW, st->town->index);
 		/* success, so don't delete the new station */
 		st_auto_delete.Detach();
 	}
@@ -1825,12 +1833,15 @@
 			);
 		}
 
+		st->town->noise_reached -= GetAirport(st->airport_type)->noise_level;
+
 		st->rect.AfterRemoveRect(st, tile, w, h);
 
 		st->airport_tile = 0;
 		st->facilities &= ~FACIL_AIRPORT;
 
 		InvalidateWindowWidget(WC_STATION_VIEW, st->index, SVW_PLANES);
+		InvalidateWindow(WC_TOWN_VIEW, st->town->index);
 		UpdateStationVirtCoordDirty(st);
 		DeleteStationIfEmpty(st);
 	}
Index: src/town.h
===================================================================
--- src/town.h	(revision 12663)
+++ src/town.h	(working copy)
@@ -115,6 +115,9 @@
 	 * bit 2 = STADIUM */
 	byte flags12;
 
+	/* level of noise that all the stations (atm. only airports) are generating */
+	uint16 noise_reached;
+
 	/* Which players have a statue? */
 	byte statues;
 
@@ -184,6 +187,18 @@
 	void InitializeLayout();
 
 	inline TownLayout GetActiveLayout() const;
+
+	/** Calculate the max town noise */
+	inline uint16 MaxTownNoise() {
+		/* the value of population that raise the max town noise by 1 must be at least 1
+		 * _opt.diff.town_council_tolerance : 0 permissive, 1 neutral, 2 hostile */
+		if (_patches.town_noise_population[_opt.diff.town_council_tolerance] == 0) {
+			_patches.town_noise_population[_opt.diff.town_council_tolerance] = 1;
+		}
+
+		return (this->population == 0) ? 0 :
+				(this->population / _patches.town_noise_population[_opt.diff.town_council_tolerance] + 3);
+	}
 };
 
 /**
Index: src/town_cmd.cpp
===================================================================
--- src/town_cmd.cpp	(revision 12663)
+++ src/town_cmd.cpp	(working copy)
@@ -1480,6 +1480,8 @@
 			break;
 	}
 
+	t->noise_reached = 0;
+
 	t->num_houses += x;
 	UpdateTownRadius(t);
 
Index: src/town_gui.cpp
===================================================================
--- src/town_gui.cpp	(revision 12663)
+++ src/town_gui.cpp	(working copy)
@@ -302,6 +302,14 @@
 		SetDParam(1, t->max_mail);
 		DrawString(2, 127, STR_200E_MAIL_LAST_MONTH_MAX, TC_FROMSTRING);
 
+		/* only show the town noise, if the noise option is activated.
+		 * It would be quite useless to have it available on editor too... */
+		if (_patches.station_noise_level && _game_mode != GM_EDITOR) {
+			SetDParam(0, t->noise_reached);
+			SetDParam(1, t->MaxTownNoise());
+			DrawString(2, 137, STR_NOISE_IN_TOWN, 0);
+		}
+
 		DrawWindowViewport(w);
 		break;
 
@@ -346,15 +354,15 @@
 {  WWT_STICKYBOX,   RESIZE_NONE,    13,   248,   259,     0,    13, 0x0,                      STR_STICKY_BUTTON},
 {      WWT_PANEL,   RESIZE_NONE,    13,     0,   259,    14,   105, 0x0,                      STR_NULL},
 {      WWT_INSET,   RESIZE_NONE,    13,     2,   257,    16,   103, 0x0,                      STR_NULL},
-{      WWT_PANEL,   RESIZE_NONE,    13,     0,   259,   106,   137, 0x0,                      STR_NULL},
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,    13,     0,    85,   138,   149, STR_00E4_LOCATION,        STR_200B_CENTER_THE_MAIN_VIEW_ON},
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,    13,    86,   171,   138,   149, STR_2020_LOCAL_AUTHORITY, STR_2021_SHOW_INFORMATION_ON_LOCAL},
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,    13,   172,   259,   138,   149, STR_0130_RENAME,          STR_200C_CHANGE_TOWN_NAME},
+{      WWT_PANEL,   RESIZE_NONE,    13,     0,   259,   106,   147, 0x0,                      STR_NULL},
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,    13,     0,    85,   148,   159, STR_00E4_LOCATION,        STR_200B_CENTER_THE_MAIN_VIEW_ON},
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,    13,    86,   171,   148,   159, STR_2020_LOCAL_AUTHORITY, STR_2021_SHOW_INFORMATION_ON_LOCAL},
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,    13,   172,   259,   148,   159, STR_0130_RENAME,          STR_200C_CHANGE_TOWN_NAME},
 {   WIDGETS_END},
 };
 
 static const WindowDesc _town_view_desc = {
-	WDP_AUTO, WDP_AUTO, 260, 150, 260, 150,
+	WDP_AUTO, WDP_AUTO, 260, 160, 260, 160,
 	WC_TOWN_VIEW, WC_NONE,
 	WDF_STD_TOOLTIPS | WDF_STD_BTN | WDF_DEF_WIDGET | WDF_UNCLICK_BUTTONS | WDF_STICKY_BUTTON,
 	_town_view_widgets,
