Index: src/build_vehicle_gui.cpp
===================================================================
--- src/build_vehicle_gui.cpp	(revision 21197)
+++ src/build_vehicle_gui.cpp	(working copy)
@@ -157,7 +157,7 @@
 		GetString(last_name[1], STR_ENGINE_NAME, lastof(last_name[1]));
 	}
 
-	int r = strcmp(last_name[0], last_name[1]); // sort by name
+	int r = strnatcmp(last_name[0], last_name[1]); // sort by name using natural sorting
 
 	/* Use EngineID to sort instead since we want consistent sorting */
 	if (r == 0) return EngineNumberSorter(a, b);
Index: src/cargotype.cpp
===================================================================
--- src/cargotype.cpp	(revision 21197)
+++ src/cargotype.cpp	(working copy)
@@ -134,7 +134,7 @@
 	GetString(a_name, (*a)->name, lastof(a_name));
 	GetString(b_name, (*b)->name, lastof(b_name));
 
-	int res = strcmp(a_name, b_name);
+	int res = strnatcmp(a_name, b_name); // sort by name using natural sorting
 
 	/* If the names are equal, sort by cargo bitnum. */
 	return (res != 0) ? res : ((*a)->bitnum - (*b)->bitnum);
Index: src/group_gui.cpp
===================================================================
--- src/group_gui.cpp	(revision 21197)
+++ src/group_gui.cpp	(working copy)
@@ -160,7 +160,7 @@
 			GetString(last_name[1], STR_GROUP_NAME, lastof(last_name[1]));
 		}
 
-		int r = strcmp(last_name[0], last_name[1]); // sort by name
+		int r = strnatcmp(last_name[0], last_name[1]); // sort by name using natural sorting
 		if (r == 0) return (*a)->index - (*b)->index;
 		return r;
 	}
Index: src/industry_gui.cpp
===================================================================
--- src/industry_gui.cpp	(revision 21197)
+++ src/industry_gui.cpp	(working copy)
@@ -120,7 +120,7 @@
 	SetDParam(0, indsp2->name);
 	GetString(industry_name[1], STR_JUST_STRING, lastof(industry_name[1]));
 
-	int r = strcmp(industry_name[0], industry_name[1]);
+	int r = strnatcmp(industry_name[0], industry_name[1]); // sort by name using natural sorting
 
 	/* If the names are equal, sort by industry type. */
 	return (r != 0) ? r : (*a - *b);
@@ -1142,7 +1142,7 @@
 			GetString(buf_cache, STR_TOWN_NAME, lastof(buf_cache));
 		}
 
-		return strcmp(buf, buf_cache);
+		return strnatcmp(buf, buf_cache); // sort by name using natural sorting
 	}
 
 	/** Sort industries by type and name */
Index: src/station_gui.cpp
===================================================================
--- src/station_gui.cpp	(revision 21197)
+++ src/station_gui.cpp	(working copy)
@@ -275,7 +275,7 @@
 			GetString(buf_cache, STR_STATION_NAME, lastof(buf_cache));
 		}
 
-		return strcmp(buf, buf_cache);
+		return strnatcmp(buf, buf_cache); // sort by name using natural sorting
 	}
 
 	/** Sort stations by their type */
Index: src/string.cpp
===================================================================
--- src/string.cpp	(revision 21197)
+++ src/string.cpp	(working copy)
@@ -463,3 +463,79 @@
 	return NULL;
 }
 #endif /* DEFINE_STRCASESTR */
+
+#ifdef WITH_ICU
+#	include <unicode/uversion.h>
+#endif /* WITH_ICU */
+
+/* Macro to increase readability */
+#define NATSORT_BETWEEN(a, b, c) (a >= b && a <= c)
+/**
+ * Compares two strings using case insensitive natural sort
+ *
+ * @param s1 string1
+ * @param s2 string2
+ * @return -1, 0, 1, same as strcmp()
+ */
+int strnatcmp(const char *s1, const char *s2)
+{
+	bool with_icu = false;
+#ifdef WITH_ICU
+	with_icu = true;
+#endif
+	unsigned int i = 0, j, k, s1_int, s2_int, tmp1, tmp2;
+
+	while (s1[i] != 0 && s2[i] != 0)
+	{
+		/**
+		 * If we find a digit we have to read the whole number
+		 * (the order of '-' in the ASCII table is lower than '0', so negative numbers already solved)
+		 */
+		if (NATSORT_BETWEEN(s1[i], 48, 57) || NATSORT_BETWEEN(s2[i], 48, 57))
+		{
+			j = i;
+			k = i;
+			s1_int = 0;
+			s2_int = 0;
+
+			while (NATSORT_BETWEEN(s1[j], 48, 57))
+			{
+				s1_int = s1_int * 10 + s1[j++] - 48;
+			}
+
+			while (NATSORT_BETWEEN(s2[k], 48, 57))
+			{
+				s2_int = s2_int * 10 + s2[k++] - 48;
+			}
+
+			if (s1_int != s2_int)
+			{
+				return s1_int < s2_int ? -1 : 1;
+			}
+		}
+
+		/** Do case insensivie check */
+		tmp1 = NATSORT_BETWEEN(s1[i], 65, 90) ? s1[i] + 32 : s1[i];
+		tmp2 = NATSORT_BETWEEN(s2[i], 65, 90) ? s2[i] + 32 : s2[i];
+
+		if (tmp1 != tmp2)
+		{
+			return tmp1 < tmp2 ? -1 : 1;
+		}
+
+		i++;
+	}
+
+	/**
+	 * If length of s1 and s2 are different, but the common length
+	 * is the same, the shorter will be sooner
+	 */
+	if (s1[i] != s2[i])
+	{
+		return s1[i] == 0 ? -1 : 1;
+	}
+
+	return 0;
+}
+#undef NATSORT_BETWEEN
+
Index: src/strings_func.h
===================================================================
--- src/strings_func.h	(revision 21197)
+++ src/strings_func.h	(working copy)
@@ -111,3 +111,12 @@
 void CheckForMissingGlyphsInLoadedLanguagePack();
 
 #endif /* STRINGS_TYPE_H */
+
+/**
+ * Compares two strings using case insensitive natural sort
+ *
+ * @param s1 string1
+ * @param s2 string2
+ * @return -1, 0, 1, same as strcmp()
+ */
+int strnatcmp(const char *s1, const char *s2);
Index: src/town_gui.cpp
===================================================================
--- src/town_gui.cpp	(revision 21197)
+++ src/town_gui.cpp	(working copy)
@@ -705,7 +705,7 @@
 			GetString(buf_cache, STR_TOWN_NAME, lastof(buf_cache));
 		}
 
-		return strcmp(buf, buf_cache);
+		return strnatcmp(buf, buf_cache); // sort by name using natural sorting
 	}
 
 	/** Sort by population */
Index: src/vehicle_gui.cpp
===================================================================
--- src/vehicle_gui.cpp	(revision 21197)
+++ src/vehicle_gui.cpp	(working copy)
@@ -752,7 +752,7 @@
 		GetString(last_name[1], STR_VEHICLE_NAME, lastof(last_name[1]));
 	}
 
-	int r = strcmp(last_name[0], last_name[1]);
+	int r = strnatcmp(last_name[0], last_name[1]); // sort by name using natural sorting
 	return (r != 0) ? r : VehicleNumberSorter(a, b);
 }
 
