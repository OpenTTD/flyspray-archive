Index: src/train.h
===================================================================
--- src/train.h	(revision 10900)
+++ src/train.h	(working copy)
@@ -269,10 +269,10 @@
 	void UpdateDeltaXY(Direction direction);
 	ExpensesType GetExpenseType(bool income) const { return income ? EXPENSES_TRAIN_INC : EXPENSES_TRAIN_RUN; }
 	WindowClass GetVehicleListWindowClass() const { return WC_TRAINS_LIST; }
-	void PlayLeaveStationSound() const;
+	void PlayLeaveStationSound();
 	bool IsPrimaryVehicle() const { return IsFrontEngine(this); }
 	bool HasFront() const { return true; }
-	int GetImage(Direction direction) const;
+	int GetImage(Direction direction);
 	void Tick();
 };
 
Index: src/vehicle.h
===================================================================
--- src/vehicle.h	(revision 10900)
+++ src/vehicle.h	(working copy)
@@ -498,8 +498,8 @@
 void VehiclePositionChanged(Vehicle *v);
 void AfterLoadVehicles();
 Vehicle *GetLastVehicleInChain(Vehicle *v);
-Vehicle *GetPrevVehicleInChain(const Vehicle *v);
-Vehicle *GetFirstVehicleInChain(const Vehicle *v);
+Vehicle *GetPrevVehicleInChain(Vehicle *v);
+Vehicle *GetFirstVehicleInChain(Vehicle *v);
 uint CountVehiclesInChain(const Vehicle *v);
 bool IsEngineCountable(const Vehicle *v);
 void DeleteVehicleChain(Vehicle *v);
@@ -519,7 +519,7 @@
 
 void ViewportAddVehicles(DrawPixelInfo *dpi);
 
-SpriteID GetRotorImage(const Vehicle *v);
+SpriteID GetRotorImage(Vehicle *v);
 
 Vehicle *CreateEffectVehicle(int x, int y, int z, EffectVehicle type);
 Vehicle *CreateEffectVehicleAbove(int x, int y, int z, EffectVehicle type);
@@ -543,19 +543,19 @@
 void BeginVehicleMove(Vehicle *v);
 void EndVehicleMove(Vehicle *v);
 
-void ShowAircraftViewWindow(const Vehicle* v);
+void ShowAircraftViewWindow(Vehicle* v);
 
 UnitID GetFreeUnitNumber(VehicleType type);
 
 void TrainConsistChanged(Vehicle *v);
 void TrainPowerChanged(Vehicle *v);
-Money GetTrainRunningCost(const Vehicle *v);
+Money GetTrainRunningCost(Vehicle *v);
 
 int CheckTrainStoppedInDepot(const Vehicle *v);
 
 bool VehicleNeedsService(const Vehicle *v);
 
-uint GenerateVehicleSortList(const Vehicle*** sort_list, uint16 *length_of_array, VehicleType type, PlayerID owner, uint32 index, uint16 window_type);
+uint GenerateVehicleSortList(Vehicle*** sort_list, uint16 *length_of_array, VehicleType type, PlayerID owner, uint32 index, uint16 window_type);
 void BuildDepotVehicleList(VehicleType type, TileIndex tile, Vehicle ***engine_list, uint16 *engine_list_length, uint16 *engine_count, Vehicle ***wagon_list, uint16 *wagon_list_length, uint16 *wagon_count);
 CommandCost SendAllVehiclesToDepot(VehicleType type, uint32 flags, bool service, PlayerID owner, uint16 vlw_flag, uint32 id);
 bool IsVehicleInDepot(const Vehicle *v);
@@ -710,7 +710,7 @@
  * @param v Vehicle to get colour map for
  * @return A ready-to-use palette modifier
  */
-SpriteID GetVehiclePalette(const Vehicle *v);
+SpriteID GetVehiclePalette(Vehicle *v);
 
 /* A lot of code calls for the invalidation of the status bar, which is widget 5.
  * Best is to have a virtual value for it when it needs to change again */
Index: src/ship_cmd.cpp
===================================================================
--- src/ship_cmd.cpp	(revision 10900)
+++ src/ship_cmd.cpp	(working copy)
@@ -92,7 +92,7 @@
 	height = spr->height;
 }
 
-int Ship::GetImage(Direction direction) const
+int Ship::GetImage(Direction direction)
 {
 	int spritenum = this->spritenum;
 
@@ -239,14 +239,14 @@
 	MarkAllViewportsDirty(this->left_coord, this->top_coord, this->right_coord + 1, this->bottom_coord + 1);
 }
 
-static void PlayShipSound(const Vehicle *v)
+static void PlayShipSound(Vehicle *v)
 {
 	if (!PlayVehicleSound(v, VSE_START)) {
 		SndPlayVehicleFx(ShipVehInfo(v->engine_type)->sfx, v);
 	}
 }
 
-void Ship::PlayLeaveStationSound() const
+void Ship::PlayLeaveStationSound()
 {
 	PlayShipSound(this);
 }
Index: src/roadveh.h
===================================================================
--- src/roadveh.h	(revision 10900)
+++ src/roadveh.h	(working copy)
@@ -81,11 +81,11 @@
 	WindowClass GetVehicleListWindowClass() const { return WC_ROADVEH_LIST; }
 	bool IsPrimaryVehicle() const { return IsRoadVehFront(this); }
 	bool HasFront() const { return true; }
-	int GetImage(Direction direction) const;
+	int GetImage(Direction direction);
 	void Tick();
 };
 
-byte GetRoadVehLength(const Vehicle *v);
+byte GetRoadVehLength(Vehicle *v);
 
 void RoadVehUpdateCache(Vehicle *v);
 
Index: src/aircraft_gui.cpp
===================================================================
--- src/aircraft_gui.cpp	(revision 10900)
+++ src/aircraft_gui.cpp	(working copy)
@@ -23,7 +23,7 @@
 #include "vehicle_gui.h"
 #include "newgrf_engine.h"
 
-void DrawAircraftImage(const Vehicle *v, int x, int y, VehicleID selection)
+void DrawAircraftImage(Vehicle *v, int x, int y, VehicleID selection)
 {
 	SpriteID pal = (v->vehstatus & VS_CRASHED) ? PALETTE_CRASH : GetVehiclePalette(v);
 	DrawSprite(v->GetImage(DIR_W), pal, x + 25, y + 10);
@@ -47,7 +47,7 @@
 void CcBuildAircraft(bool success, TileIndex tile, uint32 p1, uint32 p2)
 {
 	if (success) {
-		const Vehicle *v = GetVehicle(_new_vehicle_id);
+		Vehicle *v = GetVehicle(_new_vehicle_id);
 
 		if (v->tile == _backup_orders_tile) {
 			_backup_orders_tile = 0;
@@ -73,7 +73,7 @@
 {
 	switch (e->event) {
 	case WE_PAINT: {
-		const Vehicle *v = GetVehicle(w->window_number);
+		Vehicle *v = GetVehicle(w->window_number);
 
 		SetWindowWidgetDisabledState(w, 2, v->owner != _local_player);
 
@@ -388,7 +388,7 @@
 };
 
 
-void ShowAircraftViewWindow(const Vehicle *v)
+void ShowAircraftViewWindow(Vehicle *v)
 {
 	Window *w = AllocateWindowDescFront(&_aircraft_view_desc, v->index);
 
Index: src/train_cmd.cpp
===================================================================
--- src/train_cmd.cpp	(revision 10900)
+++ src/train_cmd.cpp	(working copy)
@@ -70,7 +70,7 @@
 	uint32 total_power = 0;
 	uint32 max_te = 0;
 
-	for (const Vehicle *u = v; u != NULL; u = u->next) {
+	for (Vehicle *u = v; u != NULL; u = u->next) {
 		/* Power is not added for articulated parts */
 		if (IsArticulatedPart(u)) continue;
 
@@ -449,7 +449,7 @@
 	v->acceleration = clamp(power / weight * 4, 1, 255);
 }
 
-int Train::GetImage(Direction direction) const
+int Train::GetImage(Direction direction)
 {
 	int img = this->spritenum;
 	int base;
@@ -1949,14 +1949,14 @@
 	1, 1, 1, 0, -1, -1, -1, 0
 };
 
-static void HandleLocomotiveSmokeCloud(const Vehicle* v)
+static void HandleLocomotiveSmokeCloud(Vehicle* v)
 {
 	bool sound = false;
 
 	if (v->vehstatus & VS_TRAIN_SLOWING || v->load_unload_time_rem != 0 || v->cur_speed < 2)
 		return;
 
-	const Vehicle* u = v;
+	Vehicle* u = v;
 
 	do {
 		const RailVehicleInfo *rvi = RailVehInfo(v->engine_type);
@@ -2022,7 +2022,7 @@
 	if (sound) PlayVehicleSound(u, VSE_TRAIN_EFFECT);
 }
 
-static void TrainPlayLeaveStationSound(const Vehicle* v)
+static void TrainPlayLeaveStationSound(Vehicle* v)
 {
 	static const SoundFx sfx[] = {
 		SND_04_TRAIN,
@@ -2038,7 +2038,7 @@
 	SndPlayVehicleFx(sfx[RailVehInfo(engtype)->engclass], v);
 }
 
-void Train::PlayLeaveStationSound() const
+void Train::PlayLeaveStationSound()
 {
 	TrainPlayLeaveStationSound(this);
 }
@@ -3384,7 +3384,7 @@
 	InvalidateWindowWidget(WC_VEHICLE_VIEW, v->index, STATUS_BAR);
 }
 
-Money GetTrainRunningCost(const Vehicle *v)
+Money GetTrainRunningCost(Vehicle *v)
 {
 	Money cost = 0;
 
Index: src/aircraft.h
===================================================================
--- src/aircraft.h	(revision 10900)
+++ src/aircraft.h	(working copy)
@@ -136,7 +136,7 @@
 	ExpensesType GetExpenseType(bool income) const { return income ? EXPENSES_AIRCRAFT_INC : EXPENSES_AIRCRAFT_RUN; }
 	WindowClass GetVehicleListWindowClass() const { return WC_AIRCRAFT_LIST; }
 	bool IsPrimaryVehicle() const { return IsNormalAircraft(this); }
-	int GetImage(Direction direction) const;
+	int GetImage(Direction direction);
 	void Tick();
 };
 
Index: src/group_gui.cpp
===================================================================
--- src/group_gui.cpp	(revision 10900)
+++ src/group_gui.cpp	(working copy)
@@ -450,7 +450,7 @@
 
 			max = min(w->vscroll2.pos + w->vscroll2.cap, gv->l.list_length);
 			for (i = w->vscroll2.pos ; i < max ; ++i) {
-				const Vehicle* v = gv->sort_list[i];
+				Vehicle* v = gv->sort_list[i];
 
 				assert(v->type == gv->vehicle_type && v->owner == owner);
 
@@ -529,7 +529,7 @@
 
 				case GRP_WIDGET_LIST_VEHICLE: { // Matrix Vehicle
 					uint32 id_v = (e->we.click.pt.y - PLY_WND_PRC__OFFSET_TOP_WIDGET) / (int)w->resize.step_height;
-					const Vehicle *v;
+					Vehicle *v;
 
 					if (id_v >= w->vscroll2.cap) return; // click out of bounds
 
@@ -636,7 +636,7 @@
 
 				case GRP_WIDGET_LIST_VEHICLE: { // Maxtrix vehicle
 					uint32 id_v = (e->we.click.pt.y - PLY_WND_PRC__OFFSET_TOP_WIDGET) / (int)w->resize.step_height;
-					const Vehicle *v;
+					Vehicle *v;
 					const VehicleID vindex = gv->vehicle_sel;
 
 					gv->vehicle_sel = INVALID_VEHICLE;
Index: src/depot_gui.cpp
===================================================================
--- src/depot_gui.cpp	(revision 10900)
+++ src/depot_gui.cpp	(working copy)
@@ -142,7 +142,7 @@
 	}
 }
 
-static inline void ShowVehicleViewWindow(const Vehicle *v)
+static inline void ShowVehicleViewWindow(Vehicle *v)
 {
 	switch (v->type) {
 		case VEH_TRAIN:    ShowTrainViewWindow(v);    break;
@@ -170,7 +170,7 @@
  * @param x Left side of the box to draw in
  * @param y Top of the box to draw in
  */
-static void DrawVehicleInDepot(Window *w, const Vehicle *v, int x, int y)
+static void DrawVehicleInDepot(Window *w, Vehicle *v, int x, int y)
 {
 	byte diff_x = 0, diff_y = 0;
 
@@ -268,7 +268,7 @@
 
 		for (i = 0; i < boxes_in_each_row && num < maxval; i++, num++, x += w->resize.step_width) {
 			/* Draw all vehicles in the current row */
-			const Vehicle *v = vl[num];
+			Vehicle *v = vl[num];
 			DrawVehicleInDepot(w, v, x, y);
 		}
 	}
@@ -277,8 +277,8 @@
 
 	/* draw the train wagons, that do not have an engine in front */
 	for (; num < maxval; num++, y += 14) {
-		const Vehicle *v = WP(w, depot_d).wagon_list[num - WP(w, depot_d).engine_count];
-		const Vehicle *u;
+		Vehicle *v = WP(w, depot_d).wagon_list[num - WP(w, depot_d).engine_count];
+		Vehicle *u;
 
 		DrawTrainImage(v, x + 50, y, w->hscroll.cap - 29, 0, WP(w,depot_d).sel);
 		DrawString(x, y + 2, STR_8816, 0);
@@ -475,7 +475,7 @@
  * @param *v is the original vehicle to clone
  * @param *w is the window of the depot where the clone is build
  */
-static void HandleCloneVehClick(const Vehicle *v, const Window *w)
+static void HandleCloneVehClick(Vehicle *v, const Window *w)
 {
 	uint error_str;
 
@@ -502,7 +502,7 @@
 
 static void ClonePlaceObj(const Window *w)
 {
-	const Vehicle *v = CheckMouseOverVehicle();
+	Vehicle *v = CheckMouseOverVehicle();
 
 	if (v != NULL) HandleCloneVehClick(v, w);
 }
@@ -868,7 +868,7 @@
 
 			/* check if a vehicle in a depot was clicked.. */
 		case WE_MOUSELOOP: {
-			const Vehicle *v = _place_clicked_vehicle;
+			Vehicle *v = _place_clicked_vehicle;
 
 			/* since OTTD checks all open depot windows, we will make sure that it triggers the one with a clicked clone button */
 			if (v != NULL && IsWindowWidgetLowered(w, DEPOT_WIDGET_CLONE)) {
Index: src/newgrf_engine.h
===================================================================
--- src/newgrf_engine.h	(revision 10900)
+++ src/newgrf_engine.h	(working copy)
@@ -17,8 +17,8 @@
 const SpriteGroup *GetWagonOverrideSpriteSet(EngineID engine, CargoID cargo, byte overriding_engine);
 void SetCustomEngineSprites(EngineID engine, byte cargo, const struct SpriteGroup *group);
 void SetRotorOverrideSprites(EngineID engine, const struct SpriteGroup *group);
-SpriteID GetCustomEngineSprite(EngineID engine, const Vehicle* v, Direction direction);
-SpriteID GetRotorOverrideSprite(EngineID engine, const Vehicle* v, bool info_view);
+SpriteID GetCustomEngineSprite(EngineID engine, Vehicle* v, Direction direction);
+SpriteID GetRotorOverrideSprite(EngineID engine, Vehicle* v, bool info_view);
 #define GetCustomRotorSprite(v, i) GetRotorOverrideSprite(v->engine_type, v, i)
 #define GetCustomRotorIcon(et) GetRotorOverrideSprite(et, NULL, true)
 
@@ -30,15 +30,15 @@
 const struct GRFFile *GetEngineGRF(EngineID engine);
 uint32 GetEngineGRFID(EngineID engine);
 
-uint16 GetVehicleCallback(CallbackID callback, uint32 param1, uint32 param2, EngineID engine, const Vehicle *v);
-uint16 GetVehicleCallbackParent(CallbackID callback, uint32 param1, uint32 param2, EngineID engine, const Vehicle *v, const Vehicle *parent);
+uint16 GetVehicleCallback(CallbackID callback, uint32 param1, uint32 param2, EngineID engine, Vehicle *v);
+uint16 GetVehicleCallbackParent(CallbackID callback, uint32 param1, uint32 param2, EngineID engine, Vehicle *v, Vehicle *parent);
 bool UsesWagonOverride(const Vehicle *v);
 #define GetCustomVehicleSprite(v, direction) GetCustomEngineSprite(v->engine_type, v, direction)
 #define GetCustomVehicleIcon(et, direction) GetCustomEngineSprite(et, NULL, direction)
 
 /* Handler to Evaluate callback 36. If the callback fails (i.e. most of the
  * time) orig_value is returned */
-uint GetVehicleProperty(const Vehicle *v, uint8 property, uint orig_value);
+uint GetVehicleProperty(Vehicle *v, uint8 property, uint orig_value);
 uint GetEngineProperty(EngineID engine, uint8 property, uint orig_value);
 
 enum VehicleTrigger {
Index: src/articulated_vehicles.cpp
===================================================================
--- src/articulated_vehicles.cpp	(revision 10900)
+++ src/articulated_vehicles.cpp	(working copy)
@@ -30,7 +30,7 @@
 
 void AddArticulatedParts(Vehicle **vl, VehicleType type)
 {
-	const Vehicle *v = vl[0];
+	Vehicle *v = vl[0];
 	Vehicle *u = vl[0];
 
 	if (!HASBIT(EngInfo(v->engine_type)->callbackmask, CBM_ARTIC_ENGINE)) return;
Index: src/ship_gui.cpp
===================================================================
--- src/ship_gui.cpp	(revision 10900)
+++ src/ship_gui.cpp	(working copy)
@@ -18,7 +18,7 @@
 #include "vehicle_gui.h"
 #include "newgrf_engine.h"
 
-void DrawShipImage(const Vehicle *v, int x, int y, VehicleID selection)
+void DrawShipImage(Vehicle *v, int x, int y, VehicleID selection)
 {
 	DrawSprite(v->GetImage(DIR_W), GetVehiclePalette(v), x + 32, y + 10);
 
@@ -31,7 +31,7 @@
 {
 	switch (e->event) {
 	case WE_PAINT: {
-		const Vehicle *v = GetVehicle(w->window_number);
+		Vehicle *v = GetVehicle(w->window_number);
 		StringID str;
 
 		SetWindowWidgetDisabledState(w, 2, v->owner != _local_player);
@@ -176,7 +176,7 @@
 
 void CcBuildShip(bool success, TileIndex tile, uint32 p1, uint32 p2)
 {
-	const Vehicle *v;
+	Vehicle *v;
 	if (!success) return;
 
 	v = GetVehicle(_new_vehicle_id);
@@ -341,7 +341,7 @@
 	ShipViewWndProc
 };
 
-void ShowShipViewWindow(const Vehicle *v)
+void ShowShipViewWindow(Vehicle *v)
 {
 	Window *w = AllocateWindowDescFront(&_ship_view_desc, v->index);
 
Index: src/order_gui.cpp
===================================================================
--- src/order_gui.cpp	(revision 10900)
+++ src/order_gui.cpp	(working copy)
@@ -351,7 +351,7 @@
 	return order;
 }
 
-static bool HandleOrderVehClick(const Vehicle *v, const Vehicle *u, Window *w)
+static bool HandleOrderVehClick(Vehicle *v, Vehicle *u, Window *w)
 {
 	if (u->type != v->type) return false;
 
@@ -373,10 +373,10 @@
 	return true;
 }
 
-static void OrdersPlaceObj(const Vehicle *v, TileIndex tile, Window *w)
+static void OrdersPlaceObj(Vehicle *v, TileIndex tile, Window *w)
 {
 	Order cmd;
-	const Vehicle *u;
+	Vehicle *u;
 
 	// check if we're clicking on a vehicle first.. clone orders in that case.
 	u = CheckMouseOverVehicle();
@@ -555,7 +555,7 @@
 		break;
 
 	case WE_CLICK: {
-		const Vehicle *v = GetVehicle(w->window_number);
+		Vehicle *v = GetVehicle(w->window_number);
 		switch (e->we.click.widget) {
 		case ORDER_WIDGET_ORDER_LIST: {
 			ResetObjectToPlace();
@@ -707,7 +707,7 @@
 
 	// check if a vehicle in a depot was clicked..
 	case WE_MOUSELOOP: {
-		const Vehicle *v = _place_clicked_vehicle;
+		Vehicle *v = _place_clicked_vehicle;
 		/*
 		 * Check if we clicked on a vehicle
 		 * and if the GOTO button of this window is pressed
Index: src/vehicle_gui.h
===================================================================
--- src/vehicle_gui.h	(revision 10900)
+++ src/vehicle_gui.h	(working copy)
@@ -50,10 +50,10 @@
 
 int DrawVehiclePurchaseInfo(int x, int y, uint w, EngineID engine_number);
 
-void DrawTrainImage(const Vehicle *v, int x, int y, int count, int skip, VehicleID selection);
-void DrawRoadVehImage(const Vehicle *v, int x, int y, int count, VehicleID selection);
-void DrawShipImage(const Vehicle *v, int x, int y, VehicleID selection);
-void DrawAircraftImage(const Vehicle *v, int x, int y, VehicleID selection);
+void DrawTrainImage(Vehicle *v, int x, int y, int count, int skip, VehicleID selection);
+void DrawRoadVehImage(Vehicle *v, int x, int y, int count, VehicleID selection);
+void DrawShipImage(Vehicle *v, int x, int y, VehicleID selection);
+void DrawAircraftImage(Vehicle *v, int x, int y, VehicleID selection);
 
 void ShowBuildVehicleWindow(TileIndex tile, VehicleType type);
 
@@ -62,7 +62,7 @@
 uint ShowAdditionalText(int x, int y, uint w, EngineID engine);
 uint ShowRefitOptionsList(int x, int y, uint w, EngineID engine);
 
-void ShowVehicleListWindow(const Vehicle *v);
+void ShowVehicleListWindow(Vehicle *v);
 void ShowVehicleListWindow(PlayerID player, VehicleType vehicle_type);
 void ShowVehicleListWindow(PlayerID player, VehicleType vehicle_type, StationID station);
 void ShowVehicleListWindow(PlayerID player, VehicleType vehicle_type, TileIndex depot_tile);
@@ -71,7 +71,7 @@
 void DrawSmallOrderList(const Vehicle *v, int x, int y);
 void ShowReplaceGroupVehicleWindow(GroupID group, VehicleType veh);
 
-static inline void DrawVehicleImage(const Vehicle *v, int x, int y, int count, int skip, VehicleID selection)
+static inline void DrawVehicleImage(Vehicle *v, int x, int y, int count, int skip, VehicleID selection)
 {
 	switch (v->type) {
 		case VEH_TRAIN:    DrawTrainImage(v, x, y, count, skip, selection); break;
Index: src/newgrf_sound.cpp
===================================================================
--- src/newgrf_sound.cpp	(revision 10900)
+++ src/newgrf_sound.cpp	(working copy)
@@ -50,7 +50,7 @@
 }
 
 
-bool PlayVehicleSound(const Vehicle *v, VehicleSoundEvent event)
+bool PlayVehicleSound(Vehicle *v, VehicleSoundEvent event)
 {
 	const GRFFile *file = GetEngineGRF(v->engine_type);
 	uint16 callback;
Index: src/vehicle_gui.cpp
===================================================================
--- src/vehicle_gui.cpp	(revision 10900)
+++ src/vehicle_gui.cpp	(working copy)
@@ -1000,7 +1000,7 @@
 
 	max = min(w->vscroll.pos + w->vscroll.cap, vl->l.list_length);
 	for (i = w->vscroll.pos; i < max; ++i) {
-		const Vehicle *v = vl->sort_list[i];
+		Vehicle *v = vl->sort_list[i];
 		StringID str;
 
 		SetDParam(0, v->profit_this_year);
@@ -1070,7 +1070,7 @@
 					return;
 				case VLW_WIDGET_LIST: { /* Matrix to show vehicles */
 					uint32 id_v = (e->we.click.pt.y - PLY_WND_PRC__OFFSET_TOP_WIDGET) / w->resize.step_height;
-					const Vehicle *v;
+					Vehicle *v;
 
 					if (id_v >= w->vscroll.cap) return; // click out of bounds
 
@@ -1261,7 +1261,7 @@
 	}
 }
 
-void ShowVehicleListWindow(const Vehicle *v)
+void ShowVehicleListWindow(Vehicle *v)
 {
 	if (v->orders == NULL) return; // no shared list to show
 	ShowVehicleListWindowLocal(v->owner, VLW_SHARED_ORDERS, v->type, v->orders->index);
Index: src/gui.h
===================================================================
--- src/gui.h	(revision 10900)
+++ src/gui.h	(working copy)
@@ -42,17 +42,17 @@
 void ReinitGuiAfterToggleElrail(bool disable);
 
 /* train_gui.cpp */
-void ShowTrainViewWindow(const Vehicle *v);
+void ShowTrainViewWindow(Vehicle *v);
 void ShowOrdersWindow(const Vehicle *v);
 
 /* road_gui.cpp */
 void ShowBuildRoadToolbar(RoadType roadtype);
 void ShowBuildRoadScenToolbar();
-void ShowRoadVehViewWindow(const Vehicle *v);
+void ShowRoadVehViewWindow(Vehicle *v);
 
 /* dock_gui.cpp */
 void ShowBuildDocksToolbar();
-void ShowShipViewWindow(const Vehicle *v);
+void ShowShipViewWindow(Vehicle *v);
 
 /* aircraft_gui.cpp */
 void ShowBuildAirToolbar();
Index: src/newgrf_station.cpp
===================================================================
--- src/newgrf_station.cpp	(revision 10900)
+++ src/newgrf_station.cpp	(working copy)
@@ -323,7 +323,7 @@
 
 
 /* Station Resolver Functions */
-static uint32 StationGetRandomBits(const ResolverObject *object)
+static uint32 StationGetRandomBits(ResolverObject *object)
 {
 	const Station *st = object->u.station.st;
 	const TileIndex tile = object->u.station.tile;
@@ -331,14 +331,14 @@
 }
 
 
-static uint32 StationGetTriggers(const ResolverObject *object)
+static uint32 StationGetTriggers(ResolverObject *object)
 {
 	const Station *st = object->u.station.st;
 	return st == NULL ? 0 : st->waiting_triggers;
 }
 
 
-static void StationSetTriggers(const ResolverObject *object, int triggers)
+static void StationSetTriggers(ResolverObject *object, int triggers)
 {
 	Station *st = (Station*)object->u.station.st;
 	assert(st != NULL);
@@ -360,7 +360,7 @@
 	uint8 valid;
 } _svc;
 
-static uint32 StationGetVariable(const ResolverObject *object, byte variable, byte parameter, bool *available)
+static uint32 StationGetVariable(ResolverObject *object, byte variable, byte parameter, bool *available)
 {
 	const Station *st = object->u.station.st;
 	TileIndex tile = object->u.station.tile;
@@ -493,7 +493,7 @@
 }
 
 
-static const SpriteGroup *StationResolveReal(const ResolverObject *object, const SpriteGroup *group)
+static const SpriteGroup *StationResolveReal(ResolverObject *object, const SpriteGroup *group)
 {
 	const Station *st = object->u.station.st;
 	const StationSpec *statspec = object->u.station.statspec;
Index: src/ship.h
===================================================================
--- src/ship.h	(revision 10900)
+++ src/ship.h	(working copy)
@@ -44,9 +44,9 @@
 	void UpdateDeltaXY(Direction direction);
 	ExpensesType GetExpenseType(bool income) const { return income ? EXPENSES_SHIP_INC : EXPENSES_SHIP_RUN; }
 	WindowClass GetVehicleListWindowClass() const { return WC_SHIPS_LIST; }
-	void PlayLeaveStationSound() const;
+	void PlayLeaveStationSound();
 	bool IsPrimaryVehicle() const { return true; }
-	int GetImage(Direction direction) const;
+	int GetImage(Direction direction);
 	void Tick();
 };
 
Index: src/train_gui.cpp
===================================================================
--- src/train_gui.cpp	(revision 10900)
+++ src/train_gui.cpp	(working copy)
@@ -47,7 +47,7 @@
 
 void CcBuildLoco(bool success, TileIndex tile, uint32 p1, uint32 p2)
 {
-	const Vehicle *v;
+	Vehicle *v;
 
 	if (!success) return;
 
@@ -74,7 +74,7 @@
 	return (len * _traininfo_vehicle_width) / 8;
 }
 
-void DrawTrainImage(const Vehicle *v, int x, int y, int count, int skip, VehicleID selection)
+void DrawTrainImage(Vehicle *v, int x, int y, int count, int skip, VehicleID selection)
 {
 	DrawPixelInfo tmp_dpi, *old_dpi;
 	int dx = -(skip * 8) / _traininfo_vehicle_width;
@@ -316,7 +316,7 @@
 	TrainViewWndProc
 };
 
-void ShowTrainViewWindow(const Vehicle *v)
+void ShowTrainViewWindow(Vehicle *v)
 {
 	Window *w = AllocateWindowDescFront(&_train_view_desc,v->index);
 
@@ -370,8 +370,8 @@
 static void DrawTrainDetailsWindow(Window *w)
 {
 	byte det_tab = WP(w, traindetails_d).tab;
-	const Vehicle *v;
-	const Vehicle *u;
+	Vehicle *v;
+	Vehicle *u;
 	AcceptedCargo act_cargo;
 	AcceptedCargo max_cargo;
 	int num;
Index: src/newgrf_canal.cpp
===================================================================
--- src/newgrf_canal.cpp	(revision 10900)
+++ src/newgrf_canal.cpp	(working copy)
@@ -18,25 +18,25 @@
 
 /* Random bits and triggers are not supported for canals, so the following
  * three functions are stubs. */
-static uint32 CanalGetRandomBits(const ResolverObject *object)
+static uint32 CanalGetRandomBits(ResolverObject *object)
 {
 	return 0;
 }
 
 
-static uint32 CanalGetTriggers(const ResolverObject *object)
+static uint32 CanalGetTriggers(ResolverObject *object)
 {
 	return 0;
 }
 
 
-static void CanalSetTriggers(const ResolverObject *object, int triggers)
+static void CanalSetTriggers(ResolverObject *object, int triggers)
 {
 	return;
 }
 
 
-static uint32 CanalGetVariable(const ResolverObject *object, byte variable, byte parameter, bool *available)
+static uint32 CanalGetVariable(ResolverObject *object, byte variable, byte parameter, bool *available)
 {
 	TileIndex tile = object->u.canal.tile;
 
@@ -55,7 +55,7 @@
 }
 
 
-static const SpriteGroup *CanalResolveReal(const ResolverObject *object, const SpriteGroup *group)
+static const SpriteGroup *CanalResolveReal(ResolverObject *object, const SpriteGroup *group)
 {
 	if (group->g.real.num_loaded == 0) return NULL;
 
Index: src/newgrf_spritegroup.h
===================================================================
--- src/newgrf_spritegroup.h	(revision 10900)
+++ src/newgrf_spritegroup.h	(working copy)
@@ -201,8 +201,8 @@
 
 	union {
 		struct {
-			const struct Vehicle *self;
-			const struct Vehicle *parent;
+			struct Vehicle *self;
+			struct Vehicle *parent;
 			EngineID self_type;
 		} vehicle;
 		struct {
@@ -234,11 +234,11 @@
 		} cargo;
 	} u;
 
-	uint32 (*GetRandomBits)(const struct ResolverObject*);
-	uint32 (*GetTriggers)(const struct ResolverObject*);
-	void (*SetTriggers)(const struct ResolverObject*, int);
-	uint32 (*GetVariable)(const struct ResolverObject*, byte, byte, bool*);
-	const SpriteGroup *(*ResolveReal)(const struct ResolverObject*, const SpriteGroup*);
+	uint32 (*GetRandomBits)(struct ResolverObject*);
+	uint32 (*GetTriggers)(struct ResolverObject*);
+	void (*SetTriggers)(struct ResolverObject*, int);
+	uint32 (*GetVariable)(struct ResolverObject*, byte, byte, bool*);
+	const SpriteGroup *(*ResolveReal)(struct ResolverObject*, const SpriteGroup*);
 };
 
 
Index: src/roadveh_cmd.cpp
===================================================================
--- src/roadveh_cmd.cpp	(revision 10900)
+++ src/roadveh_cmd.cpp	(working copy)
@@ -86,7 +86,7 @@
 	TRACKDIR_X_NE, TRACKDIR_Y_SE, TRACKDIR_X_SW, TRACKDIR_Y_NW
 };
 
-int RoadVehicle::GetImage(Direction direction) const
+int RoadVehicle::GetImage(Direction direction)
 {
 	int img = this->spritenum;
 	int image;
@@ -123,7 +123,7 @@
 	return CommandCost(((_price.roadveh_base >> 3) * GetEngineProperty(engine_type, 0x11, RoadVehInfo(engine_type)->base_cost)) >> 5);
 }
 
-byte GetRoadVehLength(const Vehicle *v)
+byte GetRoadVehLength(Vehicle *v)
 {
 	byte length = 8;
 
@@ -842,7 +842,7 @@
 	InvalidateVehicleOrder(v);
 }
 
-static void StartRoadVehSound(const Vehicle* v)
+static void StartRoadVehSound(Vehicle* v)
 {
 	if (!PlayVehicleSound(v, VSE_START)) {
 		SoundFx s = RoadVehInfo(v->engine_type)->sfx;
@@ -855,7 +855,7 @@
 struct RoadVehFindData {
 	int x;
 	int y;
-	const Vehicle* veh;
+	Vehicle* veh;
 	Direction dir;
 };
 
Index: src/newgrf_industrytiles.cpp
===================================================================
--- src/newgrf_industrytiles.cpp	(revision 10900)
+++ src/newgrf_industrytiles.cpp	(working copy)
@@ -60,7 +60,7 @@
 	return ((y & 0xF) << 20) | ((x & 0xF) << 16) | (y << 8) | x;
 }
 
-static uint32 IndustryTileGetVariable(const ResolverObject *object, byte variable, byte parameter, bool *available)
+static uint32 IndustryTileGetVariable(ResolverObject *object, byte variable, byte parameter, bool *available)
 {
 	const Industry *inds = object->u.industry.ind;
 	TileIndex tile       = object->u.industry.tile;
@@ -106,25 +106,25 @@
 	return (uint32)-1;
 }
 
-static const SpriteGroup *IndustryTileResolveReal(const ResolverObject *object, const SpriteGroup *group)
+static const SpriteGroup *IndustryTileResolveReal(ResolverObject *object, const SpriteGroup *group)
 {
 	/* IndustryTile do not have 'real' groups.  Or do they?? */
 	return NULL;
 }
 
-uint32 IndustryTileGetRandomBits(const ResolverObject *object)
+uint32 IndustryTileGetRandomBits(ResolverObject *object)
 {
 	const TileIndex tile = object->u.industry.tile;
 	return (tile == INVALID_TILE || !IsTileType(tile, MP_INDUSTRY)) ? 0 : GetIndustryRandomBits(tile);
 }
 
-uint32 IndustryTileGetTriggers(const ResolverObject *object)
+uint32 IndustryTileGetTriggers(ResolverObject *object)
 {
 	const TileIndex tile = object->u.industry.tile;
 	return (tile == INVALID_TILE || !IsTileType(tile, MP_INDUSTRY)) ? 0 : GetIndustryTriggers(tile);
 }
 
-void IndustryTileSetTriggers(const ResolverObject *object, int triggers)
+void IndustryTileSetTriggers(ResolverObject *object, int triggers)
 {
 	const TileIndex tile = object->u.industry.tile;
 	if (IsTileType(tile, MP_INDUSTRY)) SetIndustryTriggers(tile, triggers);
Index: src/newgrf_spritegroup.cpp
===================================================================
--- src/newgrf_spritegroup.cpp	(revision 10900)
+++ src/newgrf_spritegroup.cpp	(working copy)
@@ -79,7 +79,7 @@
 uint32 _temp_store[0x110];
 
 
-static inline uint32 GetVariable(const ResolverObject *object, byte variable, byte parameter, bool *available)
+static inline uint32 GetVariable(ResolverObject *object, byte variable, byte parameter, bool *available)
 {
 	/* Return common variables */
 	switch (variable) {
Index: src/newgrf_industries.cpp
===================================================================
--- src/newgrf_industries.cpp	(revision 10900)
+++ src/newgrf_industries.cpp	(working copy)
@@ -139,7 +139,7 @@
  * @param available will return false if ever the variable asked for does not exist
  * @param ind is of course the industry we are inquiring
  * @return the value stored in the corresponding variable*/
-uint32 IndustryGetVariable(const ResolverObject *object, byte variable, byte parameter, bool *available)
+uint32 IndustryGetVariable(ResolverObject *object, byte variable, byte parameter, bool *available)
 {
 	const Industry *industry = object->u.industry.ind;
 	TileIndex tile = object->u.industry.tile;
@@ -257,7 +257,7 @@
 	return (uint32)-1;
 }
 
-static const SpriteGroup *IndustryResolveReal(const ResolverObject *object, const SpriteGroup *group)
+static const SpriteGroup *IndustryResolveReal(ResolverObject *object, const SpriteGroup *group)
 {
 	/* IndustryTile do not have 'real' groups */
 	return NULL;
@@ -299,7 +299,7 @@
 	return group->g.callback.result;
 }
 
-uint32 IndustryLocationGetVariable(const ResolverObject *object, byte variable, byte parameter, bool *available)
+uint32 IndustryLocationGetVariable(ResolverObject *object, byte variable, byte parameter, bool *available)
 {
 	TileIndex tile = object->u.industry_location.tile;
 
Index: src/newgrf_engine.cpp
===================================================================
--- src/newgrf_engine.cpp	(revision 10900)
+++ src/newgrf_engine.cpp	(working copy)
@@ -427,25 +427,25 @@
 
 
 /* Vehicle Resolver Functions */
-static inline const Vehicle *GRV(const ResolverObject *object)
+static inline Vehicle *GRV(ResolverObject *object)
 {
 	return object->scope == VSG_SCOPE_SELF ? object->u.vehicle.self : object->u.vehicle.parent;
 }
 
 
-static uint32 VehicleGetRandomBits(const ResolverObject *object)
+static uint32 VehicleGetRandomBits(ResolverObject *object)
 {
 	return GRV(object) == NULL ? 0 : GRV(object)->random_bits;
 }
 
 
-static uint32 VehicleGetTriggers(const ResolverObject *object)
+static uint32 VehicleGetTriggers(ResolverObject *object)
 {
 	return GRV(object) == NULL ? 0 : GRV(object)->waiting_triggers;
 }
 
 
-static void VehicleSetTriggers(const ResolverObject *object, int triggers)
+static void VehicleSetTriggers(ResolverObject *object, int triggers)
 {
 	/* Evil cast to get around const-ness. This used to be achieved by an
 	 * innocent looking function pointer cast... Currently I cannot see a
@@ -486,9 +486,9 @@
 }
 
 
-static uint32 VehicleGetVariable(const ResolverObject *object, byte variable, byte parameter, bool *available)
+static uint32 VehicleGetVariable(ResolverObject *object, byte variable, byte parameter, bool *available)
 {
-	const Vehicle *v = GRV(object);
+	Vehicle *v = GRV(object);
 
 	if (v == NULL) {
 		/* Vehicle does not exist, so we're in a purchase list */
@@ -512,7 +512,7 @@
 			if (!v->HasFront()) return 1;
 
 			{
-				const Vehicle* u;
+				Vehicle* u;
 				byte chain_before = 0;
 				byte chain_after  = 0;
 
@@ -610,8 +610,8 @@
 			 */
 			if (v->type != VEH_TRAIN) return 0;
 
-			const Vehicle *u_p = GetPrevVehicleInChain(v);
-			const Vehicle *u_n = v->next;
+			Vehicle *u_p = GetPrevVehicleInChain(v);
+			Vehicle *u_n = v->next;
 			DirDiff f = (u_p == NULL) ?  DIRDIFF_SAME : DirDifference(u_p->direction, v->direction);
 			DirDiff b = (u_n == NULL) ?  DIRDIFF_SAME : DirDifference(v->direction, u_n->direction);
 			DirDiff t = ChangeDirDiff(f, b);
@@ -794,9 +794,9 @@
 }
 
 
-static const SpriteGroup *VehicleResolveReal(const ResolverObject *object, const SpriteGroup *group)
+static const SpriteGroup *VehicleResolveReal(ResolverObject *object, const SpriteGroup *group)
 {
-	const Vehicle *v = object->u.vehicle.self;
+	Vehicle *v = object->u.vehicle.self;
 	uint totalsets;
 	uint set;
 	bool in_motion;
@@ -823,7 +823,7 @@
 }
 
 
-static inline void NewVehicleResolver(ResolverObject *res, EngineID engine_type, const Vehicle *v)
+static inline void NewVehicleResolver(ResolverObject *res, EngineID engine_type, Vehicle *v)
 {
 	res->GetRandomBits = &VehicleGetRandomBits;
 	res->GetTriggers   = &VehicleGetTriggers;
@@ -878,7 +878,7 @@
 }
 
 
-SpriteID GetCustomEngineSprite(EngineID engine, const Vehicle *v, Direction direction)
+SpriteID GetCustomEngineSprite(EngineID engine, Vehicle *v, Direction direction)
 {
 	const SpriteGroup *group;
 	ResolverObject object;
@@ -892,7 +892,7 @@
 }
 
 
-SpriteID GetRotorOverrideSprite(EngineID engine, const Vehicle *v, bool info_view)
+SpriteID GetRotorOverrideSprite(EngineID engine, Vehicle *v, bool info_view)
 {
 	const SpriteGroup *group;
 	ResolverObject object;
@@ -938,7 +938,7 @@
  * @param v        The vehicle to evaluate the callback for, or NULL if it doesnt exist yet
  * @return The value the callback returned, or CALLBACK_FAILED if it failed
  */
-uint16 GetVehicleCallback(CallbackID callback, uint32 param1, uint32 param2, EngineID engine, const Vehicle *v)
+uint16 GetVehicleCallback(CallbackID callback, uint32 param1, uint32 param2, EngineID engine, Vehicle *v)
 {
 	const SpriteGroup *group;
 	ResolverObject object;
@@ -965,7 +965,7 @@
  * @param parent   The vehicle to use for parent scope
  * @return The value the callback returned, or CALLBACK_FAILED if it failed
  */
-uint16 GetVehicleCallbackParent(CallbackID callback, uint32 param1, uint32 param2, EngineID engine, const Vehicle *v, const Vehicle *parent)
+uint16 GetVehicleCallbackParent(CallbackID callback, uint32 param1, uint32 param2, EngineID engine, Vehicle *v, Vehicle *parent)
 {
 	const SpriteGroup *group;
 	ResolverObject object;
@@ -986,7 +986,7 @@
 
 
 /* Callback 36 handlers */
-uint GetVehicleProperty(const Vehicle *v, uint8 property, uint orig_value)
+uint GetVehicleProperty(Vehicle *v, uint8 property, uint orig_value)
 {
 	uint16 callback = GetVehicleCallback(CBID_VEHICLE_MODIFY_PROPERTY, property, 0, v->engine_type, v);
 	if (callback != CALLBACK_FAILED) return callback;
Index: src/viewport.cpp
===================================================================
--- src/viewport.cpp	(revision 10900)
+++ src/viewport.cpp	(working copy)
@@ -1783,21 +1783,21 @@
 }
 
 
-static void SafeShowTrainViewWindow(const Vehicle* v)
+static void SafeShowTrainViewWindow(Vehicle* v)
 {
 	if (!IsFrontEngine(v)) v = GetFirstVehicleInChain(v);
 	ShowTrainViewWindow(v);
 }
 
-static void SafeShowRoadVehViewWindow(const Vehicle *v)
+static void SafeShowRoadVehViewWindow(Vehicle *v)
 {
 	if (!IsRoadVehFront(v)) v = GetFirstVehicleInChain(v);
 	ShowRoadVehViewWindow(v);
 }
 
-static void Nop(const Vehicle *v) {}
+static void Nop(Vehicle *v) {}
 
-typedef void OnVehicleClickProc(const Vehicle *v);
+typedef void OnVehicleClickProc(Vehicle *v);
 static OnVehicleClickProc* const _on_vehicle_click_proc[] = {
 	SafeShowTrainViewWindow,
 	SafeShowRoadVehViewWindow,
@@ -1809,7 +1809,7 @@
 
 void HandleViewportClicked(const ViewPort *vp, int x, int y)
 {
-	const Vehicle *v;
+	Vehicle *v;
 
 	if (CheckClickOnTown(vp, x, y)) return;
 	if (CheckClickOnStation(vp, x, y)) return;
Index: src/vehicle.cpp
===================================================================
--- src/vehicle.cpp	(revision 10900)
+++ src/vehicle.cpp	(working copy)
@@ -485,7 +485,7 @@
  * While this function is fast, it cannot be used in the GetFirstVehicleInChain
  * function, otherwise you'll end up in an infinite loop call
  */
-Vehicle *GetPrevVehicleInChain(const Vehicle *v)
+Vehicle *GetPrevVehicleInChain(Vehicle *v)
 {
 	Vehicle *u;
 	assert(v != NULL);
@@ -504,7 +504,7 @@
  * This function reads out the v->first cache. Should the cache be dirty,
  * it determines the first vehicle in a chain, and updates the cache.
  */
-Vehicle *GetFirstVehicleInChain(const Vehicle *v)
+Vehicle *GetFirstVehicleInChain(Vehicle *v)
 {
 	Vehicle* u;
 
@@ -749,7 +749,7 @@
 	return CommandCost((EngInfo(engine_type)->refit_cost * base_cost.GetCost()) >> 10);
 }
 
-static void DoDrawVehicle(const Vehicle *v)
+static void DoDrawVehicle(Vehicle *v)
 {
 	SpriteID image = v->cur_image;
 	SpriteID pal;
@@ -795,7 +795,7 @@
 
 	for (int y = yl;; y = (y + (1 << 6)) & (0x3F << 6)) {
 		for (int x = xl;; x = (x + 1) & 0x3F) {
-			const Vehicle *v = _vehicle_position_hash[x + y]; // already masked & 0xFFF
+			Vehicle *v = _vehicle_position_hash[x + y]; // already masked & 0xFFF
 
 			while (v != NULL) {
 				if (!(v->vehstatus & VS_HIDDEN) &&
@@ -1586,7 +1586,7 @@
 		uint32 id = p1;
 		uint16 window_type = p2 & VLW_MASK;
 
-		engine_count = GenerateVehicleSortList((const Vehicle***)&vl, &engine_list_length, vehicle_type, _current_player, id, window_type);
+		engine_count = GenerateVehicleSortList((Vehicle***)&vl, &engine_list_length, vehicle_type, _current_player, id, window_type);
 	} else {
 		/* Get the list of vehicles in the depot */
 		BuildDepotVehicleList(vehicle_type, tile, &vl, &engine_list_length, &engine_count, NULL, NULL, NULL);
@@ -1903,7 +1903,7 @@
 
 
 /* Extend the list size for BuildDepotVehicleList() */
-static inline void ExtendVehicleListSize(const Vehicle ***engine_list, uint16 *engine_list_length, uint16 step_size)
+static inline void ExtendVehicleListSize(Vehicle ***engine_list, uint16 *engine_list_length, uint16 step_size)
 {
 	*engine_list_length = min(*engine_list_length + step_size, GetMaxVehicleIndex() + 1);
 	*engine_list = ReallocT(*engine_list, *engine_list_length);
@@ -1945,11 +1945,11 @@
 				if (v->tile == tile && v->type == VEH_TRAIN && v->u.rail.track == TRACK_BIT_DEPOT) {
 					if (IsFrontEngine(v)) {
 						if (engine_list == NULL) continue;
-						if (*engine_count == *engine_list_length) ExtendVehicleListSize((const Vehicle***)engine_list, engine_list_length, 25);
+						if (*engine_count == *engine_list_length) ExtendVehicleListSize((Vehicle***)engine_list, engine_list_length, 25);
 						(*engine_list)[(*engine_count)++] = v;
 					} else if (IsFreeWagon(v)) {
 						if (wagon_list == NULL) continue;
-						if (*wagon_count == *wagon_list_length) ExtendVehicleListSize((const Vehicle***)wagon_list, wagon_list_length, 25);
+						if (*wagon_count == *wagon_list_length) ExtendVehicleListSize((Vehicle***)wagon_list, wagon_list_length, 25);
 						(*wagon_list)[(*wagon_count)++] = v;
 					}
 				}
@@ -1959,7 +1959,7 @@
 		case VEH_ROAD:
 			FOR_ALL_VEHICLES(v) {
 				if (v->tile == tile && v->type == VEH_ROAD && IsRoadVehInDepot(v) && IsRoadVehFront(v)) {
-					if (*engine_count == *engine_list_length) ExtendVehicleListSize((const Vehicle***)engine_list, engine_list_length, 25);
+					if (*engine_count == *engine_list_length) ExtendVehicleListSize((Vehicle***)engine_list, engine_list_length, 25);
 					(*engine_list)[(*engine_count)++] = v;
 				}
 			}
@@ -1968,7 +1968,7 @@
 		case VEH_SHIP:
 			FOR_ALL_VEHICLES(v) {
 				if (v->tile == tile && v->type == VEH_SHIP && IsShipInDepot(v)) {
-					if (*engine_count == *engine_list_length) ExtendVehicleListSize((const Vehicle***)engine_list, engine_list_length, 25);
+					if (*engine_count == *engine_list_length) ExtendVehicleListSize((Vehicle***)engine_list, engine_list_length, 25);
 					(*engine_list)[(*engine_count)++] = v;
 				}
 			}
@@ -1979,7 +1979,7 @@
 				if (v->tile == tile &&
 						v->type == VEH_AIRCRAFT && IsNormalAircraft(v) &&
 						v->vehstatus & VS_HIDDEN) {
-					if (*engine_count == *engine_list_length) ExtendVehicleListSize((const Vehicle***)engine_list, engine_list_length, 25);
+					if (*engine_count == *engine_list_length) ExtendVehicleListSize((Vehicle***)engine_list, engine_list_length, 25);
 					(*engine_list)[(*engine_count)++] = v;
 				}
 			}
@@ -2005,10 +2005,10 @@
 * @param window_type tells what kind of window the list is for. Use the VLW flags in vehicle_gui.h
 * @return the number of vehicles added to the list
 */
-uint GenerateVehicleSortList(const Vehicle ***sort_list, uint16 *length_of_array, VehicleType type, PlayerID owner, uint32 index, uint16 window_type)
+uint GenerateVehicleSortList(Vehicle ***sort_list, uint16 *length_of_array, VehicleType type, PlayerID owner, uint32 index, uint16 window_type)
 {
 	uint n = 0;
-	const Vehicle *v;
+	Vehicle *v;
 
 	switch (window_type) {
 		case VLW_STATION_LIST: {
@@ -2108,7 +2108,7 @@
  */
 CommandCost SendAllVehiclesToDepot(VehicleType type, uint32 flags, bool service, PlayerID owner, uint16 vlw_flag, uint32 id)
 {
-	const Vehicle **sort_list = NULL;
+	Vehicle **sort_list = NULL;
 	uint n, i;
 	uint16 array_length = 0;
 
@@ -2682,7 +2682,7 @@
 }
 
 
-static SpriteID GetEngineColourMap(EngineID engine_type, PlayerID player, EngineID parent_engine_type, const Vehicle *v)
+static SpriteID GetEngineColourMap(EngineID engine_type, PlayerID player, EngineID parent_engine_type, Vehicle *v)
 {
 	SpriteID map = PAL_NONE;
 
@@ -2716,7 +2716,7 @@
 	return GetEngineColourMap(engine_type, player, INVALID_ENGINE, NULL);
 }
 
-SpriteID GetVehiclePalette(const Vehicle *v)
+SpriteID GetVehiclePalette(Vehicle *v)
 {
 	if (v->type == VEH_TRAIN) {
 		return GetEngineColourMap(
Index: src/newgrf_cargo.cpp
===================================================================
--- src/newgrf_cargo.cpp	(revision 10900)
+++ src/newgrf_cargo.cpp	(working copy)
@@ -10,25 +10,25 @@
 #include "newgrf_cargo.h"
 
 
-static uint32 CargoGetRandomBits(const ResolverObject *object)
+static uint32 CargoGetRandomBits(ResolverObject *object)
 {
 	return 0;
 }
 
 
-static uint32 CargoGetTriggers(const ResolverObject *object)
+static uint32 CargoGetTriggers(ResolverObject *object)
 {
 	return 0;
 }
 
 
-static void CargoSetTriggers(const ResolverObject *object, int triggers)
+static void CargoSetTriggers(ResolverObject *object, int triggers)
 {
 	return;
 }
 
 
-static uint32 CargoGetVariable(const ResolverObject *object, byte variable, byte parameter, bool *available)
+static uint32 CargoGetVariable(ResolverObject *object, byte variable, byte parameter, bool *available)
 {
 	DEBUG(grf, 1, "Unhandled cargo property 0x%X", variable);
 
@@ -37,7 +37,7 @@
 }
 
 
-static const SpriteGroup *CargoResolveReal(const ResolverObject *object, const SpriteGroup *group)
+static const SpriteGroup *CargoResolveReal(ResolverObject *object, const SpriteGroup *group)
 {
 	/* Cargo action 2s should always have only 1 "loaded" state, but some
 	 * times things don't follow the spec... */
Index: src/newgrf_house.cpp
===================================================================
--- src/newgrf_house.cpp	(revision 10900)
+++ src/newgrf_house.cpp	(working copy)
@@ -138,19 +138,19 @@
 }
 
 
-static uint32 HouseGetRandomBits(const ResolverObject *object)
+static uint32 HouseGetRandomBits(ResolverObject *object)
 {
 	const TileIndex tile = object->u.house.tile;
 	return (tile == INVALID_TILE || !IsTileType(tile, MP_HOUSE)) ? 0 : GetHouseRandomBits(tile);
 }
 
-static uint32 HouseGetTriggers(const ResolverObject *object)
+static uint32 HouseGetTriggers(ResolverObject *object)
 {
 	const TileIndex tile = object->u.house.tile;
 	return (tile == INVALID_TILE || !IsTileType(tile, MP_HOUSE)) ? 0 : GetHouseTriggers(tile);
 }
 
-static void HouseSetTriggers(const ResolverObject *object, int triggers)
+static void HouseSetTriggers(ResolverObject *object, int triggers)
 {
 	const TileIndex tile = object->u.house.tile;
 	if (IsTileType(tile, MP_HOUSE)) SetHouseTriggers(tile, triggers);
@@ -193,7 +193,7 @@
  *
  * Used by the resolver to get values for feature 07 deterministic spritegroups.
  */
-static uint32 HouseGetVariable(const ResolverObject *object, byte variable, byte parameter, bool *available)
+static uint32 HouseGetVariable(ResolverObject *object, byte variable, byte parameter, bool *available)
 {
 	const Town *town = object->u.house.town;
 	TileIndex tile   = object->u.house.tile;
@@ -251,7 +251,7 @@
 	return UINT_MAX;
 }
 
-static const SpriteGroup *HouseResolveReal(const ResolverObject *object, const SpriteGroup *group)
+static const SpriteGroup *HouseResolveReal(ResolverObject *object, const SpriteGroup *group)
 {
 	/* Houses do not have 'real' groups */
 	return NULL;
Index: src/newgrf_sound.h
===================================================================
--- src/newgrf_sound.h	(revision 10900)
+++ src/newgrf_sound.h	(working copy)
@@ -22,7 +22,7 @@
 void InitializeSoundPool();
 FileEntry *GetSound(uint index);
 uint GetNumSounds();
-bool PlayVehicleSound(const Vehicle *v, VehicleSoundEvent event);
+bool PlayVehicleSound(Vehicle *v, VehicleSoundEvent event);
 bool PlayHouseSound(uint16 sound_id, TileIndex tile);
 
 #endif /* NEWGRF_SOUND_H */
Index: src/autoreplace_cmd.cpp
===================================================================
--- src/autoreplace_cmd.cpp	(revision 10900)
+++ src/autoreplace_cmd.cpp	(working copy)
@@ -55,7 +55,7 @@
 	if (dest->type == VEH_TRAIN) TrainConsistChanged(dest->first);
 }
 
-static bool VerifyAutoreplaceRefitForOrders(const Vehicle *v, const EngineID engine_type)
+static bool VerifyAutoreplaceRefitForOrders(Vehicle *v, const EngineID engine_type)
 {
 	const Order *o;
 	const Vehicle *u;
Index: src/newgrf_industries.h
===================================================================
--- src/newgrf_industries.h	(revision 10900)
+++ src/newgrf_industries.h	(working copy)
@@ -9,7 +9,7 @@
 #include "newgrf_spritegroup.h"
 
 /* in newgrf_industry.cpp */
-uint32 IndustryGetVariable(const ResolverObject *object, byte variable, byte parameter, bool *available);
+uint32 IndustryGetVariable(ResolverObject *object, byte variable, byte parameter, bool *available);
 uint16 GetIndustryCallback(CallbackID callback, uint32 param1, uint32 param2, Industry *industry, IndustryType type, TileIndex tile);
 uint32 GetIndustryIDAtOffset(TileIndex new_tile, TileIndex old_tile, const Industry *i);
 void IndustryProductionCallback(Industry *ind, int reason);
@@ -19,9 +19,9 @@
 IndustryType MapNewGRFIndustryType(IndustryType grf_type, uint32 grf_id);
 
 /* in newgrf_industrytiles.cpp*/
-uint32 IndustryTileGetRandomBits(const ResolverObject *object);
-uint32 IndustryTileGetTriggers(const ResolverObject *object);
-void IndustryTileSetTriggers(const ResolverObject *object, int triggers);
+uint32 IndustryTileGetRandomBits(ResolverObject *object);
+uint32 IndustryTileGetTriggers(ResolverObject *object);
+void IndustryTileSetTriggers(ResolverObject *object, int triggers);
 
 uint32 GetNearbyIndustryTileInformation(byte parameter, TileIndex tile, IndustryID index);
 
Index: src/window.h
===================================================================
--- src/window.h	(revision 10900)
+++ src/window.h	(working copy)
@@ -481,7 +481,7 @@
 assert_compile(WINDOW_CUSTOM_SIZE >= sizeof(dropdown_d));
 
 struct vehiclelist_d {
-	const Vehicle** sort_list;  // List of vehicles (sorted)
+	Vehicle** sort_list;        // List of vehicles (sorted)
 	Listing *_sorting;          // pointer to the appropiate subcategory of _sorting
 	uint16 length_of_sort_list; // Keeps track of how many vehicle pointers sort list got space for
 	VehicleType vehicle_type;   // The vehicle type that is sorted
Index: src/aircraft_cmd.cpp
===================================================================
--- src/aircraft_cmd.cpp	(revision 10900)
+++ src/aircraft_cmd.cpp	(working copy)
@@ -154,7 +154,7 @@
 }
 #endif
 
-int Aircraft::GetImage(Direction direction) const
+int Aircraft::GetImage(Direction direction)
 {
 	int spritenum = this->spritenum;
 
@@ -167,7 +167,7 @@
 	return direction + _aircraft_sprite[spritenum];
 }
 
-SpriteID GetRotorImage(const Vehicle *v)
+SpriteID GetRotorImage(Vehicle *v)
 {
 	assert(v->subtype == AIR_HELICOPTER);
 
@@ -881,7 +881,7 @@
 	SetAircraftPosition(v, v->x_pos, v->y_pos, v->z_pos);
 }
 
-static void PlayAircraftSound(const Vehicle* v)
+static void PlayAircraftSound(Vehicle* v)
 {
 	if (!PlayVehicleSound(v, VSE_START)) {
 		SndPlayVehicleFx(AircraftVehInfo(v->engine_type)->sfx, v);
Index: src/roadveh_gui.cpp
===================================================================
--- src/roadveh_gui.cpp	(revision 10900)
+++ src/roadveh_gui.cpp	(working copy)
@@ -24,7 +24,7 @@
 	return (length * 28) / 8;
 }
 
-void DrawRoadVehImage(const Vehicle *v, int x, int y, int count, VehicleID selection)
+void DrawRoadVehImage(Vehicle *v, int x, int y, int count, VehicleID selection)
 {
 	int dx = 0;
 
@@ -71,7 +71,7 @@
 	} break;
 
 	case WE_PAINT: {
-		const Vehicle *v = GetVehicle(w->window_number);
+		Vehicle *v = GetVehicle(w->window_number);
 		StringID str;
 		uint y_offset = RoadVehHasArticPart(v) ? 15 :0;
 
@@ -425,7 +425,7 @@
 	RoadVehViewWndProc,
 };
 
-void ShowRoadVehViewWindow(const Vehicle *v)
+void ShowRoadVehViewWindow(Vehicle *v)
 {
 	Window *w = AllocateWindowDescFront(&_roadveh_view_desc, v->index);
 
@@ -437,7 +437,7 @@
 
 void CcBuildRoadVeh(bool success, TileIndex tile, uint32 p1, uint32 p2)
 {
-	const Vehicle *v;
+	Vehicle *v;
 
 	if (!success) return;
 
