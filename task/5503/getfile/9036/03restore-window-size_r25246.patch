# HG changeset patch
# User sbr <sebastien@brissaud.name>
# Date 1368872614 0
# Branch fs5503_02
# Node ID 7940377a75928c1e9c4babc2d8989e869ac421b7
# Parent  64eea9358be0daabfec78ff2b1319edf7274456a
# Parent  623f66cc5d401e5deb2b8556f036ece72d6e42e1
Restore the previous size of the window.

diff --git a/src/object_gui.cpp b/src/object_gui.cpp
--- a/src/object_gui.cpp
+++ b/src/object_gui.cpp
@@ -17,6 +17,7 @@
 #include "strings_func.h"
 #include "viewport_func.h"
 #include "window_gui.h"
+#include "window_func.h"
 
 #include "widgets/object_widget.h"
 
@@ -25,6 +26,8 @@
 static ObjectClassID _selected_object_class; ///< the currently visible object class
 static int _selected_object_index;           ///< the index of the selected object in the current class or -1
 static uint8 _selected_object_view;          ///< the view of the selected object
+static uint _matrix_col_count;               ///< Number of columns of the object type matrix
+static uint _list_row_count;                 ///< Number of rows of the object class list
 
 /** The window used for building objects. */
 class BuildObjectWindow : public PickerWindowBase {
@@ -61,6 +64,22 @@
 		return sel_objclass->GetSpec(_selected_object_index)->IsAvailable();
 	}
 
+	/** Calculate the number of columns of the \c WID_BO_SELECT_MATRIX widget */
+	uint GetMatrixColumnCount()
+	{
+		uint matrix_width = this->GetWidget<NWidgetBase>(WID_BO_SELECT_MATRIX)->current_x;
+		uint image_width = this->GetWidget<NWidgetBase>(WID_BO_SELECT_IMAGE)->smallest_x;
+
+		if (matrix_width == image_width) {
+			return 1;
+		} else if (matrix_width > image_width) {
+			uint padded_image_width = this->GetWidget<NWidgetBase>(WID_BO_SELECT_MATRIX)->resize_x;
+			return 1 + ((matrix_width - image_width) / padded_image_width);
+		} else {
+			NOT_REACHED(); // WID_BO_SELECT_MATRIX should have at least one column.
+		}
+	}
+
 public:
 	BuildObjectWindow(const WindowDesc *desc, Window *w) : PickerWindowBase(w), info_height(1)
 	{
@@ -85,11 +104,29 @@
 		NWidgetMatrix *matrix = this->GetWidget<NWidgetMatrix>(WID_BO_SELECT_MATRIX);
 		matrix->SetScrollbar(this->GetScrollbar(WID_BO_SELECT_SCROLL));
 		matrix->SetCount(ObjectClass::Get(_selected_object_class)->GetUISpecCount());
+
+		/* If needed restore the window previous size with the stored values.*/
+		uint default_matrix_col_count = this->GetMatrixColumnCount();
+		uint default_list_row_count = this->vscroll->GetCapacity();
+		if (_matrix_col_count > default_matrix_col_count || _list_row_count > default_list_row_count) {
+			int delta_x = (_matrix_col_count - default_matrix_col_count) * this->resize.step_width;
+			int delta_y = (_list_row_count - default_list_row_count) * this->resize.step_height;
+			ResizeWindow(this, delta_x, delta_y, false);
+			/* The window may be linked to the toolbars, thus positioned at the left-bottom of the toolbars.
+			 * If the resized window is wider than the toolbars, its position need te be adjusted to ensure all
+			 * matrix columns are visible. */
+			this->FindWindowPlacementAndResize(this->width, this->height);
+		}
+
 		if (_selected_object_index != -1) matrix->SetClicked(_selected_object_index);
 	}
 
 	virtual ~BuildObjectWindow()
 	{
+		/* Store the number of columns of the object type matrix and the number of rows of the object class list
+		 * to restore them on the next window invocation. */
+		_matrix_col_count = this->GetMatrixColumnCount();
+		_list_row_count = this->vscroll->GetCapacity();
 	}
 
 	virtual void SetStringParameters(int widget) const
