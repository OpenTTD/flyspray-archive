Index: src/macros.h
===================================================================
--- src/macros.h	(Revision 10963)
+++ src/macros.h	(Arbeitskopie)
@@ -300,6 +300,23 @@
 	return x ^= (T)1 << y;
 }
 
+/**
+ * Counts the set bits.
+ * 
+ * @param x The variable form which the bits are counted.
+ * @param pos The start bit
+ * @param size The range how far the count should go.
+ * @return The number of set bits.
+ */
+template<typename T> static inline uint COUNTBITS(T& x, int pos, int size)
+{
+	uint count = 0;
+	size += pos;
+	for (; pos < size; pos++) {
+		if (x & (T)(1 << pos)) count++;
+	}
+	return count;
+}
 
 /* checking more bits. Maybe unneccessary, but easy to use */
 /**
Index: src/road_cmd.cpp
===================================================================
--- src/road_cmd.cpp	(Revision 10963)
+++ src/road_cmd.cpp	(Arbeitskopie)
@@ -36,13 +36,7 @@
 
 static uint CountRoadBits(RoadBits r)
 {
-	uint count = 0;
-
-	if (r & ROAD_NW) ++count;
-	if (r & ROAD_SW) ++count;
-	if (r & ROAD_SE) ++count;
-	if (r & ROAD_NE) ++count;
-	return count;
+	return COUNTBITS(r, 0, 4);
 }
 
 
Index: src/vehicle_gui.cpp
===================================================================
--- src/vehicle_gui.cpp	(Revision 10963)
+++ src/vehicle_gui.cpp	(Arbeitskopie)
@@ -478,9 +478,7 @@
 /** Count the number of bits that are set in a mask */
 static uint CountBits(uint32 mask)
 {
-	uint c = 0;
-	for (; mask != 0; mask >>= 1) if (HASBIT(mask, 0)) c++;
-	return c;
+	return COUNTBITS(mask, 0, 32);
 }
 
 /** Display list of cargo types of the engine, for the purchase information window */
