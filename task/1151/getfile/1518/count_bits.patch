Index: src/macros.h
===================================================================
--- src/macros.h	(Revision 11021)
+++ src/macros.h	(Arbeitskopie)
@@ -300,7 +300,35 @@
 	return x ^= (T)1 << y;
 }
 
+/**
+ * Counts the set bits.
+ *
+ * @note overloaded function
+ * @param x The variable form which the bits are counted.
+ * @return The number of set bits.
+ */
+template<typename T> static inline uint COUNTBITS(const T& x)
+{
+	T y = x;
+	uint count = 0;
+	for (count = 0 ; y ; count++, y &= (T)(y - 1));
+	return count;
+}
 
+/**
+ * Counts the set bits.
+ *
+ * @note overloaded function
+ * @param x The variable form which the bits are counted.
+ * @param pos The start bit
+ * @param size The range how far the count should go.
+ * @return The number of set bits.
+ */
+template<typename T> static inline uint COUNTBITS(const T& x, int pos, int size)
+{
+	return COUNTBITS((T)(GB(x,pos,size)));
+}
+
 /* checking more bits. Maybe unneccessary, but easy to use */
 /**
  * Check several bits in a value.
Index: src/road_cmd.cpp
===================================================================
--- src/road_cmd.cpp	(Revision 11021)
+++ src/road_cmd.cpp	(Arbeitskopie)
@@ -33,19 +33,6 @@
 #include "tunnel_map.h"
 #include "misc/autoptr.hpp"
 
-
-static uint CountRoadBits(RoadBits r)
-{
-	uint count = 0;
-
-	if (r & ROAD_NW) ++count;
-	if (r & ROAD_SW) ++count;
-	if (r & ROAD_SE) ++count;
-	if (r & ROAD_NE) ++count;
-	return count;
-}
-
-
 bool CheckAllowRemoveRoad(TileIndex tile, RoadBits remove, Owner owner, bool *edge_road, RoadType rt)
 {
 	RoadBits present;
@@ -225,7 +212,7 @@
 					MarkTileDirtyByTile(tile);
 				}
 			}
-			return CommandCost(CountRoadBits(c) * _price.remove_road);
+			return CommandCost(COUNTBITS(c) * _price.remove_road);
 		}
 
 		case ROAD_TILE_CROSSING: {
@@ -487,7 +474,7 @@
 		pieces &= ComplementRoadBits(existing);
 	}
 
-	cost.AddCost(CountRoadBits(pieces) * _price.build_road);
+	cost.AddCost(COUNTBITS(pieces) * _price.build_road);
 	if (IsTileType(tile, MP_TUNNELBRIDGE)) {
 		/* Pay for *every* tile of the bridge or tunnel */
 		cost.MultiplyCost(DistanceManhattan(IsTunnel(tile) ? GetOtherTunnelEnd(tile) : GetOtherBridgeEnd(tile), tile));
Index: src/vehicle_gui.cpp
===================================================================
--- src/vehicle_gui.cpp	(Revision 11021)
+++ src/vehicle_gui.cpp	(Arbeitskopie)
@@ -475,14 +475,6 @@
 	return DrawStringMultiLine(x, y, STR_02BD, w);
 }
 
-/** Count the number of bits that are set in a mask */
-static uint CountBits(uint32 mask)
-{
-	uint c = 0;
-	for (; mask != 0; mask >>= 1) if (HASBIT(mask, 0)) c++;
-	return c;
-}
-
 /** Display list of cargo types of the engine, for the purchase information window */
 uint ShowRefitOptionsList(int x, int y, uint w, EngineID engine)
 {
@@ -493,7 +485,7 @@
 	char *b = _userstring;
 
 	/* Draw nothing if the engine is not refittable */
-	if (CountBits(cmask) <= 1) return 0;
+	if (COUNTBITS(cmask) <= 1) return 0;
 
 	b = InlineString(b, STR_PURCHASE_INFO_REFITTABLE_TO);
 
@@ -503,7 +495,7 @@
 	} else {
 		/* Check if we are able to refit to more cargo types and unable to. If
 		 * so, invert the cargo types to list those that we can't refit to. */
-		if (CountBits(cmask ^ lmask) < CountBits(cmask)) {
+		if (COUNTBITS(cmask ^ lmask) < COUNTBITS(cmask)) {
 			cmask ^= lmask;
 			b = InlineString(b, STR_PURCHASE_INFO_ALL_BUT);
 		}
