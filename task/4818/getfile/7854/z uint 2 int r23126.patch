Index: src/tunnel_map.cpp
===================================================================
--- src/tunnel_map.cpp	(revision 23126)
+++ src/tunnel_map.cpp	(working copy)
@@ -45,10 +45,10 @@
  * @param dir  the direction to start searching to.
  * @return true if and only if there is a tunnel.
  */
-bool IsTunnelInWayDir(TileIndex tile, uint z, DiagDirection dir)
+bool IsTunnelInWayDir(TileIndex tile, int z, DiagDirection dir)
 {
 	TileIndexDiff delta = TileOffsByDiagDir(dir);
-	uint height;
+	int height;
 
 	do {
 		tile -= delta;
@@ -65,7 +65,7 @@
  * @param z the 'z' to search on.
  * @return true if and only if there is a tunnel.
  */
-bool IsTunnelInWay(TileIndex tile, uint z)
+bool IsTunnelInWay(TileIndex tile, int z)
 {
 	return IsTunnelInWayDir(tile, z, (TileX(tile) > (MapMaxX() / 2)) ? DIAGDIR_NE : DIAGDIR_SW) ||
 			IsTunnelInWayDir(tile, z, (TileY(tile) > (MapMaxY() / 2)) ? DIAGDIR_NW : DIAGDIR_SE);
Index: src/tunnel_map.h
===================================================================
--- src/tunnel_map.h	(revision 23126)
+++ src/tunnel_map.h	(working copy)
@@ -38,8 +38,8 @@
 }
 
 TileIndex GetOtherTunnelEnd(TileIndex);
-bool IsTunnelInWay(TileIndex, uint z);
-bool IsTunnelInWayDir(TileIndex tile, uint z, DiagDirection dir);
+bool IsTunnelInWay(TileIndex, int z);
+bool IsTunnelInWayDir(TileIndex tile, int z, DiagDirection dir);
 
 /**
  * Makes a road tunnel entrance
