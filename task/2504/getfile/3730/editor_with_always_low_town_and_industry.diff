Index: src/industry_gui.cpp
===================================================================
--- src/industry_gui.cpp	(revision 14845)
+++ src/industry_gui.cpp	(working copy)
@@ -197,7 +197,7 @@
 		 * In Editor, you just build, while ingame, or you fund or you prospect */
 		if (_game_mode == GM_EDITOR) {
 			/* We've chosen many random industries but no industries have been specified */
-			if (indsp == NULL) this->enabled[this->selected_index] = _settings_game.difficulty.number_industries != 0;
+			if (indsp == NULL) this->enabled[this->selected_index] = true;//_settings_game.difficulty.number_industries != 0;
 			this->widget[DPIW_FUND_WIDGET].data = STR_BUILD_NEW_INDUSTRY;
 		} else {
 			this->widget[DPIW_FUND_WIDGET].data = (_settings_game.construction.raw_industry_construction == 2 && indsp->IsRawIndustry()) ? STR_PROSPECT_NEW_INDUSTRY : STR_FUND_NEW_INDUSTRY;
Index: src/town_cmd.cpp
===================================================================
--- src/town_cmd.cpp	(revision 14845)
+++ src/town_cmd.cpp	(working copy)
@@ -1617,7 +1617,7 @@
 bool GenerateTowns()
 {
 	uint num = 0;
-	uint n = ScaleByMapSize(_num_initial_towns[_settings_game.difficulty.number_towns] + (Random() & 7));
+	uint n = ScaleByMapSize(_num_initial_towns[_game_mode == GM_EDITOR?0:_settings_game.difficulty.number_towns] + (Random() & 7));
 	uint num_cities = _settings_game.economy.larger_towns == 0 ? 0 : n / _settings_game.economy.larger_towns;
 
 	SetGeneratingWorldProgress(GWP_TOWN, n);
Index: src/industry_cmd.cpp
===================================================================
--- src/industry_cmd.cpp	(revision 14845)
+++ src/industry_cmd.cpp	(working copy)
@@ -1747,13 +1747,13 @@
 {
 	/* We need to bypass the amount given in parameter if it exceeds the maximum dimension of the
 	 * _numof_industry_table.  newgrf can specify a big amount */
-	int num = (amount > NB_NUMOFINDUSTRY) ? amount : _numof_industry_table[_settings_game.difficulty.number_industries][amount];
+	int num = (amount > NB_NUMOFINDUSTRY) ? amount : _numof_industry_table[(_game_mode == GM_EDITOR)?1:_settings_game.difficulty.number_industries][amount];
 	const IndustrySpec *ind_spc = GetIndustrySpec(type);
 
 	/* These are always placed next to the coastline, so we scale by the perimeter instead. */
 	num = (ind_spc->check_proc == CHECK_REFINERY || ind_spc->check_proc == CHECK_OIL_RIG) ? ScaleByMapSize1D(num) : ScaleByMapSize(num);
 
-	if (_settings_game.difficulty.number_industries != 0) {
+	if (_settings_game.difficulty.number_industries != 0 || _game_mode == GM_EDITOR) {
 		CompanyID old_company = _current_company;
 		_current_company = OWNER_NONE;
 		assert(num > 0);
@@ -1782,7 +1782,7 @@
 	const IndustrySpec *ind_spc;
 
 	/* Find the total amount of industries */
-	if (_settings_game.difficulty.number_industries > 0) {
+	if (_settings_game.difficulty.number_industries > 0 || _game_mode == GM_EDITOR) {
 		for (it = 0; it < NUM_INDUSTRYTYPES; it++) {
 
 			ind_spc = GetIndustrySpec(it);
@@ -1796,7 +1796,7 @@
 				/* once the chance of appearance is determind, it have to be scaled by
 				 * the difficulty level. The "chance" in question is more an index into
 				 * the _numof_industry_table,in fact */
-				int num = (chance > NB_NUMOFINDUSTRY) ? chance : _numof_industry_table[_settings_game.difficulty.number_industries][chance];
+				int num = (chance > NB_NUMOFINDUSTRY) ? chance : _numof_industry_table[(_game_mode == GM_EDITOR)?1:_settings_game.difficulty.number_industries][chance];
 
 				/* These are always placed next to the coastline, so we scale by the perimeter instead. */
 				num = (ind_spc->check_proc == CHECK_REFINERY || ind_spc->check_proc == CHECK_OIL_RIG) ? ScaleByMapSize1D(num) : ScaleByMapSize(num);
@@ -1807,7 +1807,7 @@
 
 	SetGeneratingWorldProgress(GWP_INDUSTRY, i);
 
-	if (_settings_game.difficulty.number_industries > 0) {
+	if (_settings_game.difficulty.number_industries > 0 || _game_mode == GM_EDITOR) {
 		for (it = 0; it < NUM_INDUSTRYTYPES; it++) {
 			/* Once the number of industries has been determined, let's really create them.
 			 * The test for chance allows us to try create industries that are available only
