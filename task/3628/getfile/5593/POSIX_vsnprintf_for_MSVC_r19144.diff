Index: src/string.cpp
===================================================================
--- src/string.cpp	(revision 19144)
+++ src/string.cpp	(working copy)
@@ -20,6 +20,10 @@
 #include <stdarg.h>
 #include <ctype.h> /* required for tolower() */
 
+#ifdef _MSC_VER
+#include <errno.h> // required by vsnprintf implementation for MSVC
+#endif
+
 /**
  * Safer implementation of vsnprintf; same as vsnprintf except:
  * - last instead of size, i.e. replace sizeof with lastof.
@@ -219,17 +223,28 @@
 #endif /* MinGW Runtime < 3.14 */
 
 #ifdef _MSC_VER
-/* *nprintf broken, not POSIX compliant, MSDN description
- * - If len < count, then len characters are stored in buffer, a null-terminator is appended, and len is returned.
- * - If len = count, then len characters are stored in buffer, no null-terminator is appended, and len is returned.
- * - If len > count, then count characters are stored in buffer, no null-terminator is appended, and a negative value is returned
+/**
+ * Almost POSIX compliant implementation of \c vsnprintf for VC compiler.
+ * The difference is value returned on output truncation. This implementation returns size.
+ * POSIX implememntation returns size or more (the number of bytes that would be written to str
+ * had size been sufficiently large excluding the terminating null byte).
  */
 int CDECL vsnprintf(char *str, size_t size, const char *format, va_list ap)
 {
-	int ret;
-	ret = _vsnprintf(str, size, format, ap);
-	if (ret < 0 || ret == size) str[size - 1] = '\0';
-	return ret;
+	if (size == 0) return 0;
+
+	errno = 0;
+	int ret = _vsnprintf(str, size, format, ap);
+
+	if (ret < 0) {
+		if (errno != ERANGE) return ret; // if the last errror is not the "insufficient buffer" then return -1
+	} else if ((size_t)ret < size) {
+		return ret; // if buffer is big enought return number of characers stored (excluding null)
+	}
+
+	/* if buffer is too small write null-terminator at its end and return size */
+	str[size - 1] = '\0';
+	return size;
 }
 #endif /* _MSC_VER */
 
