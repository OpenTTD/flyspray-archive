Index: src/network/network_admin.cpp
===================================================================
--- src/network/network_admin.cpp	(revision 23061)
+++ src/network/network_admin.cpp	(working copy)
@@ -228,16 +228,21 @@
  * Send an initial set of data from some client's information.
  * @param cs The information about a client.
  */
-NetworkRecvStatus ServerNetworkAdminSocketHandler::SendClientInfo(const NetworkClientSocket *cs)
+NetworkRecvStatus ServerNetworkAdminSocketHandler::SendClientInfo(const NetworkClientSocket *cs, const NetworkClientInfo *ci)
 {
 	/* Only send data when we're a proper client, not just someone trying to query the server. */
-	const NetworkClientInfo *ci = cs->GetInfo();
 	if (ci == NULL) return NETWORK_RECV_STATUS_OKAY;
 
+	const char *ip_addr = "";
+
+	if (cs != NULL) {
+		ip_addr = const_cast<NetworkAddress &>(cs->client_address).GetHostname();
+	}
+
 	Packet *p = new Packet(ADMIN_PACKET_SERVER_CLIENT_INFO);
 
 	p->Send_uint32(ci->client_id);
-	p->Send_string(const_cast<NetworkAddress &>(cs->client_address).GetHostname());
+	p->Send_string(ip_addr);
 	p->Send_string(ci->client_name);
 	p->Send_uint8 (ci->client_lang);
 	p->Send_uint32(ci->join_date);
@@ -658,12 +663,17 @@
 			/* The admin is requesting client info. */
 			const NetworkClientSocket *cs;
 			if (d1 == UINT32_MAX) {
+				this->SendClientInfo(NULL, NetworkClientInfo::GetByClientID(CLIENT_ID_SERVER));
 				FOR_ALL_CLIENT_SOCKETS(cs) {
-					this->SendClientInfo(cs);
+					this->SendClientInfo(cs, cs->GetInfo());
 				}
 			} else {
-				cs = NetworkClientSocket::GetByClientID((ClientID)d1);
-				if (cs != NULL) this->SendClientInfo(cs);
+				if (d1 == CLIENT_ID_SERVER) {
+					this->SendClientInfo(NULL, NetworkClientInfo::GetByClientID(CLIENT_ID_SERVER));
+				} else {
+					cs = NetworkClientSocket::GetByClientID((ClientID)d1);
+					if (cs != NULL) this->SendClientInfo(cs, cs->GetInfo());
+				}
 			}
 			break;
 
@@ -745,7 +755,7 @@
 	ServerNetworkAdminSocketHandler *as;
 	FOR_ALL_ACTIVE_ADMIN_SOCKETS(as) {
 		if (as->update_frequency[ADMIN_UPDATE_CLIENT_INFO] & ADMIN_FREQUENCY_AUTOMATIC) {
-			as->SendClientInfo(cs);
+			as->SendClientInfo(cs, cs->GetInfo());
 			if (new_client) {
 				as->SendClientJoin(cs->client_id);
 			}
Index: src/network/network_admin.h
===================================================================
--- src/network/network_admin.h	(revision 23061)
+++ src/network/network_admin.h	(working copy)
@@ -51,7 +51,7 @@
 
 	NetworkRecvStatus SendDate();
 	NetworkRecvStatus SendClientJoin(ClientID client_id);
-	NetworkRecvStatus SendClientInfo(const NetworkClientSocket *cs);
+	NetworkRecvStatus SendClientInfo(const NetworkClientSocket *cs, const NetworkClientInfo *ci);
 	NetworkRecvStatus SendClientUpdate(const NetworkClientInfo *ci);
 	NetworkRecvStatus SendClientQuit(ClientID client_id);
 	NetworkRecvStatus SendClientError(ClientID client_id, NetworkErrorCode error);
