Index: src/town_cmd.cpp
===================================================================
--- src/town_cmd.cpp	(wersja 11426)
+++ src/town_cmd.cpp	(kopia robocza)
@@ -733,14 +733,14 @@
 		if (desired_slope != cur_slope && ComplementSlope(desired_slope) != cur_slope) {
 			uint32 r = Random();
 
-			if (CHANCE16I(1, 8, r)) {
+			if (CHANCE_IP(1, 8, r, 3)) {
 				CommandCost res = CMD_ERROR;
-				if (!_generating_world && CHANCE16I(1, 10, r >> 4)) {
+				if (!_generating_world && CHANCE_IP(1, 10, r >> 3, 13)) {
 					/* Note: Do not replace " ^ 0xF" with ComplementSlope(). The slope might be steep. */
-					res = DoCommand(tile, CHANCE16I(1, 16, r >> 8) ? cur_slope : cur_slope ^ 0xF, 0,
+					res = DoCommand(tile, CHANCE_IP(1, 16, r >> 16, 4) ? cur_slope : cur_slope ^ 0xF, 0,
 							DC_EXEC | DC_AUTO | DC_NO_WATER, CMD_TERRAFORM_LAND);
 				}
-				if (CmdFailed(res) && CHANCE16I(1, 3, r >> 16)) {
+				if (CmdFailed(res) && CHANCE_IP(1, 3, r >> 20, 12)) {
 					/* We can consider building on the slope, though. */
 					goto no_slope;
 				}
Index: src/macros.h
===================================================================
--- src/macros.h	(wersja 11426)
+++ src/macros.h	(kopia robocza)
@@ -476,7 +476,7 @@
  * @param b The denominator of the fraction, must of course not be null
  * @return True in (a/b) percent
  */
-#define CHANCE16(a, b) ((uint16)Random() <= (uint16)((65536 * (a)) / (b)))
+#define CHANCE16(a, b) ((uint16)Random() < (uint16)((65536 * (a)) / (b)))
 
 /**
  * Flips a coin with a given probability and saves the randomize-number in a variable.
@@ -489,7 +489,7 @@
  * @param r The variable to save the randomize-number from Random()
  * @return True in (a/b) percent
  */
-#define CHANCE16R(a, b, r) ((uint16)(r = Random()) <= (uint16)((65536 * (a)) / (b)))
+#define CHANCE16R(a, b, r) ((uint16)(r = Random()) < (uint16)((65536 * (a)) / (b)))
 
 /**
  * Checks if a given randomize-number is below a given probability.
@@ -497,6 +497,9 @@
  * This macro is used to check if the given probability by the fraction of (a/b)
  * is greater than the given randomize-number v.
  *
+ * @note This uses full 16 LSB of @p r. If you need to extract more than two values
+ * from a single random number or want to use other number of bits, @see CHANCE_IP().
+ *
  * @param a The numerator of the fraction, see CHANCE16
  * @param b The denominator of the fraction, see CHANCE16
  * @param r The given randomize-number
@@ -504,9 +507,32 @@
  */
 static inline bool CHANCE16I(const uint a, const uint b, const uint32 r)
 {
-	return (uint16)r <= (uint16)((65536 * a) / b);
+	return (uint16)r < (uint16)((65536 * a) / b);
 }
 
+/**
+ * Checks if a part of a random number is below a given probability.
+ *
+ * This macro is used to check if the given probability by the fraction of (a/b)
+ * is greater than a part of the given random number. Unused bits
+ * of the number can be reused in subsequent calls, thus saving on
+ * calling PRNG again. To do that, shift right the random number after
+ * using this macro.
+ *
+ * @note You need to make sure that number of bits requested is enough and
+ * have high enough resolution (ie. don't use for probabilities other
+ * than p/2^@p k unless you know what you're doing). You also need to keep
+ * track of the number of bits used yourself. It's much safer to use
+ * @see CHANCE16(), so this macro is mostly useful under under stringent
+ * performance constraints.
+ *
+ * @param a The numerator of the fraction, @see CHANCE16().
+ * @param b The denominator of the fraction, @see CHANCE16().
+ * @param r The given random number (needs to be an l-value).
+ * @param k The number of bits to use.
+ * @return True if the probability test passed.
+ */
+#define CHANCE_IP(a, b, r, k) (r & ((1 << (k)) - 1)) < (((1 << (k)) * (a)) / (b))
 
 #define for_each_bit(_i, _b)            \
 	for (_i = 0; _b != 0; _i++, _b >>= 1) \
