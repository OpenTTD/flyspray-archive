Index: src/town_cmd.cpp
===================================================================
--- src/town_cmd.cpp	(revision 10155)
+++ src/town_cmd.cpp	(working copy)
@@ -383,6 +383,7 @@
 	 * doesn't exist any more, so don't continue here. */
 	if (house_id >= NEW_HOUSE_OFFSET && !NewHouseTileLoop(tile)) return;
 
+	/* TODO: check for potential bug with multitile houses being constructed too fast */
 	if (!IsHouseCompleted(tile)) {
 		/* Construction is not completed. See if we can go further in construction*/
 		MakeTownHouseBigger(tile);
@@ -396,11 +397,13 @@
 			CHANCE16(1, 2))
 		AddAnimatedTile(tile);
 
-	t = GetTownByTile(tile);
-
+	/* Initializing a few vars for cargo generation */
+	t = GetTownByTile(tile); // gets the town this tile is a part of
 	r = Random();
 
+	/* Generate cargo */
 	if (HASBIT(hs->callback_mask, CBM_HOUSE_PRODUCE_CARGO)) {
+		/* It is a newGRF so it gets special treatment */
 		for (uint i = 0; i < 256; i++) {
 			uint16 callback = GetHouseCallback(CBID_HOUSE_PRODUCE_CARGO, i, r, house_id, t, tile);
 
@@ -430,6 +433,7 @@
 			}
 		}
 	} else {
+		/* It's an old fashioned TTD house */
 		if (GB(r, 0, 8) < hs->population) {
 			uint amt = GB(r, 0, 8) / 8 + 1;
 			uint moved;
@@ -451,21 +455,26 @@
 		}
 	}
 
+	/* Setting the current player to town so that anything changed will be done by the town */
 	_current_player = OWNER_TOWN;
 
+	/* Tearing down old buildings and building new ones */
 	if (hs->building_flags & BUILDING_HAS_1_TILE &&
 			HASBIT(t->flags12, TOWN_IS_FUNDED) &&
 			CanDeleteHouse(tile) &&
 			max(_cur_year - GetHouseConstructionYear(tile), 0) >= hs->minimum_life &&
 			--t->time_until_rebuild == 0) {
+		/* Generate a random period for the new house to stand */
 		t->time_until_rebuild = GB(r, 16, 8) + 192;
 
+		/* Clear the old house */
 		ClearTownHouse(t, tile);
 
 		/* Rebuild with another house? */
 		if (GB(r, 24, 8) >= 12) DoBuildTownHouse(t, tile);
 	}
 
+	/* Resetting the player to none when we are done */
 	_current_player = OWNER_NONE;
 }
 
@@ -597,6 +606,7 @@
 	RB_TILE_DIST2,     ///< 2 tiles between
 };
 
+/* Forward declaration of the method GrowTown */
 static bool GrowTown(Town *t);
 
 static void TownTickHandler(Town *t)
@@ -831,8 +841,7 @@
 }
 
 /**
- * Check there are enougth neighbor house tiles next to the current tile
- *
+ * Check there are enough neighbor house tiles next to the current tile
  * @param tile current tile
  * @return true if there are more than 2 house tiles next
  *  to the current one
