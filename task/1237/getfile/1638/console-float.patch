Index: src/console.cpp
===================================================================
--- src/console.cpp	(revision 11121)
+++ src/console.cpp	(working copy)
@@ -876,6 +876,22 @@
 }
 
 /**
+ * Set a new value to a float-type variable.
+ * @param *var the variable in question
+ * @param *value the new value
+ */
+static void IConsoleVarSetFloatvalue(const IConsoleVar *var, const char *value){
+	if (var->type != ICONSOLE_VAR_FLOAT || var->addr == NULL) return;
+	
+	IConsoleHookHandle(&var->hook, ICONSOLE_HOOK_PRE_ACTION);
+//FIXME error handling	
+	sscanf(value, "%lf", (double*)var->addr);
+	
+	IConsoleHookHandle(&var->hook, ICONSOLE_HOOK_POST_ACTION);
+	IConsoleVarPrintSetValue(var);
+}
+
+/**
  * Query the current value of a variable and return it
  * @param *var the variable queried
  * @return current value of the variable
@@ -939,6 +955,9 @@
 		case ICONSOLE_VAR_STRING:
 			value = (char*)var->addr;
 			break;
+		case ICONSOLE_VAR_FLOAT:
+			snprintf(tempres, sizeof(tempres), "%f", *(double*)var->addr);
+			break;
 		default: NOT_REACHED();
 	}
 
@@ -1007,7 +1026,10 @@
 		if (var->type == ICONSOLE_VAR_STRING) {
 			IConsoleVarSetStringvalue(var, token[t_index - tokencount]);
 			return;
-		} else if (GetArgumentInteger(&value, token[t_index - tokencount])) {
+		}else if (var->type == ICONSOLE_VAR_FLOAT) {
+			IConsoleVarSetFloatvalue(var, token[t_index - tokencount]);
+			return;
+		}else if (GetArgumentInteger(&value, token[t_index - tokencount])) {
 			IConsoleVarSetValue(var, value);
 			return;
 		}
Index: src/console.h
===================================================================
--- src/console.h	(revision 11121)
+++ src/console.h	(working copy)
@@ -17,7 +17,8 @@
 	ICONSOLE_VAR_UINT32,
 	ICONSOLE_VAR_INT16,
 	ICONSOLE_VAR_INT32,
-	ICONSOLE_VAR_STRING
+	ICONSOLE_VAR_STRING,
+	ICONSOLE_VAR_FLOAT
 };
 
 enum IConsoleModes {
