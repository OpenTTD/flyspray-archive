Index: ai/ai.h
===================================================================
--- ai/ai.h	(revision 3746)
+++ ai/ai.h	(working copy)
@@ -20,20 +20,20 @@
 
 /* The struct for an AIScript Player */
 typedef struct AIPlayer {
-	bool active;            //! Is this AI active?
-	AICommand *queue;       //! The commands that he has in his queue
-	AICommand *queue_tail;  //! The tail of this queue
+	bool active;            ///< Is this AI active?
+	AICommand *queue;       ///< The commands that he has in his queue
+	AICommand *queue_tail;  ///< The tail of this queue
 } AIPlayer;
 
 /* The struct to keep some data about the AI in general */
 typedef struct AIStruct {
 	/* General */
-	bool enabled;           //! Is AI enabled?
-	uint tick;              //! The current tick (something like _frame_counter, only for AIs)
+	bool enabled;           ///< Is AI enabled?
+	uint tick;              ///< The current tick (something like _frame_counter, only for AIs)
 
 	/* For network-clients (a OpenTTD client who acts as an AI connected to a server) */
-	bool network_client;    //! Are we a network_client?
-	uint8 network_playas;   //! The current network player we are connected as
+	bool network_client;    ///< Are we a network_client?
+	uint8 network_playas;   ///< The current network player we are connected as
 } AIStruct;
 
 VARDEF AIStruct _ai;
Index: industry_cmd.c
===================================================================
--- industry_cmd.c	(revision 3746)
+++ industry_cmd.c	(working copy)
@@ -90,9 +90,9 @@
 #include "table/build_industry.h"
 
 typedef enum IndustryType {
-	INDUSTRY_NOT_CLOSABLE,     //! Industry can never close
-	INDUSTRY_PRODUCTION,       //! Industry can close and change of production
-	INDUSTRY_CLOSABLE,         //! Industry can only close (no production change)
+	INDUSTRY_NOT_CLOSABLE,     ///< Industry can never close
+	INDUSTRY_PRODUCTION,       ///< Industry can close and change of production
+	INDUSTRY_CLOSABLE,         ///< Industry can only close (no production change)
 } IndustryType;
 
 
Index: misc.c
===================================================================
--- misc.c	(revision 3746)
+++ misc.c	(working copy)
@@ -609,10 +609,10 @@
 	return i;
 }
 
-//!We're writing an own sort algorithm here, as
-//!qsort isn't stable
-//!Since the number of elements will be low, a
-//!simple bubble sort will have to do :)
+/// @note We're writing an own sort algorithm here, as
+/// @note qsort isn't stable
+/// @note Since the number of elements will be low, a
+/// @note simple bubble sort will have to do :)
 
 void bubblesort(void *base, size_t nmemb, size_t size, int(*compar)(const void *, const void *))
 {
Index: network.h
===================================================================
--- network.h	(revision 3746)
+++ network.h	(working copy)
@@ -170,8 +170,8 @@
 VARDEF char _network_server_password[NETWORK_PASSWORD_LENGTH];
 VARDEF char _network_rcon_password[NETWORK_PASSWORD_LENGTH];
 
-VARDEF uint16 _network_max_join_time;             //! Time a client can max take to join
-VARDEF bool _network_pause_on_join;               //! Pause the game when a client tries to join (more chance of succeeding join)
+VARDEF uint16 _network_max_join_time;             ///< Time a client can max take to join
+VARDEF bool _network_pause_on_join;               ///< Pause the game when a client tries to join (more chance of succeeding join)
 
 VARDEF uint16 _redirect_console_to_client;
 
Index: oldloader.c
===================================================================
--- oldloader.c	(revision 3746)
+++ oldloader.c	(working copy)
@@ -44,12 +44,12 @@
 typedef bool OldChunkProc(LoadgameState *ls, int num);
 
 typedef struct OldChunks {
-	uint32 type;         //! Type of field
-	uint32 amount;       //! Amount of fields
+	uint32 type;         ///< Type of field
+	uint32 amount;       ///< Amount of fields
 
-	void *ptr;           //! Pointer where to save the data (may only be set if offset is 0)
-	uint offset;         //! Offset from basepointer (may only be set if ptr is NULL)
-	OldChunkProc *proc;  //! Pointer to function that is called with OC_CHUNK
+	void *ptr;           ///< Pointer where to save the data (may only be set if offset is 0)
+	uint offset;         ///< Offset from basepointer (may only be set if ptr is NULL)
+	OldChunkProc *proc;  ///< Pointer to function that is called with OC_CHUNK
 } OldChunks;
 
 /* OldChunk-Type */
Index: openttd.h
===================================================================
--- openttd.h	(revision 3746)
+++ openttd.h	(working copy)
@@ -65,11 +65,11 @@
 typedef byte OrderID;
 typedef byte CargoID;
 typedef uint16 StringID;
-typedef uint32 SpriteID;    //! The number of a sprite, without mapping bits and colortables
-typedef uint32 PalSpriteID; //! The number of a sprite plus all the mapping bits and colortables
+typedef uint32 SpriteID;    ///< The number of a sprite, without mapping bits and colortables
+typedef uint32 PalSpriteID; ///< The number of a sprite plus all the mapping bits and colortables
 typedef uint32 CursorID;
-typedef uint16 EngineID; //! All enginenumbers should be of this type
-typedef uint16 UnitID;   //! All unitnumber stuff is of this type (or anyway, should be)
+typedef uint16 EngineID; ///< All enginenumbers should be of this type
+typedef uint16 UnitID;   ///< All unitnumber stuff is of this type (or anyway, should be)
 
 typedef uint32 WindowNumber;
 typedef byte WindowClass;
Index: order.h
===================================================================
--- order.h	(revision 3746)
+++ order.h	(working copy)
@@ -85,9 +85,9 @@
 	uint8  flags;
 	uint16 station;
 
-	struct Order *next;   //! Pointer to next order. If NULL, end of list
+	struct Order *next;   ///< Pointer to next order. If NULL, end of list
 
-	uint16 index;         //! Index of the order, is not saved or anything, just for reference
+	uint16 index;         ///< Index of the order, is not saved or anything, just for reference
 } Order;
 
 #define MAX_BACKUP_ORDER_COUNT 40
Index: pool.h
===================================================================
--- pool.h	(revision 3746)
+++ pool.h	(working copy)
@@ -14,19 +14,19 @@
  *  please try to avoid manual calls!
  */
 struct MemoryPool {
-	const char name[10];        //! Name of the pool (just for debugging)
+	const char name[10];        ///< Name of the pool (just for debugging)
 
-	const uint max_blocks;      //! The max amount of blocks this pool can have
-	const uint block_size_bits; //! The size of each block in bits
-	const uint item_size;       //! How many bytes one block is
+	const uint max_blocks;      ///< The max amount of blocks this pool can have
+	const uint block_size_bits; ///< The size of each block in bits
+	const uint item_size;       ///< How many bytes one block is
 
+	/// Pointer to a function that is called after a new block is added
 	MemoryPoolNewBlock *new_block_proc;
-	//!< Pointer to a function that is called after a new block is added
 
-	uint current_blocks;        //! How many blocks we have in our pool
-	uint total_items;           //! How many items we now have in this pool
+	uint current_blocks;        ///< How many blocks we have in our pool
+	uint total_items;           ///< How many items we now have in this pool
 
-	byte **blocks;              //! An array of blocks (one block hold all the items)
+	byte **blocks;              ///< An array of blocks (one block hold all the items)
 };
 
 /**
Index: vehicle.c
===================================================================
--- vehicle.c	(revision 3746)
+++ vehicle.c	(working copy)
@@ -64,7 +64,7 @@
 	VEHICLES_POOL_BLOCK_SIZE_BITS = 9,       /* In bits, so (1 << 9) == 512 */
 	VEHICLES_POOL_MAX_BLOCKS      = 125,
 
-	BLOCKS_FOR_SPECIAL_VEHICLES   = 2, //! Blocks needed for special vehicles
+	BLOCKS_FOR_SPECIAL_VEHICLES   = 2, ///< Blocks needed for special vehicles
 };
 
 /**
Index: vehicle.h
===================================================================
--- vehicle.h	(revision 3746)
+++ vehicle.h	(working copy)
@@ -185,14 +185,14 @@
 	byte tick_counter;// increased by one for each tick
 
 	/* Begin Order-stuff */
-	Order current_order;     //! The current order (+ status, like: loading)
-	OrderID cur_order_index; //! The index to the current order
+	Order current_order;     ///< The current order (+ status, like: loading)
+	OrderID cur_order_index; ///< The index to the current order
 
-	Order *orders;           //! Pointer to the first order for this vehicle
-	OrderID num_orders;      //! How many orders there are in the list
+	Order *orders;           ///< Pointer to the first order for this vehicle
+	OrderID num_orders;      ///< How many orders there are in the list
 
-	Vehicle *next_shared;    //! If not NULL, this points to the next vehicle that shared the order
-	Vehicle *prev_shared;    //! If not NULL, this points to the prev vehicle that shared the order
+	Vehicle *next_shared;    ///< If not NULL, this points to the next vehicle that shared the order
+	Vehicle *prev_shared;    ///< If not NULL, this points to the prev vehicle that shared the order
 	/* End Order-stuff */
 
 	// Boundaries for the current position in the world and a next hash link.
