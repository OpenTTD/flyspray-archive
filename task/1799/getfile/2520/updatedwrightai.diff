Index: bin/ai/wrightai/main.nut
===================================================================
--- bin/ai/wrightai/main.nut	(revision 12231)
+++ bin/ai/wrightai/main.nut	(working copy)
@@ -1,12 +1,15 @@
 
 class WrightAI extends AIController {
-	name = null;
+	name = "NewWrightAI";
 	towns_used = null;
 	route_1 = null;
 	route_2 = null;
 	distance_of_route = {};
 	vehicle_to_depot = {};
 	delay_build_airport_route = 1000;
+	determined_name = false;
+	/* As there can only be 8 AI's, this should be enough for the moment */
+	number_names = ["0", "First", "Second", "Third", "Fourth", "Fifth", "Sixth", "Seventh", "Eighth"];
 
 	function Start();
 	function Stop();
@@ -57,19 +60,23 @@
 	local tile_1 = this.FindSuitableAirportSpot(airport_type, 0);
 	if (tile_1 < 0) return -1;
 	local tile_2 = this.FindSuitableAirportSpot(airport_type, tile_1);
-	/* XXX -- If tile_2 isn't found, tile_1 town is added to used list, but never really used */
-	if (tile_2 < 0) return -2;
+	if (tile_2 < 0) {
+		this.towns_used.RemoveValue(tile_1);
+		return -2;
+	}
 
 	/* Build the airports for real */
 	if (!AIAirport.BuildAirport(tile_1, airport_type)) {
 		print(this.name + ": [ERROR] Although the testing told us we could build 2 airports, it still failed on the first airport at tile " + tile_1 + ".");
-		/* XXX -- We should free the towns again for an other day */
+		this.towns_used.RemoveValue(tile_1);
+		this.towns_used.RemoveValue(tile_2);
 		return -3;
 	}
 	if (!AIAirport.BuildAirport(tile_2, airport_type)) {
 		print(this.name + ": [ERROR] Although the testing told us we could build 2 airports, it still failed on the second airport at tile " + tile_2 + ".");
 		AIAirport.RemoveAirport(tile_1);
-		/* XXX -- We should free the towns again for an other day */
+		this.towns_used.RemoveValue(tile_1);
+		this.towns_used.RemoveValue(tile_2);
 		return -4;
 	}
 
@@ -77,7 +84,8 @@
 	if (ret < 0) {
 		AIAirport.RemoveAirport(tile_1);
 		AIAirport.RemoveAirport(tile_2);
-		/* XXX -- We should free the towns again for an other day */
+		this.towns_used.RemoveValue(tile_1);
+		this.towns_used.RemoveValue(tile_2);
 		return ret;
 	}
 
@@ -85,7 +93,6 @@
 	return ret;
 }
 
-
 /**
  * Build an aircraft with orders from tile_1 to tile_2.
  *  The best available aircraft of that time will be bought.
@@ -164,8 +171,12 @@
 
 		/* Create a 30x30 grid around the core of the town and see if we can find a spot for a small airport */
 		local list = AITileList();
-		/* XXX -- We assume we are more than 15 tiles away from the border! */
-		list.AddRectangle(tile - AIMap.GetTileIndex(15, 15), tile + AIMap.GetTileIndex(15, 15));
+		if (AIMap.IsValidTile(tile - AIMap.GetTileIndex(15, 15)) && AIMap.IsValidTile(tile + AIMap.GetTileIndex(15, 15))) {
+			list.AddRectangle(tile - AIMap.GetTileIndex(15, 15), tile + AIMap.GetTileIndex(15, 15));
+		}
+		else {
+			continue;
+		}
 		list.Valuate(AITileListBuildableRectangle(airport_x, airport_y));
 		list.KeepValue(1);
 		if (center_tile != 0) {
@@ -195,10 +206,18 @@
 			if (good_tile == 0) continue;
 		}
 
+		/* If this is the first airport, name the AI to the town */
+		if (!this.determined_name)
+		{
+			this.ChangeName(AITown.GetName(town) + " Air");
+			this.determined_name = true;
+		}
+
 		print(this.name + ": [INFO] Found a good spot for an airport in town " + town + " at tile " + tile);
 
 		/* Make the town as used, so we don't use it again */
 		this.towns_used.AddItem(town, tile);
+
 		return tile;
 	}
 
@@ -231,15 +250,7 @@
 				print(this.name + ": [INFO] Selling " + i + " as it finally is in a depot.");
 				/* Check if we are the last one serving those airports; else sell the airports */
 				local list2 = AIVehicleList_Station(AIStation.GetStationID(this.route_1.GetValue(i)));
-				if (list2.Count() == 0) {
-					/* Remove the airports */
-					print(this.name + ": [INFO] Removing airports as nobody serves them anymore.");
-					AIAirport.RemoveAirport(this.route_1.GetValue(i));
-					AIAirport.RemoveAirport(this.route_2.GetValue(i));
-					this.route_1.RemoveItem(i);
-					this.route_2.RemoveItem(i);
-					/* XXX -- We should free the towns_used entries too */
-				}
+				if (list2.Count() == 0) this.SellAirports(i);
 				vehicle_to_depot.rawdelete(i);
 			}
 		}
@@ -254,9 +265,11 @@
 
 	for (local i = list.Begin(); list.HasNext(); i = list.Next()) {
 		local list2 = AIVehicleList_Station(i);
-		/* No vehicles going to this station, abort */
-		/* TODO -- Sell station */
-		if (list2.Count() == 0) continue;
+		/* No vehicles going to this station, abort and sell */
+		if (list2.Count() == 0) {
+			this.SellAirports(i);
+			continue;
+		};
 
 		/* Find the first vehicle that is going to this station */
 		local v = list2.Begin();
@@ -276,6 +289,23 @@
 	}
 }
 
+/** 
+  * Sells the airports from route index i
+  * Removes towns from towns_used list too
+  */
+function WrightAI::SellAirports(i) {
+	/* Remove the airports */
+	print(this.name + ": [INFO] Removing airports as nobody serves them anymore.");
+	AIAirport.RemoveAirport(this.route_1.GetValue(i));
+	AIAirport.RemoveAirport(this.route_2.GetValue(i));
+	/* Free the towns_used entries */
+	this.towns_used.RemoveValue(this.route_1.GetValue(i));
+	this.towns_used.RemoveValue(this.route_2.GetValue(i));
+	/* Remove the route */
+	this.route_1.RemoveItem(i);
+	this.route_2.RemoveItem(i);
+}
+
 function WrightAI::HandleEvents()
 {
 	while (AIEventController.IsEventWaiting()) {
@@ -296,19 +326,26 @@
 	}
 }
 
+/**
+  * Let the AI change its name
+ */
+function WrightAI::ChangeName(name)
+{
+	print(this.name + ": Trying to change name to " + name);
+	if( !AICompany.SetCompanyName(name)) {
+		local i = 2;
+		while (!AICompany.SetCompanyName(this.number_names[i] + " " + name)) 
+			i++;
+	}
+	this.name = AICompany.GetCompanyName(AICompany.MY_COMPANY);
+}
+
 function WrightAI::Start()
 {
 	/* Sleep 1 tick, as we can't execute anything in tick 0 */
 	Sleep(1);
 
-	/* Give the boy a name */
-	if (!AICompany.SetCompanyName("WrightAI")) {
-		local i = 2;
-		while (!AICompany.SetCompanyName("WrightAI #" + i)) {
-			i++;
-		}
-	}
-	this.name = AICompany.GetCompanyName(AICompany.MY_COMPANY);
+	/* Say hello to the user */
 	print(this.name + ": Welcome to WrightAI. I will be building airports all day long.");
 
 	/* We start with almost no loan, and we take a loan when we want to build something */
@@ -324,12 +361,19 @@
 	/* Let's go on for ever */
 	while (true) {
 		/* Once in a while, with enough money, try to build something */
-		if (ticker % this.delay_build_airport_route == 0 && this.HasMoney(100000)) {
+		if ((ticker % this.delay_build_airport_route == 0 || ticker == 0) && this.HasMoney(100000)) {
 			local ret = this.BuildAirportRoute();
-			if (ret == -1) {
+			if (ret == -1 && ticker != 0) {
 				/* No more route found, delay even more before trying to find an other */
 				this.delay_build_airport_route = 10000;
 			}
+			else if (ret < 0 && ticker == 0) {
+				/* The AI failed to build a first airport and is deemed */
+				this.ChangeName("FailedWrightAI");
+				print(this.name + ": Failed to build a first airport route, now giving up building, repaying loan, have a nice day!");
+				AICompany.SetLoanAmount(0);
+				return;
+			}
 		}
 		/* Manage the routes once in a while */
 		if (ticker % 2000 == 0) {
@@ -357,7 +401,7 @@
 	function GetAuthor()      { return "OpenTTD Dev Team"; }
 	function GetName()        { return "WrightAI"; }
 	function GetDescription() { return "A simple AI that tries to beat you with only aircrafts"; }
-	function GetVersion()     { return 1; }
+	function GetVersion()     { return 1.1; }
 	function GetDate()        { return "2007-11-18"; }
 	function CreateInstance() { return "WrightAI"; }
 }
