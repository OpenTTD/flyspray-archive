Index: variables.h
===================================================================
--- variables.h	(revision 6411)
+++ variables.h	(working copy)
@@ -339,6 +339,8 @@
 VARDEF char _savegame_format[8];
 
 VARDEF char *_config_file;
+// script passed by -z commandline option to be run instead of autoexec.scr
+VARDEF char *_script_filename;
 VARDEF char *_highscore_file;
 VARDEF char *_log_file;
 
Index: openttd.c
===================================================================
--- openttd.c	(revision 6411)
+++ openttd.c	(working copy)
@@ -156,6 +156,7 @@
 		"  -i                  = Force to use the DOS palette\n"
 		"                          (use this if you see a lot of pink)\n"
 		"  -c config_file      = Use 'config_file' instead of 'openttd.cfg'\n"
+		"  -x script_file      = Use 'script_file' instead of 'autoexec.scr'\n"
 		"\n"
 	);
 
@@ -335,11 +336,11 @@
 	_dedicated_forks = false;
 	_config_file = NULL;
 
-	// The last param of the following function means this:
-	//   a letter means: it accepts that param (e.g.: -h)
-	//   a ':' behind it means: it need a param (e.g.: -m<driver>)
-	//   a '::' behind it means: it can optional have a param (e.g.: -d<debug>)
-	optformat = "bm:s:v:hDn::eit:d::r:g::G:c:"
+	// The last param. of the following function means this:
+	//   a letter means it accepts that param. (e.g.: -h)
+	//   a ':' after it means it needs a param. (e.g.: -m<driver>)
+	//   a '::' after it means it can optionally have a param. (e.g.: -d<debug>)
+	optformat = "bm:s:v:hDn::eit:d::r:g::G:c:x:"
 #if !defined(__MORPHOS__) && !defined(__AMIGA__) && !defined(WIN32)
 		"f"
 #endif
@@ -383,6 +384,7 @@
 			break;
 		case 'G': generation_seed = atoi(mgo.opt); break;
 		case 'c': _config_file = strdup(mgo.opt); break;
+		case 'x': _script_filename = strdup(mgo.opt); break;
 		case -2:
 		case 'h':
 			showhelp();
@@ -474,8 +476,23 @@
 	IConsoleInit();
 	_cursor.in_window = true;
 	InitializeGUI();
-	IConsoleCmdExec("exec scripts/autoexec.scr 0");
 
+	if (!_script_filename) {
+		// default to scripts/autoexec.scr
+		IConsoleCmdExec("exec scripts/autoexec.scr 0");
+	} else {
+		// create console command to exec _script_filename
+		char *exec_script_file = (char *) malloc(strlen("exec ") + strlen(_script_filename) + strlen(" 0"));
+		strcpy(exec_script_file, "exec ");
+		strcat(exec_script_file, _script_filename);
+		strcat(exec_script_file, " 0");
+
+		// execute the desired script
+		IConsoleCmdExec(exec_script_file);
+
+		free(exec_script_file);
+	}
+
 	GenerateWorld(GW_EMPTY, 64, 64); // Make the viewport initialization happy
 	WaitTillGeneratedWorld();
 
