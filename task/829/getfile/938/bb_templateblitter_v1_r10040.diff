Index: src/gfx.cpp
===================================================================
--- src/gfx.cpp	(revision 10040)
+++ src/gfx.cpp	(working copy)
@@ -790,7 +790,8 @@
 	}
 }
 
-static void GfxBlitTileZoom(BlitterParams *bp, ZoomLevel zoom)
+template<ZoomLevel zoom,BlitterMode mode>
+static void GfxBlitTileZoom(BlitterParams *bp)
 {
 	const byte *src_o = bp->sprite;
 	const byte *src;
@@ -856,7 +857,7 @@
 
 			num = UnScaleByZoom(num + ScaleByZoom(1, zoom) - 1, zoom);
 
-			switch (bp->mode) {
+			switch (mode) {
 				case BM_COLOUR_REMAP:
 					ctab = _color_remap_ptr;
 					for (; num != 0; num--) {
@@ -899,6 +900,68 @@
 	}
 }
 
+static void GfxBlitTileZoom(BlitterParams *bp, ZoomLevel zoom)
+{
+	switch(zoom)
+	{
+	case ZOOM_LVL_NORMAL:
+		switch(bp->mode)
+		{
+		case BM_COLOUR_REMAP:
+			GfxBlitTileZoom<ZOOM_LVL_NORMAL,BM_COLOUR_REMAP>( bp ); return;
+		case BM_TRANSPARENT:
+			GfxBlitTileZoom<ZOOM_LVL_NORMAL,BM_TRANSPARENT>( bp ); return;
+		case BM_NORMAL:
+			GfxBlitTileZoom<ZOOM_LVL_NORMAL,BM_NORMAL>( bp ); return;
+		}
+		break;
+	case ZOOM_LVL_OUT_2X:
+		switch(bp->mode)
+		{
+		case BM_COLOUR_REMAP:
+			GfxBlitTileZoom<ZOOM_LVL_OUT_2X,BM_COLOUR_REMAP>( bp ); return;
+		case BM_TRANSPARENT:
+			GfxBlitTileZoom<ZOOM_LVL_OUT_2X,BM_TRANSPARENT>( bp ); return;
+		case BM_NORMAL:
+			GfxBlitTileZoom<ZOOM_LVL_OUT_2X,BM_NORMAL>( bp ); return;
+		}
+		break;
+	case ZOOM_LVL_OUT_4X:
+		switch(bp->mode)
+		{
+		case BM_COLOUR_REMAP:
+			GfxBlitTileZoom<ZOOM_LVL_OUT_4X,BM_COLOUR_REMAP>( bp ); return;
+		case BM_TRANSPARENT:
+			GfxBlitTileZoom<ZOOM_LVL_OUT_4X,BM_TRANSPARENT>( bp ); return;
+		case BM_NORMAL:
+			GfxBlitTileZoom<ZOOM_LVL_OUT_4X,BM_NORMAL>( bp ); return;
+		}
+		break;
+	case ZOOM_LVL_OUT_8X:
+		switch(bp->mode)
+		{
+		case BM_COLOUR_REMAP:
+			GfxBlitTileZoom<ZOOM_LVL_OUT_8X,BM_COLOUR_REMAP>( bp ); return;
+		case BM_TRANSPARENT:
+			GfxBlitTileZoom<ZOOM_LVL_OUT_8X,BM_TRANSPARENT>( bp ); return;
+		case BM_NORMAL:
+			GfxBlitTileZoom<ZOOM_LVL_OUT_8X,BM_NORMAL>( bp ); return;
+		}
+		break;
+	case ZOOM_LVL_OUT_16X:
+		switch(bp->mode)
+		{
+		case BM_COLOUR_REMAP:
+			GfxBlitTileZoom<ZOOM_LVL_OUT_16X,BM_COLOUR_REMAP>( bp ); return;
+		case BM_TRANSPARENT:
+			GfxBlitTileZoom<ZOOM_LVL_OUT_16X,BM_TRANSPARENT>( bp ); return;
+		case BM_NORMAL:
+			GfxBlitTileZoom<ZOOM_LVL_OUT_16X,BM_NORMAL>( bp ); return;
+		}
+		break;
+	}
+}
+
 static void GfxMainBlitter(const Sprite *sprite, int x, int y, BlitterMode mode)
 {
 	const DrawPixelInfo *dpi = _cur_dpi;
