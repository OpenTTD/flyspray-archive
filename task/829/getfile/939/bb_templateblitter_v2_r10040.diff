Index: src/gfx.cpp
===================================================================
--- src/gfx.cpp	(revision 10040)
+++ src/gfx.cpp	(working copy)
@@ -790,8 +790,39 @@
 	}
 }
 
-static void GfxBlitTileZoom(BlitterParams *bp, ZoomLevel zoom)
+/* blit_line implementation for any zoom level */
+template<ZoomLevel zoom>
+inline void blit_line(const byte* &src, byte* &dst, int& num)
 {
+	for (; num != 0; num--) {
+			*dst = *src;
+			dst++;
+			src += ScaleByZoom(1, zoom);
+	}
+}
+
+/* optimized blit_line implementation for zoom level 0 */
+template<>
+inline void blit_line<ZOOM_LVL_NORMAL>(const byte* &src, byte* &dst, int& num)
+{
+#if defined(_WIN32)
+	if (num & 1) *dst++ = *src++;
+	if (num & 2) { *(uint16*)dst = *(uint16*)src; dst += 2; src += 2; }
+	if (num >>= 2) {
+		do {
+			*(uint32*)dst = *(uint32*)src;
+			dst += 4;
+			src += 4;
+		} while (--num != 0);
+	}
+#else
+	memcpy(dst, src, num);
+#endif
+}
+
+template<ZoomLevel zoom,BlitterMode mode>
+static void GfxBlitTileZoom(BlitterParams *bp)
+{
 	const byte *src_o = bp->sprite;
 	const byte *src;
 	int num, skip;
@@ -856,7 +887,7 @@
 
 			num = UnScaleByZoom(num + ScaleByZoom(1, zoom) - 1, zoom);
 
-			switch (bp->mode) {
+			switch (mode) {
 				case BM_COLOUR_REMAP:
 					ctab = _color_remap_ptr;
 					for (; num != 0; num--) {
@@ -875,11 +906,7 @@
 					break;
 
 				default:
-					for (; num != 0; num--) {
-							*dst = *src;
-							dst++;
-							src += ScaleByZoom(1, zoom);
-					}
+					blit_line<zoom>( src, dst, num );
 					break;
 			}
 
@@ -899,6 +926,68 @@
 	}
 }
 
+static void GfxBlitTileZoom(BlitterParams *bp, ZoomLevel zoom)
+{
+	switch(zoom)
+	{
+	case ZOOM_LVL_NORMAL:
+		switch(bp->mode)
+		{
+		case BM_COLOUR_REMAP:
+			GfxBlitTileZoom<ZOOM_LVL_NORMAL,BM_COLOUR_REMAP>( bp ); return;
+		case BM_TRANSPARENT:
+			GfxBlitTileZoom<ZOOM_LVL_NORMAL,BM_TRANSPARENT>( bp ); return;
+		case BM_NORMAL:
+			GfxBlitTileZoom<ZOOM_LVL_NORMAL,BM_NORMAL>( bp ); return;
+		}
+		break;
+	case ZOOM_LVL_OUT_2X:
+		switch(bp->mode)
+		{
+		case BM_COLOUR_REMAP:
+			GfxBlitTileZoom<ZOOM_LVL_OUT_2X,BM_COLOUR_REMAP>( bp ); return;
+		case BM_TRANSPARENT:
+			GfxBlitTileZoom<ZOOM_LVL_OUT_2X,BM_TRANSPARENT>( bp ); return;
+		case BM_NORMAL:
+			GfxBlitTileZoom<ZOOM_LVL_OUT_2X,BM_NORMAL>( bp ); return;
+		}
+		break;
+	case ZOOM_LVL_OUT_4X:
+		switch(bp->mode)
+		{
+		case BM_COLOUR_REMAP:
+			GfxBlitTileZoom<ZOOM_LVL_OUT_4X,BM_COLOUR_REMAP>( bp ); return;
+		case BM_TRANSPARENT:
+			GfxBlitTileZoom<ZOOM_LVL_OUT_4X,BM_TRANSPARENT>( bp ); return;
+		case BM_NORMAL:
+			GfxBlitTileZoom<ZOOM_LVL_OUT_4X,BM_NORMAL>( bp ); return;
+		}
+		break;
+	case ZOOM_LVL_OUT_8X:
+		switch(bp->mode)
+		{
+		case BM_COLOUR_REMAP:
+			GfxBlitTileZoom<ZOOM_LVL_OUT_8X,BM_COLOUR_REMAP>( bp ); return;
+		case BM_TRANSPARENT:
+			GfxBlitTileZoom<ZOOM_LVL_OUT_8X,BM_TRANSPARENT>( bp ); return;
+		case BM_NORMAL:
+			GfxBlitTileZoom<ZOOM_LVL_OUT_8X,BM_NORMAL>( bp ); return;
+		}
+		break;
+	case ZOOM_LVL_OUT_16X:
+		switch(bp->mode)
+		{
+		case BM_COLOUR_REMAP:
+			GfxBlitTileZoom<ZOOM_LVL_OUT_16X,BM_COLOUR_REMAP>( bp ); return;
+		case BM_TRANSPARENT:
+			GfxBlitTileZoom<ZOOM_LVL_OUT_16X,BM_TRANSPARENT>( bp ); return;
+		case BM_NORMAL:
+			GfxBlitTileZoom<ZOOM_LVL_OUT_16X,BM_NORMAL>( bp ); return;
+		}
+		break;
+	}
+}
+
 static void GfxMainBlitter(const Sprite *sprite, int x, int y, BlitterMode mode)
 {
 	const DrawPixelInfo *dpi = _cur_dpi;
