# HG changeset patch
# Parent 47f29213c757c4f94bade67d5c5a8b07d2230df1

diff --git a/src/pathfinder/follow_track.hpp b/src/pathfinder/follow_track.hpp
--- a/src/pathfinder/follow_track.hpp
+++ b/src/pathfinder/follow_track.hpp
@@ -88,13 +88,13 @@
 		m_railtypes = railtype_override;
 	}
 
-	inline static TransportType TT() {return Ttr_type_;}
-	inline static bool IsWaterTT() {return TT() == TRANSPORT_WATER;}
-	inline static bool IsRailTT() {return TT() == TRANSPORT_RAIL;}
-	inline bool IsTram() {return IsRoadTT() && HasBit(RoadVehicle::From(m_veh)->compatible_roadtypes, ROADTYPE_TRAM);}
-	inline static bool IsRoadTT() {return TT() == TRANSPORT_ROAD;}
-	inline static bool Allow90degTurns() {return T90deg_turns_allowed_;}
-	inline static bool DoTrackMasking() {return IsRailTT() && Tmask_reserved_tracks;}
+	inline static TransportType TT() { return Ttr_type_; }
+	inline static bool IsWaterTT() { return TT() == TRANSPORT_WATER; }
+	inline static bool IsRailTT() { return TT() == TRANSPORT_RAIL; }
+	inline bool IsTram() { return IsRoadTT() && HasBit(RoadVehicle::From(m_veh)->compatible_roadtypes, ROADTYPE_TRAM); }
+	inline static bool IsRoadTT() { return TT() == TRANSPORT_ROAD; }
+	inline static bool Allow90degTurns() { return T90deg_turns_allowed_; }
+	inline static bool DoTrackMasking() { return IsRailTT() && Tmask_reserved_tracks; }
 
 	/** Tests if a tile is a road tile with a single tramtrack (tram can reverse) */
 	inline DiagDirection GetSingleTramBit(TileIndex tile)
