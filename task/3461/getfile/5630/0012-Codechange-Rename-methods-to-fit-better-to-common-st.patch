From 598c63320da28fb53353686b97f8ee0dfb475f86 Mon Sep 17 00:00:00 2001
From: Skidd13 <skidd13@gmx.de>
Date: Fri, 19 Feb 2010 23:40:37 +0100
Subject: [PATCH 12/12] -Codechange: Rename methods to fit better to common style

---
 src/misc/binaryheap.hpp          |    8 ++++----
 src/pathfinder/yapf/nodelist.hpp |    6 +++---
 2 files changed, 7 insertions(+), 7 deletions(-)

diff --git a/src/misc/binaryheap.hpp b/src/misc/binaryheap.hpp
index d9f8c42..7168cd0 100644
--- a/src/misc/binaryheap.hpp
+++ b/src/misc/binaryheap.hpp
@@ -148,7 +148,7 @@ public:
 	 *
 	 *  @return The number of items in the queue
 	 */
-	FORCEINLINE uint Size() const { return this->items; }
+	FORCEINLINE uint Length() const { return this->items; }
 
 	/**
 	 * Test if the priority queue is empty.
@@ -192,7 +192,7 @@ public:
 	 *
 	 * @param new_item The pointer to the new item
 	 */
-	FORCEINLINE void Push(T *new_item)
+	FORCEINLINE void Include(T *new_item)
 	{
 		if (this->IsFull()) {
 			this->capacity *= 2;
@@ -233,7 +233,7 @@ public:
 	 *
 	 * @param index The position of the item in the heap
 	 */
-	FORCEINLINE void RemoveByIdx(uint index)
+	FORCEINLINE void Remove(uint index)
 	{
 		if (index < this->items) {
 			assert(index != 0);
@@ -261,7 +261,7 @@ public:
 	 * @param item The reference to the item
 	 * @return The index of the item or zero if not found
 	 */
-	FORCEINLINE uint FindLinear(const T &item) const
+	FORCEINLINE uint FindIndex(const T &item) const
 	{
 		if (this->IsEmpty()) return 0;
 		for (T **ppI = this->data + 1, **ppLast = ppI + this->items; ppI <= ppLast; ppI++) {
diff --git a/src/pathfinder/yapf/nodelist.hpp b/src/pathfinder/yapf/nodelist.hpp
index 6ac3b94..87b2628 100644
--- a/src/pathfinder/yapf/nodelist.hpp
+++ b/src/pathfinder/yapf/nodelist.hpp
@@ -93,7 +93,7 @@ public:
 	{
 		assert(m_closed.Find(item.GetKey()) == NULL);
 		m_open.Push(item);
-		m_open_queue.Push(&item);
+		m_open_queue.Include(&item);
 		if (&item == m_new_node) {
 			m_new_node = NULL;
 		}
@@ -130,8 +130,8 @@ public:
 	FORCEINLINE Titem_& PopOpenNode(const Key& key)
 	{
 		Titem_& item = m_open.Pop(key);
-		int idxPop = m_open_queue.FindLinear(item);
-		m_open_queue.RemoveByIdx(idxPop);
+		uint idxPop = m_open_queue.FindIndex(item);
+		m_open_queue.Remove(idxPop);
 		return item;
 	}
 
-- 
1.6.6

