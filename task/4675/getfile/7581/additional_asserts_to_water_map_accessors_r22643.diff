--- src/water_map.h
+++ src/water_map.h
@@ -177,9 +177,11 @@
  * Is it a water tile with a ship depot on it?
  * @param t Water tile to query.
  * @return \c true if it is a ship depot tile.
+ * @pre IsTileType(t, MP_WATER)
  */
 static inline bool IsShipDepot(TileIndex t)
 {
+	assert(IsTileType(t, MP_WATER));
 	return IsInsideMM(_m[t].m5, // [0x80..0x83]
 			(1 << 7) + (AXIS_X << 1) + DEPOT_NORTH,
 			(1 << 7) + (AXIS_Y << 1) + DEPOT_END);
@@ -211,9 +213,11 @@
  * Get the axis of the ship depot.
  * @param t Water tile to query.
  * @return Axis of the depot.
+ * @pre IsShipDepotTile(t)
  */
 static inline Axis GetShipDepotAxis(TileIndex t)
 {
+	assert(IsShipDepotTile(t));
 	return (Axis)GB(_m[t].m5, 1, 1);
 }
 
@@ -254,9 +258,11 @@
  * Is there a lock on a given water tile?
  * @param t Water tile to query.
  * @return \c true if it is a water lock tile.
+ * @pre IsTileType(t, MP_WATER)
  */
 static inline bool IsLock(TileIndex t)
 {
+	assert(IsTileType(t, MP_WATER));
 	return IsInsideMM(_m[t].m5, // [0x10..0x1F]
 			(1 << 4) + (LOCK_MIDDLE    << 2) + DIAGDIR_BEGIN,
 			(1 << 4) + ((LOCK_END - 1) << 2) + DIAGDIR_END);
@@ -276,9 +282,11 @@
  * Get the direction of the water lock.
  * @param t Water tile to query.
  * @return Direction of the lock.
+ * @pre IsLockTile(t)
  */
 static inline DiagDirection GetLockDirection(TileIndex t)
 {
+	assert(IsLockTile(t));
 	return (DiagDirection)GB(_m[t].m5, 0, 2);
 }
 
@@ -334,9 +342,11 @@
  * Get the random bits of the water tile.
  * @param t Water tile to query.
  * @return Random bits of the tile.
+ * @pre IsTileType(t, MP_WATER)
  */
 static inline byte GetWaterTileRandomBits(TileIndex t)
 {
+	assert(IsTileType(t, MP_WATER));
 	return _m[t].m4;
 }
 
