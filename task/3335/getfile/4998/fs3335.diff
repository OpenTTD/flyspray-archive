Index: src/lang/greek.txt
===================================================================
--- src/lang/greek.txt	(revision 18431)
+++ src/lang/greek.txt	(working copy)
@@ -862,7 +862,7 @@
 STR_NEWS_INDUSTRY_CONSTRUCTION                                  :{BIGFONT}{BLACK}Νέ{G ος α ο} {STRING} υπό κατασκευή κοντά στην πόλη {TOWN}!
 STR_NEWS_INDUSTRY_PLANTED                                       :{BIGFONT}{BLACK}Νέα {STRING} φυτεύεται κοντά στην πόλη {TOWN}!
 
-STR_NEWS_INDUSTRY_CLOSURE_GENERAL                               :{BIGFONT}{BLACK}{G Ο Η Το} {STRING} ανακοίνωσε άμεσο κλείσιμο!
+STR_NEWS_INDUSTRY_CLOSURE_GENERAL                               :{BIGFONT}{BLACK}{G 0:2 Ο Η Το} {STRING} ανακοίνωσε άμεσο κλείσιμο!
 STR_NEWS_INDUSTRY_CLOSURE_SUPPLY_PROBLEMS                       :{BIGFONT}{BLACK}Προβλήματα στην προμήθεια υλικών αναγκάζουν {G το τη το} {STRING} να κλείσει αμέσως!
 STR_NEWS_INDUSTRY_CLOSURE_LACK_OF_TREES                         :{BIGFONT}{BLACK}Η έλλειψη δέντρων αναγκάζει την βιομηχανία {STRING} να κλείσει αμέσως!
 
Index: src/strgen/strgen.cpp
===================================================================
--- src/strgen/strgen.cpp	(revision 18431)
+++ src/strgen/strgen.cpp	(working copy)
@@ -245,7 +245,7 @@
 /* This is encoded like
  *  CommandByte <ARG#> <NUM> {Length of each string} {each string} */
 
-bool ParseRelNum(char **buf, int *value)
+bool ParseRelNum(char **buf, int *value, int *offset)
 {
 	const char *s = *buf;
 	char *end;
@@ -263,6 +263,12 @@
 	} else {
 		*value = v;
 	}
+	if (offset != NULL && *end == ':') {
+		/* Take the Nth within */
+		s = end + 1;
+		*offset = strtol(s, &end, 0);
+		if (end == s) return false;
+	}
 	*buf = end;
 	return true;
 }
@@ -303,7 +309,7 @@
 }
 
 /* Forward declaration */
-static int TranslateArgumentIdx(int arg);
+static int TranslateArgumentIdx(int arg, int offset = 0);
 
 static void EmitWordList(const char * const *words, uint nw)
 {
@@ -318,11 +324,12 @@
 static void EmitPlural(char *buf, int value)
 {
 	int argidx = _cur_argidx;
+	int offset = 0;
 	const char *words[5];
 	int nw = 0;
 
 	/* Parse out the number, if one exists. Otherwise default to prev arg. */
-	if (!ParseRelNum(&buf, &argidx)) argidx--;
+	if (!ParseRelNum(&buf, &argidx, &offset)) argidx--;
 
 	/* Parse each string */
 	for (nw = 0; nw < 5; nw++) {
@@ -351,7 +358,7 @@
 	}
 
 	PutUtf8(SCC_PLURAL_LIST);
-	PutByte(TranslateArgumentIdx(argidx));
+	PutByte(TranslateArgumentIdx(argidx, offset));
 	EmitWordList(words, nw);
 }
 
@@ -359,6 +366,7 @@
 static void EmitGender(char *buf, int value)
 {
 	int argidx = _cur_argidx;
+	int offset = 0;
 	uint nw;
 
 	if (buf[0] == '=') {
@@ -377,7 +385,7 @@
 
 		/* This is a {G 0 foo bar two} command.
 		 * If no relative number exists, default to +0 */
-		if (!ParseRelNum(&buf, &argidx)) {}
+		if (!ParseRelNum(&buf, &argidx, &offset)) {}
 
 		for (nw = 0; nw < MAX_NUM_GENDER; nw++) {
 			words[nw] = ParseWord(&buf);
@@ -385,7 +393,7 @@
 		}
 		if (nw != _numgenders) error("Bad # of arguments for gender command");
 		PutUtf8(SCC_GENDER_LIST);
-		PutByte(TranslateArgumentIdx(argidx));
+		PutByte(TranslateArgumentIdx(argidx, offset));
 		EmitWordList(words, nw);
 	}
 }
@@ -948,20 +956,25 @@
 	}
 }
 
-static int TranslateArgumentIdx(int argidx)
+static int TranslateArgumentIdx(int argidx, int offset)
 {
 	int sum;
 
 	if (argidx < 0 || (uint)argidx >= lengthof(_cur_pcs.cmd)) {
 		error("invalid argidx %d", argidx);
 	}
+	const CmdStruct *cs = _cur_pcs.cmd[argidx];
+	if (cs != NULL && cs->consumes <= offset) {
+		error("invalid argidx offset %d:%d\n", argidx, offset);
+	}
 
 	for (int i = sum = 0; i < argidx; i++) {
 		const CmdStruct *cs = _cur_pcs.cmd[i];
+
 		sum += (cs != NULL) ? cs->consumes : 1;
 	}
 
-	return sum;
+	return sum + offset;
 }
 
 static void PutArgidxCommand()
