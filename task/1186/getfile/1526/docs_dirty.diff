Index: src/functions.h
===================================================================
--- src/functions.h	(revision 11032)
+++ src/functions.h	(working copy)
@@ -103,7 +103,18 @@
 void ConvertNameArray();
 
 /* misc functions */
+/**
+ * Mark a tile given by its coordinate dirty for repaint.
+ *
+ * @ingroup dirty
+ */
 void MarkTileDirty(int x, int y);
+
+/**
+ * Mark a tile given by its index dirty for repaint.
+ *
+ * @ingroup dirty
+ */
 void MarkTileDirtyByTile(TileIndex tile);
 void InvalidateWindow(WindowClass cls, WindowNumber number);
 void InvalidateWindowWidget(WindowClass cls, WindowNumber number, byte widget_index);
@@ -124,6 +135,11 @@
 void DrawSprite(SpriteID img, SpriteID pal, int x, int y);
 bool EnsureNoVehicle(TileIndex tile);
 bool EnsureNoVehicleOnGround(TileIndex tile);
+/**
+ * Mark all viewports dirty for repaint.
+ *
+ * @ingroup dirty
+ */
 void MarkAllViewportsDirty(int left, int top, int right, int bottom);
 void ShowCostOrIncomeAnimation(int x, int y, int z, Money cost);
 void ShowFeederIncomeAnimation(int x, int y, int z, Money cost);
Index: src/station_cmd.cpp
===================================================================
--- src/station_cmd.cpp	(revision 11032)
+++ src/station_cmd.cpp	(working copy)
@@ -375,7 +375,14 @@
 	}
 }
 
-// Update the station virt coords while making the modified parts dirty.
+/**
+ * Update the station virt coords while making the modified parts dirty.
+ *
+ * This function updates the virt coords and mark the modified parts as dirty
+ *
+ * @param st The station to update the virt coords
+ * @ingroup dirty
+ */
 static void UpdateStationVirtCoordDirty(Station *st)
 {
 	st->MarkDirty();
Index: src/town_cmd.cpp
===================================================================
--- src/town_cmd.cpp	(revision 11032)
+++ src/town_cmd.cpp	(working copy)
@@ -256,8 +256,12 @@
 }
 
 /**
- * Marks the town sign as needing a repaint
- * @param t Town requesting repaint
+ * Marks the town sign as needing a repaint.
+ *
+ * This function marks the area of the sign of a town as dirty for repaint.
+ * 
+ * @param t Town requesting town sign for repaint
+ * @ingroup dirty
  */
 static void MarkTownSignDirty(Town *t)
 {
Index: src/vehicle.h
===================================================================
--- src/vehicle.h	(revision 11032)
+++ src/vehicle.h	(working copy)
@@ -380,6 +380,11 @@
 
 	/**
 	 * Marks the vehicles to be redrawn and updates cached variables
+	 *
+	 * This method marks the area of the vehicle on the screen as dirty.
+	 * It can be use to repaint the vehicle.
+	 *
+	 * @ingroup dirty
 	 */
 	virtual void MarkDirty() {}
 
Index: src/station.h
===================================================================
--- src/station.h	(revision 11032)
+++ src/station.h	(working copy)
@@ -173,7 +173,19 @@
 	virtual ~Station();
 
 	void AddFacility(byte new_facility_bit, TileIndex facil_xy);
+	/**
+	 * Mark a station dirty for repaint.
+	 *
+	 * @ingroup dirty
+	 * @note Documentation may be wrong (Progman)
+	 */
 	void MarkDirty() const;
+
+	/**
+	 * Marks the tiles of the station as dirty.
+	 *
+	 * @ingroup dirty
+	 */
 	void MarkTilesDirty(bool cargo_change) const;
 	bool TileBelongsToRailStation(TileIndex tile) const;
 	uint GetPlatformLength(TileIndex tile, DiagDirection dir) const;
Index: src/clear_cmd.cpp
===================================================================
--- src/clear_cmd.cpp	(revision 11032)
+++ src/clear_cmd.cpp	(working copy)
@@ -47,7 +47,14 @@
 	int modheight_count;                                         ///< amount of entries in "modheight".
 	int tile_table_count;                                        ///< amount of entries in "tile_table".
 
-	TileIndex tile_table[TERRAFORMER_TILE_TABLE_SIZE];           ///< Dirty tiles, i.e. at least one corner changed.
+	/**
+	 * Dirty tiles, i.e.\ at least one corner changed.
+	 *
+	 * This array contains the tiles which are or will be marked as dirty.
+	 *
+	 * @ingroup dirty
+	 */
+	TileIndex tile_table[TERRAFORMER_TILE_TABLE_SIZE];           
 	TerraformerHeightMod modheight[TERRAFORMER_MODHEIGHT_SIZE];  ///< Height modifications.
 };
 
@@ -106,6 +113,7 @@
  *
  * @param ts TerraformerState.
  * @param tile Tile.
+ * @ingroup dirty
  */
 static void TerraformAddDirtyTile(TerraformerState *ts, TileIndex tile)
 {
@@ -128,6 +136,7 @@
  *
  * @param ts TerraformerState.
  * @param tile Tile.
+ * @ingroup dirty
  */
 static void TerraformAddDirtyTileAround(TerraformerState *ts, TileIndex tile)
 {
Index: src/texteff.cpp
===================================================================
--- src/texteff.cpp	(revision 11032)
+++ src/texteff.cpp	(working copy)
@@ -256,7 +256,15 @@
 	_chatmessage_dirty = false;
 }
 
-/** Text Effects */
+/* Text Effects */
+/**
+ * Mark the area of the text effect as dirty.
+ *
+ * This function marks the area of a text effect as dirty for repaint.
+ *
+ * @param te The TextEffect to mark the area dirty
+ * @ingroup dirty
+ */
 static void MarkTextEffectAreaDirty(TextEffect *te)
 {
 	MarkAllViewportsDirty(
Index: src/water_cmd.cpp
===================================================================
--- src/water_cmd.cpp	(revision 11032)
+++ src/water_cmd.cpp	(working copy)
@@ -183,6 +183,15 @@
 	return CommandCost(_price.clear_water * 2);
 }
 
+/**
+ * Marks the tiles around a tile as dirty.
+ *
+ * This functions marks the tiles around a given tile as dirty for repaint.
+ *
+ * @param tile The center of the tile where all other tiles are marked as dirty
+ * @ingroup dirty
+ * @see TerraformAddDirtyTileAround
+ */
 static void MarkTilesAroundDirty(TileIndex tile)
 {
 	MarkTileDirtyByTile(TILE_ADDXY(tile, 0, 1));
Index: src/gfx.h
===================================================================
--- src/gfx.h	(revision 11032)
+++ src/gfx.h	(working copy)
@@ -1,7 +1,39 @@
 /* $Id$ */
 
-/** @file gfx.h */
+/** @file gfx.h
+ *
+ */
 
+/**
+ * @defgroup dirty Dirty
+ *
+ * Handles the repaint of some part of the screen.
+ *
+ * Some places in the code are called functions which makes something "dirty".
+ * This has nothing to do with making a Tile or Window darker or less visible.
+ * This term comes from memory caching and is used to define an object must
+ * be repaint. If some data of an object (like a Tile, Window, Vehicle, whatever)
+ * are changed which are so extensive the object must be repaint its marked
+ * as "dirty". The video driver repaint this object instead of the whole screen
+ * (this is btw. also possible if needed). This is used to avoid a
+ * flickering of the screen by the video driver constantly repainting it.
+ *
+ * This whole mechanism is controlled by an rectangle defined in #_invalid_rect. This
+ * rectangle defines the area on the screen which must be repaint. If a new object
+ * needs to be repainted this rectangle is extended to 'catch' the object on the
+ * screen. At some point (which is normaly uninteressted for patch writers) this
+ * rectangle is send to the video drivers method
+ * VideoDriver::MakeDirty and it is truncated back to an empty rectangle. At some
+ * later point (which is uninteressted, too) the video driver
+ * repaints all these saved rectangle instead of the whole screen and drop the
+ * rectangle informations. Then a new round begins by marking objects "dirty".
+ *
+ * @see VideoDriver::MakeDirty
+ * @see _invalid_rect
+ * @see _screen
+ */
+
+
 #ifndef GFX_H
 #define GFX_H
 
@@ -247,8 +279,24 @@
 void LoadStringWidthTable();
 void DrawStringMultiCenter(int x, int y, StringID str, int maxw);
 uint DrawStringMultiLine(int x, int y, StringID str, int maxw, int maxh = -1);
+/**
+ * Let the dirty blocks repainting by the video driver.
+ *
+ * @ingroup dirty
+ */
 void DrawDirtyBlocks();
+/**
+ * Set a new dirty block.
+ *
+ * @ingroup dirty
+ */
 void SetDirtyBlocks(int left, int top, int right, int bottom);
+
+/**
+ * Marks the whole screen as dirty.
+ *
+ * @ingroup dirty
+ */
 void MarkWholeScreenDirty();
 
 void GfxInitPalettes();
Index: src/viewport.cpp
===================================================================
--- src/viewport.cpp	(revision 11032)
+++ src/viewport.cpp	(working copy)
@@ -1440,6 +1440,14 @@
 	}
 }
 
+/**
+ * Marks a viewport as dirty for repaint.
+ *
+ * @param vp The viewport to mark as dirty
+ * @todo documents the missing parameters @c left, @c top, @c right and @c bottom
+ * @todo detailed description missing
+ * @ingroup dirty
+ */
 static void MarkViewportDirty(const ViewPort *vp, int left, int top, int right, int bottom)
 {
 	right -= vp->virtual_left;
@@ -1505,6 +1513,14 @@
 	);
 }
 
+/**
+ * Marks the selected tiles as dirty.
+ *
+ * This function marks the selected tiles as dirty for repaint
+ *
+ * @note Documentation may be wrong (Progman)
+ * @ingroup dirty
+ */
 static void SetSelectionTilesDirty()
 {
 	int y_size, x_size;
Index: src/gfx.cpp
===================================================================
--- src/gfx.cpp	(revision 11032)
+++ src/gfx.cpp	(working copy)
@@ -48,6 +48,13 @@
 FontSize _cur_fontsize;
 static FontSize _last_fontsize;
 static uint8 _cursor_backup[64 * 64 * 4];
+/**
+ * The rect for repaint.
+ *
+ * This rectangle defines the area which should be repaint by the video driver.
+ *
+ * @ingroup dirty
+ */
 static Rect _invalid_rect;
 static const byte *_color_remap_ptr;
 static byte _string_colorremap[3];
@@ -918,7 +925,13 @@
 
 	_video_driver->MakeDirty(left, top, right - left, bottom - top);
 }
-
+/*!
+ * Repaints (or let repaint by the video driver) the rectangle blocks which
+ * are added as 'dirty'.
+ *
+ * @note Documentation may be wrong as I don't understand this completely (Progman)
+ * @see SetDirtyBlocks
+ */
 void DrawDirtyBlocks()
 {
 	byte *b = _dirty_blocks;
@@ -1003,7 +1016,21 @@
 	}
 }
 
-
+/*!
+ * This function extends the internal _invalid_rect rectangle as it
+ * now contains the rectangle defined by the given parameters. Note
+ * the point (0,0) is top left.
+ *
+ * @param left The left edge of the rectangle
+ * @param top The top edge of the rectangle
+ * @param right The right edge of the rectangle
+ * @param bottom The bottm edge of the rectangle
+ * @see DrawDirtyBlocks
+ *
+ * @todo The name of the function should be called like @c AddDirtyBlock as
+ *       it neither set a dirty rect nor add several dirty rects although
+ *       the function name is in plural. (Progman)
+ */
 void SetDirtyBlocks(int left, int top, int right, int bottom)
 {
 	byte *b;
@@ -1040,7 +1067,11 @@
 		b += DIRTY_BYTES_PER_LINE;
 	} while (--height != 0);
 }
-
+/*!
+ * This function mark the whole screen as dirty. This results in repainting
+ * the whole screen. Use this with care as this function will break the
+ * idea about marking only parts of the screen as 'dirty'.
+ */
 void MarkWholeScreenDirty()
 {
 	SetDirtyBlocks(0, 0, _screen.width, _screen.height);
Index: src/window.h
===================================================================
--- src/window.h	(revision 11032)
+++ src/window.h	(working copy)
@@ -565,6 +565,11 @@
 /* window.cpp */
 void CallWindowEventNP(Window *w, int event);
 void CallWindowTickEvent();
+/**
+ * Marks the window as dirty for repaint.
+ *
+ * @ingroup dirty
+ */
 void SetWindowDirty(const Window *w);
 void SendWindowMessage(WindowClass wnd_class, WindowNumber wnd_num, int msg, int wparam, int lparam);
 void SendWindowMessageClass(WindowClass wnd_class, int msg, int wparam, int lparam);
Index: src/signs.cpp
===================================================================
--- src/signs.cpp	(revision 11032)
+++ src/signs.cpp	(working copy)
@@ -60,10 +60,12 @@
 }
 
 /**
+ * Marks the region of a sign as dirty.
  *
- * Marks the region of a sign as dirty
+ * This function marks the sign in all viewports as dirty for repaint.
  *
  * @param si Pointer to the Sign
+ * @ingroup dirty
  */
 static void MarkSignDirty(Sign *si)
 {
