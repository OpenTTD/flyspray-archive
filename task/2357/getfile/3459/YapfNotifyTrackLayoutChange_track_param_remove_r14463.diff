Index: src/openttd.cpp
===================================================================
--- src/openttd.cpp	(revision 14463)
+++ src/openttd.cpp	(working copy)
@@ -1910,7 +1910,7 @@
 		}
 	}
 
-	YapfNotifyTrackLayoutChange(INVALID_TILE, INVALID_TRACK);
+	YapfNotifyTrackLayoutChange(INVALID_TILE);
 
 	if (CheckSavegameVersion(34)) FOR_ALL_COMPANIES(c) ResetCompanyLivery(c);
 
Index: src/rail_cmd.cpp
===================================================================
--- src/rail_cmd.cpp	(revision 14463)
+++ src/rail_cmd.cpp	(working copy)
@@ -451,7 +451,7 @@
 	if (flags & DC_EXEC) {
 		MarkTileDirtyByTile(tile);
 		AddTrackToSignalBuffer(tile, track, _current_company);
-		YapfNotifyTrackLayoutChange(tile, track);
+		YapfNotifyTrackLayoutChange(tile);
 	}
 
 	return cost.AddCost(RailBuildCost(railtype));
@@ -556,11 +556,11 @@
 			 * 'connect' with the other piece. */
 			AddTrackToSignalBuffer(tile, TRACK_X, owner);
 			AddTrackToSignalBuffer(tile, TRACK_Y, owner);
-			YapfNotifyTrackLayoutChange(tile, TRACK_X);
-			YapfNotifyTrackLayoutChange(tile, TRACK_Y);
+			YapfNotifyTrackLayoutChange(tile);
+			YapfNotifyTrackLayoutChange(tile);
 		} else {
 			AddTrackToSignalBuffer(tile, track, owner);
-			YapfNotifyTrackLayoutChange(tile, track);
+			YapfNotifyTrackLayoutChange(tile);
 		}
 
 		if (v != NULL) TryPathReserve(v, true);
@@ -812,7 +812,7 @@
 		d->town_index = ClosestTownFromTile(tile, (uint)-1)->index;
 
 		AddSideToSignalBuffer(tile, INVALID_DIAGDIR, _current_company);
-		YapfNotifyTrackLayoutChange(tile, DiagDirToDiagTrack(dir));
+		YapfNotifyTrackLayoutChange(tile);
 	}
 
 	return cost.AddCost(_price.build_train_depot);
@@ -972,7 +972,7 @@
 		}
 		MarkTileDirtyByTile(tile);
 		AddTrackToSignalBuffer(tile, track, _current_company);
-		YapfNotifyTrackLayoutChange(tile, track);
+		YapfNotifyTrackLayoutChange(tile);
 		if (v != NULL) TryPathReserve(v, true);
 	}
 
@@ -1218,7 +1218,7 @@
 		}
 
 		AddTrackToSignalBuffer(tile, track, GetTileOwner(tile));
-		YapfNotifyTrackLayoutChange(tile, track);
+		YapfNotifyTrackLayoutChange(tile);
 		if (v != NULL) TryPathReserve(v, false);
 
 		MarkTileDirtyByTile(tile);
@@ -1343,20 +1343,18 @@
 
 			switch (tt) {
 				case MP_RAILWAY:
+					if (flags & DC_EXEC) {
+						/* notify YAPF about the track layout change */
+						YapfNotifyTrackLayoutChange(tile);
+					}
+
 					switch (GetRailTileType(tile)) {
 						case RAIL_TILE_WAYPOINT:
-							if (flags & DC_EXEC) {
-								/* notify YAPF about the track layout change */
-								YapfNotifyTrackLayoutChange(tile, GetRailWaypointTrack(tile));
-							}
 							cost.AddCost(RailConvertCost(type, totype));
 							break;
 
 						case RAIL_TILE_DEPOT:
 							if (flags & DC_EXEC) {
-								/* notify YAPF about the track layout change */
-								YapfNotifyTrackLayoutChange(tile, GetRailDepotTrack(tile));
-
 								/* Update build vehicle window related to this depot */
 								InvalidateWindowData(WC_VEHICLE_DEPOT, tile);
 								InvalidateWindowData(WC_BUILD_VEHICLE, tile);
@@ -1365,13 +1363,6 @@
 							break;
 
 						default: // RAIL_TILE_NORMAL, RAIL_TILE_SIGNALS
-							if (flags & DC_EXEC) {
-								/* notify YAPF about the track layout change */
-								TrackBits tracks = GetTrackBits(tile);
-								while (tracks != TRACK_BIT_NONE) {
-									YapfNotifyTrackLayoutChange(tile, RemoveFirstTrack(&tracks));
-								}
-							}
 							cost.AddCost(RailConvertCost(type, totype) * CountBits(GetTrackBits(tile)));
 							break;
 					}
@@ -1404,8 +1395,8 @@
 						FindVehicleOnPos(tile, NULL, &UpdateTrainPowerProc);
 						FindVehicleOnPos(endtile, NULL, &UpdateTrainPowerProc);
 
-						YapfNotifyTrackLayoutChange(tile, track);
-						YapfNotifyTrackLayoutChange(endtile, track);
+						YapfNotifyTrackLayoutChange(tile);
+						YapfNotifyTrackLayoutChange(endtile);
 
 						MarkTileDirtyByTile(tile);
 						MarkTileDirtyByTile(endtile);
@@ -1421,10 +1412,8 @@
 				} break;
 
 				default: // MP_STATION, MP_ROAD
-					if (flags & DC_EXEC) {
-						Track track = ((tt == MP_STATION) ? GetRailStationTrack(tile) : GetCrossingRailTrack(tile));
-						YapfNotifyTrackLayoutChange(tile, track);
-					}
+					if (flags & DC_EXEC)
+						YapfNotifyTrackLayoutChange(tile);
 
 					cost.AddCost(RailConvertCost(type, totype));
 					break;
@@ -1461,7 +1450,7 @@
 		DoClearSquare(tile);
 		delete GetDepotByTile(tile);
 		AddSideToSignalBuffer(tile, dir, owner);
-		YapfNotifyTrackLayoutChange(tile, DiagDirToDiagTrack(dir));
+		YapfNotifyTrackLayoutChange(tile);
 		if (v != NULL) TryPathReserve(v, true);
 	}
 
Index: src/road_cmd.cpp
===================================================================
--- src/road_cmd.cpp	(revision 14463)
+++ src/road_cmd.cpp	(working copy)
@@ -353,7 +353,7 @@
 					SetRoadTypes(tile, rts);
 				}
 				MarkTileDirtyByTile(tile);
-				YapfNotifyTrackLayoutChange(tile, FindFirstTrack(GetTrackBits(tile)));
+				YapfNotifyTrackLayoutChange(tile);
 			}
 			return CommandCost(EXPENSES_CONSTRUCTION, _price.remove_road * 2);
 		}
@@ -566,7 +566,7 @@
 			if (!EnsureNoVehicleOnGround(tile)) return CMD_ERROR;
 
 			if (flags & DC_EXEC) {
-				YapfNotifyTrackLayoutChange(tile, FindFirstTrack(GetTrackBits(tile)));
+				YapfNotifyTrackLayoutChange(tile);
 				/* Always add road to the roadtypes (can't draw without it) */
 				bool reserved = HasBit(GetTrackReservation(tile), AxisToTrack(OtherAxis(roaddir)));
 				MakeRoadCrossing(tile, _current_company, _current_company, _current_company, GetTileOwner(tile), roaddir, GetRailType(tile), RoadTypeToRoadTypes(rt) | ROADTYPES_ROAD, p2);
Index: src/station_cmd.cpp
===================================================================
--- src/station_cmd.cpp	(revision 14463)
+++ src/station_cmd.cpp	(working copy)
@@ -1068,7 +1068,7 @@
 				tile += tile_delta;
 			} while (--w);
 			AddTrackToSignalBuffer(tile_org, track, _current_company);
-			YapfNotifyTrackLayoutChange(tile_org, track);
+			YapfNotifyTrackLayoutChange(tile_org);
 			tile_org += tile_delta ^ TileDiffXY(1, 1); // perpendicular to tile_delta
 		} while (--numtracks);
 
@@ -1223,7 +1223,7 @@
 			DoClearSquare(tile2);
 			st->rect.AfterRemoveTile(st, tile2);
 			AddTrackToSignalBuffer(tile2, track, owner);
-			YapfNotifyTrackLayoutChange(tile2, track);
+			YapfNotifyTrackLayoutChange(tile2);
 
 			DeallocateSpecFromStation(st, specindex);
 
@@ -1297,7 +1297,7 @@
 					}
 					DoClearSquare(tile);
 					AddTrackToSignalBuffer(tile, track, owner);
-					YapfNotifyTrackLayoutChange(tile, track);
+					YapfNotifyTrackLayoutChange(tile);
 					if (v != NULL) TryPathReserve(v, true);
 				}
 			}
Index: src/tunnelbridge_cmd.cpp
===================================================================
--- src/tunnelbridge_cmd.cpp	(revision 14463)
+++ src/tunnelbridge_cmd.cpp	(working copy)
@@ -442,9 +442,8 @@
 	}
 
 	if (flags & DC_EXEC && transport_type == TRANSPORT_RAIL) {
-		Track track = AxisToTrack(direction);
 		AddSideToSignalBuffer(tile_start, INVALID_DIAGDIR, _current_company);
-		YapfNotifyTrackLayoutChange(tile_start, track);
+		YapfNotifyTrackLayoutChange(tile_start);
 	}
 
 	/* for human player that builds the bridge he gets a selection to choose from bridges (DC_QUERY_COST)
@@ -574,7 +573,7 @@
 			MakeRailTunnel(start_tile, _current_company, direction,                 (RailType)GB(p1, 0, 4));
 			MakeRailTunnel(end_tile,   _current_company, ReverseDiagDir(direction), (RailType)GB(p1, 0, 4));
 			AddSideToSignalBuffer(start_tile, INVALID_DIAGDIR, _current_company);
-			YapfNotifyTrackLayoutChange(start_tile, DiagDirToDiagTrack(direction));
+			YapfNotifyTrackLayoutChange(start_tile);
 		} else {
 			MakeRoadTunnel(start_tile, _current_company, direction,                 (RoadTypes)GB(p1, 0, 3));
 			MakeRoadTunnel(end_tile,   _current_company, ReverseDiagDir(direction), (RoadTypes)GB(p1, 0, 3));
@@ -646,8 +645,8 @@
 			AddSideToSignalBuffer(tile,    ReverseDiagDir(dir), owner);
 			AddSideToSignalBuffer(endtile, dir,                 owner);
 
-			YapfNotifyTrackLayoutChange(tile,    track);
-			YapfNotifyTrackLayoutChange(endtile, track);
+			YapfNotifyTrackLayoutChange(tile);
+			YapfNotifyTrackLayoutChange(endtile);
 
 			if (v != NULL) TryPathReserve(v);
 		} else {
@@ -721,9 +720,8 @@
 			AddSideToSignalBuffer(tile,    ReverseDiagDir(direction), owner);
 			AddSideToSignalBuffer(endtile, direction,                 owner);
 
-			Track track = DiagDirToDiagTrack(direction);
-			YapfNotifyTrackLayoutChange(tile,    track);
-			YapfNotifyTrackLayoutChange(endtile, track);
+			YapfNotifyTrackLayoutChange(tile);
+			YapfNotifyTrackLayoutChange(endtile);
 
 			if (v != NULL) TryPathReserve(v, true);
 		}
Index: src/waypoint.cpp
===================================================================
--- src/waypoint.cpp	(revision 14463)
+++ src/waypoint.cpp	(working copy)
@@ -278,7 +278,7 @@
 
 		UpdateWaypointSign(wp);
 		RedrawWaypointSign(wp);
-		YapfNotifyTrackLayoutChange(tile, AxisToTrack(axis));
+		YapfNotifyTrackLayoutChange(tile);
 	}
 
 	return CommandCost(EXPENSES_CONSTRUCTION, _price.build_train_depot);
@@ -337,7 +337,7 @@
 			DoClearSquare(tile);
 			AddTrackToSignalBuffer(tile, track, wp->owner);
 		}
-		YapfNotifyTrackLayoutChange(tile, track);
+		YapfNotifyTrackLayoutChange(tile);
 		if (v != NULL) TryPathReserve(v, true);
 	}
 
Index: src/yapf/yapf.h
===================================================================
--- src/yapf/yapf.h	(revision 14463)
+++ src/yapf/yapf.h	(working copy)
@@ -78,7 +78,7 @@
 bool YapfRailFindNearestSafeTile(const Vehicle *v, TileIndex tile, Trackdir td, bool override_railtype);
 
 /** Use this function to notify YAPF that track layout (or signal configuration) has change */
-void YapfNotifyTrackLayoutChange(TileIndex tile, Track track);
+void YapfNotifyTrackLayoutChange(TileIndex tile);
 
 /** performance measurement helpers */
 void* NpfBeginInterval();
Index: src/yapf/yapf_costcache.hpp
===================================================================
--- src/yapf/yapf_costcache.hpp	(revision 14463)
+++ src/yapf/yapf_costcache.hpp	(working copy)
@@ -81,7 +81,7 @@
 {
 	static int   s_rail_change_counter;
 
-	static void NotifyTrackLayoutChange(TileIndex tile, Track track) {s_rail_change_counter++;}
+	static void NotifyTrackLayoutChange(TileIndex tile) {s_rail_change_counter++;}
 };
 
 
Index: src/yapf/yapf_rail.cpp
===================================================================
--- src/yapf/yapf_rail.cpp	(revision 14463)
+++ src/yapf/yapf_rail.cpp	(working copy)
@@ -155,7 +155,7 @@
 		if (target != NULL) target->okay = true;
 
 		if (Yapf().CanUseGlobalCache(*m_res_node))
-			YapfNotifyTrackLayoutChange(INVALID_TILE, INVALID_TRACK);
+			YapfNotifyTrackLayoutChange(INVALID_TILE);
 
 		return true;
 	}
@@ -601,4 +601,4 @@
 /** if any track changes, this counter is incremented - that will invalidate segment cost cache */
 int CSegmentCostCacheBase::s_rail_change_counter = 0;
 
-void YapfNotifyTrackLayoutChange(TileIndex tile, Track track) {CSegmentCostCacheBase::NotifyTrackLayoutChange(tile, track);}
+void YapfNotifyTrackLayoutChange(TileIndex tile) {CSegmentCostCacheBase::NotifyTrackLayoutChange(tile);}
