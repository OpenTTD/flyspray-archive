diff -r 5aab0c3011eb src/texteff.cpp
--- a/src/texteff.cpp	Tue Mar 13 11:58:06 2012 -0600
+++ b/src/texteff.cpp	Wed Mar 14 04:40:18 2012 -0600
@@ -65,6 +65,7 @@
 {
 	/* Update details */
 	TextEffect *te = _text_effects.Get(te_id);
+	if (msg == te->string_id && GetDParam(0) == te->params_1) return;
 	te->string_id = msg;
 	te->params_1 = GetDParam(0);
 
@@ -88,9 +89,9 @@
 			continue;
 		}
 
-		te->MarkDirty();
+		te->MarkDirty(ZOOM_LVL_OUT_8X);
 		te->top -= ZOOM_LVL_BASE;
-		te->MarkDirty();
+		te->MarkDirty(ZOOM_LVL_OUT_8X);
 	}
 }
 
diff -r 5aab0c3011eb src/viewport.cpp
--- a/src/viewport.cpp	Tue Mar 13 11:58:06 2012 -0600
+++ b/src/viewport.cpp	Wed Mar 14 04:40:18 2012 -0600
@@ -143,6 +143,8 @@
 	Point foundation_offset[FOUNDATION_PART_END];    ///< Pixel offset for ground sprites on the foundations.
 };
 
+static void MarkViewportDirty(const ViewPort *vp, int left, int top, int right, int bottom);
+
 static ViewportDrawer _vd;
 
 TileHighlightData _thd;
@@ -1242,20 +1244,36 @@
 
 /**
  * Mark the sign dirty in all viewports.
+ * @param maxzoom Maximum %ZoomLevel at which the text is visible.
  *
  * @ingroup dirty
  */
-void ViewportSign::MarkDirty() const
+void ViewportSign::MarkDirty(ZoomLevel maxzoom) const
 {
-	/* We use ZOOM_LVL_MAX here, as every viewport can have another zoom,
-	 *  and there is no way for us to know which is the biggest. So make the
-	 *  biggest area dirty, and we are safe for sure.
-	 * We also add 1 to make sure the whole thing is redrawn. */
-	MarkAllViewportsDirty(
-		this->center - ScaleByZoom(this->width_normal / 2 + 1, ZOOM_LVL_MAX),
-		this->top    - ScaleByZoom(1, ZOOM_LVL_MAX),
-		this->center + ScaleByZoom(this->width_normal / 2 + 1, ZOOM_LVL_MAX),
-		this->top    + ScaleByZoom(VPSM_TOP + FONT_HEIGHT_NORMAL + VPSM_BOTTOM + 1, ZOOM_LVL_MAX));
+	struct zoomlevels_type {
+		int left;
+		int top;
+		int right;
+		int bottom;
+	} zoomlevels[ZOOM_LVL_COUNT];
+
+	for (ZoomLevel zoom = ZOOM_LVL_BEGIN; zoom != ZOOM_LVL_END; zoom++) {
+		/* FIXME: This doesn't switch to width_small when appropriate. */
+		zoomlevels[zoom].left   = this->center - ScaleByZoom(this->width_normal / 2 + 1, zoom);
+		zoomlevels[zoom].top    = this->top    - ScaleByZoom(1, zoom);
+		zoomlevels[zoom].right  = this->center + ScaleByZoom(this->width_normal / 2 + 1, zoom);
+		zoomlevels[zoom].bottom = this->top    + ScaleByZoom(VPSM_TOP + FONT_HEIGHT_NORMAL + VPSM_BOTTOM + 1, zoom);
+	}
+
+	Window *w;
+	FOR_ALL_WINDOWS_FROM_BACK(w) {
+		ViewPort *vp = w->viewport;
+		if (vp != NULL && vp->zoom <= maxzoom) {
+			assert(vp->width != 0);
+			struct zoomlevels_type &zl = zoomlevels[vp->zoom];
+			MarkViewportDirty(vp, zl.left, zl.top, zl.right, zl.bottom);
+		}
+	}
 }
 
 static void ViewportDrawTileSprites(const TileSpriteToDrawVector *tstdv)
diff -r 5aab0c3011eb src/viewport_type.h
--- a/src/viewport_type.h	Tue Mar 13 11:58:06 2012 -0600
+++ b/src/viewport_type.h	Wed Mar 14 04:40:18 2012 -0600
@@ -48,7 +48,7 @@
 	uint16 width_small;  ///< The width when zoomed out (small font)
 
 	void UpdatePosition(int center, int top, StringID str);
-	void MarkDirty() const;
+	void MarkDirty(ZoomLevel maxzoom = ZOOM_LVL_MAX) const;
 };
 
 /**
