Index: order_gui.cpp
===================================================================
--- order_gui.cpp	(révision 26943)
+++ order_gui.cpp	(copie de travail)
@@ -429,6 +429,15 @@
 	OHK_NO_LOAD,
 };
 
+
+
+/** Confirm replacement of the existing orders with shared orders
+ *  @param w parent Window
+ *  @param confirmed true if confirmed, false otherwise
+*/
+void AskShareOrdersCallback(Window *w, bool confirmed);
+
+
 /**
  * %Order window code for all vehicles.
  *
@@ -515,6 +524,7 @@
 	Scrollbar *vscroll;
 	bool can_do_refit;     ///< Vehicle chain can be refitted in depot.
 	bool can_do_autorefit; ///< Vehicle chain can be auto-refitted.
+	uint32 index_vehicle_share; ///< index of vehicle to share 
 
 	/**
 	 * Return the memorised selected order.
@@ -1459,17 +1469,38 @@
 		/* v is vehicle getting orders. Only copy/clone orders if vehicle doesn't have any orders yet.
 		 * We disallow copying orders of other vehicles if we already have at least one order entry
 		 * ourself as it easily copies orders of vehicles within a station when we mean the station.
-		 * Obviously if you press CTRL on a non-empty orders vehicle you know what you are doing
-		 * TODO: give a warning message */
+		 * If you press CTRL on a non-empty orders vehicle a warning message will appear to confirm */
 		bool share_order = _ctrl_pressed || this->goto_type == OPOS_SHARE;
-		if (this->vehicle->GetNumOrders() != 0 && !share_order) return false;
+		index_vehicle_share = v->index;
 
-		if (DoCommandP(this->vehicle->tile, this->vehicle->index | (share_order ? CO_SHARE : CO_COPY) << 30, v->index,
+		if (this->vehicle->GetNumOrders() != 0) {
+			if(!share_order) {
+				return false;
+			} else {
+				ShowQuery(
+					STR_SHARE_ORDERS_CAPTION,
+					STR_SHARE_ORDERS_QUERY,
+					this,
+					AskShareOrdersCallback
+				);
+				return true;
+			}
+		}
+
+		copyShareOrders(share_order);
+		return true;
+	}
+
+	/** Copy or Share the orders of a vehicle
+	 *  @param share_order true for sharing, false for copying
+	*/
+	void copyShareOrders(bool share_order)
+	{
+		if (DoCommandP(this->vehicle->tile, this->vehicle->index | (share_order ? CO_SHARE : CO_COPY) << 30, index_vehicle_share,
 				share_order ? CMD_CLONE_ORDER | CMD_MSG(STR_ERROR_CAN_T_SHARE_ORDER_LIST) : CMD_CLONE_ORDER | CMD_MSG(STR_ERROR_CAN_T_COPY_ORDER_LIST))) {
 			this->selected_order = -1;
 			ResetObjectToPlace();
 		}
-		return true;
 	}
 
 	virtual void OnPlaceObjectAbort()
@@ -1513,6 +1544,18 @@
 	static HotkeyList hotkeys;
 };
 
+
+
+void AskShareOrdersCallback(Window *w, bool confirmed)
+{
+	OrdersWindow *ow = static_cast<OrdersWindow *>(w);
+
+	if (confirmed) {
+		ow->copyShareOrders(true);
+	}
+
+}
+
 static Hotkey order_hotkeys[] = {
 	Hotkey('D', "skip", OHK_SKIP),
 	Hotkey('F', "delete", OHK_DELETE),
Index: lang/english.txt
===================================================================
--- lang/english.txt	(révision 26943)
+++ lang/english.txt	(copie de travail)
@@ -4962,3 +4962,11 @@
 STR_SHIP                                                        :{BLACK}{SHIP}
 
 STR_TOOLBAR_RAILTYPE_VELOCITY                                   :{STRING} ({VELOCITY})
+
+# Share orders window
+STR_SHARE_ORDERS_CAPTION                                        :{WHITE}Share Orders
+STR_SHARE_ORDERS_QUERY				                :{YELLOW}Replace existing orders {NBSP}?
+STR_SHARE_ORDERS_YES                                                    :{BLACK}Yes
+STR_SHARE_ORDERS_NO                                                     :{BLACK}No
+
+
