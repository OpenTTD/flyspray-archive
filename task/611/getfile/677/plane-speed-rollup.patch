Index: src/settings.cpp
===================================================================
--- src/settings.cpp	(revision 8763)
+++ src/settings.cpp	(working copy)
@@ -1327,6 +1327,9 @@
 	SDT_BOOL(Patches, wagon_speed_limits,            0, 0,  true,                    STR_CONFIG_PATCHES_WAGONSPEEDLIMITS,     NULL),
 	SDT_CONDBOOL(Patches, disable_elrails, 38, SL_MAX_VERSION, 0, 0, false,          STR_CONFIG_PATCHES_DISABLE_ELRAILS,      SettingsDisableElrail),
 	SDT_CONDVAR(Patches, freight_trains, SLE_UINT8, 39, SL_MAX_VERSION, 0, 0, 1, 1, 255, 1, STR_CONFIG_PATCHES_FREIGHT_TRAINS, NULL),
+	SDT_VAR(Patches,  aircraft_speed_coeff, SLE_UINT16, 0, 0, 1,    1,     4,0, STR_CONFIG_PATCHES_AIR_COEFF,             NULL),
+	SDT_BOOL(Patches, aircraft_taxi_speed,           0, 0, false,                    STR_CONFIG_PATCHES_TAXI_SPEED,       NULL),
+	SDT_BOOL(Patches, aircraft_breakdown_speed,      0, 0, false,                    STR_CONFIG_PATCHES_AIR_BREAKDOWN_SPEED,  NULL),
 
 	/***************************************************************************/
 	/* Station section of the GUI-configure patches window */
Index: src/lang/american.txt
===================================================================
--- src/lang/american.txt	(revision 8763)
+++ src/lang/american.txt	(working copy)
@@ -1144,6 +1144,9 @@
 STR_CONFIG_PATCHES_YAPF_SHIPS                                   :{LTBLUE}Use YAPF for ships: {ORANGE}{STRING}
 STR_CONFIG_PATCHES_YAPF_ROAD                                    :{LTBLUE}Use YAPF for roadvehs: {ORANGE}{STRING}
 STR_CONFIG_PATCHES_YAPF_RAIL                                    :{LTBLUE}Use YAPF for trains: {ORANGE}{STRING}
+STR_CONFIG_PATCHES_AIR_COEFF                                    :{LTBLUE}Aircraft speedup (1=TTD default, 4=realistic):{ORANGE} {STRING}
+STR_CONFIG_PATCHES_TAXI_SPEED                                   :{LTBLUE}More realistic aircraft taxiing speed: {ORANGE}{STRING1}
+STR_CONFIG_PATCHES_AIR_BREAKDOWN_SPEED                          :{LTBLUE}Aircraft breakdown speed relative to maximum speed: {ORANGE}{STRING1}
 
 STR_TEMPERATE_LANDSCAPE                                         :Temperate landscape
 STR_SUB_ARCTIC_LANDSCAPE                                        :Sub-arctic landscape
Index: src/lang/english.txt
===================================================================
--- src/lang/english.txt	(revision 8763)
+++ src/lang/english.txt	(working copy)
@@ -1144,6 +1144,9 @@
 STR_CONFIG_PATCHES_YAPF_SHIPS                                   :{LTBLUE}Use YAPF for ships: {ORANGE}{STRING1}
 STR_CONFIG_PATCHES_YAPF_ROAD                                    :{LTBLUE}Use YAPF for roadvehs: {ORANGE}{STRING1}
 STR_CONFIG_PATCHES_YAPF_RAIL                                    :{LTBLUE}Use YAPF for trains: {ORANGE}{STRING1}
+STR_CONFIG_PATCHES_AIR_COEFF                                    :{LTBLUE}Aircraft speedup (1=TTD default, 4=realistic):{ORANGE} {STRING}
+STR_CONFIG_PATCHES_TAXI_SPEED                                   :{LTBLUE}More realistic aircraft taxiing speed: {ORANGE}{STRING1}
+STR_CONFIG_PATCHES_AIR_BREAKDOWN_SPEED                          :{LTBLUE}Aircraft breakdown speed relative to maximum speed: {ORANGE}{STRING1}
 
 STR_TEMPERATE_LANDSCAPE                                         :Temperate landscape
 STR_SUB_ARCTIC_LANDSCAPE                                        :Sub-arctic landscape
Index: src/lang/czech.txt
===================================================================
--- src/lang/czech.txt	(revision 8763)
+++ src/lang/czech.txt	(working copy)
@@ -1202,6 +1202,9 @@
 STR_CONFIG_PATCHES_YAPF_SHIPS                                   :{LTBLUE}Používat YAPF ("opět další pathfinder") pro lodě: {ORANGE}{STRING}
 STR_CONFIG_PATCHES_YAPF_ROAD                                    :{LTBLUE}Používat YAPF pro silniční vozidla: {ORANGE}{STRING}
 STR_CONFIG_PATCHES_YAPF_RAIL                                    :{LTBLUE}Používat YAPF pro vlaky: {ORANGE}{STRING}
+STR_CONFIG_PATCHES_AIR_COEFF                                    :{LTBLUE}Rychlost letadel (1=standard TTD, 4=realistická): {ORANGE}{STRING}
+STR_CONFIG_PATCHES_TAXI_SPEED                                   :{LTBLUE}Realističtější rychlost pojíždění letadel: {ORANGE}{STRING1}
+STR_CONFIG_PATCHES_AIR_BREAKDOWN_SPEED                          :{LTBLUE}Rychlost porouchaného letadla odvozená od maximální rychlosti: {ORANGE}{STRING1}
 
 STR_TEMPERATE_LANDSCAPE                                         :krajina mírného pásma
 STR_SUB_ARCTIC_LANDSCAPE                                        :subarktická krajina
Index: src/settings_gui.cpp
===================================================================
--- src/settings_gui.cpp	(revision 8763)
+++ src/settings_gui.cpp	(working copy)
@@ -653,6 +653,9 @@
 	"wagon_speed_limits",
 	"disable_elrails",
 	"freight_trains",
+	"aircraft_speed_coeff",
+	"aircraft_taxi_speed",
+	"aircraft_breakdown_speed",
 };
 
 typedef struct PatchEntry {
@@ -895,7 +898,7 @@
 {   WWT_CLOSEBOX,   RESIZE_NONE,    10,     0,    10,     0,    13, STR_00C5,                        STR_018B_CLOSE_WINDOW},
 {    WWT_CAPTION,   RESIZE_NONE,    10,    11,   369,     0,    13, STR_CONFIG_PATCHES_CAPTION,      STR_018C_WINDOW_TITLE_DRAG_THIS},
 {      WWT_PANEL,   RESIZE_NONE,    10,     0,   369,    14,    41, 0x0,                             STR_NULL},
-{      WWT_PANEL,   RESIZE_NONE,    10,     0,   369,    42,   370, 0x0,                             STR_NULL},
+{      WWT_PANEL,   RESIZE_NONE,    10,     0,   369,    42,   402, 0x0,                             STR_NULL},
 
 {    WWT_TEXTBTN,   RESIZE_NONE,     3,    10,    96,    16,    27, STR_CONFIG_PATCHES_GUI,          STR_NULL},
 {    WWT_TEXTBTN,   RESIZE_NONE,     3,    97,   183,    16,    27, STR_CONFIG_PATCHES_CONSTRUCTION, STR_NULL},
@@ -907,7 +910,7 @@
 };
 
 static const WindowDesc _patches_selection_desc = {
-	WDP_CENTER, WDP_CENTER, 370, 371,
+	WDP_CENTER, WDP_CENTER, 370, 403,
 	WC_GAME_OPTIONS, WC_NONE,
 	WDF_STD_TOOLTIPS | WDF_STD_BTN | WDF_DEF_WIDGET,
 	_patches_selection_widgets,
Index: src/misc/autoptr.hpp
===================================================================
--- src/misc/autoptr.hpp	(revision 8763)
+++ src/misc/autoptr.hpp	(working copy)
@@ -1,4 +1,4 @@
-/* $Id:$ */
+/* $Id$ */
 
 #ifndef AUTOPTR_HPP
 #define AUTOPTR_HPP
Index: src/variables.h
===================================================================
--- src/variables.h	(revision 8763)
+++ src/variables.h	(working copy)
@@ -188,6 +188,9 @@
 	bool ainew_active;                  // Is the new AI active?
 	bool ai_in_multiplayer;             // Do we allow AIs in multiplayer
 
+	uint aircraft_speed_coeff;          // Coeficient of aircraft speed
+	bool aircraft_taxi_speed;           // Use more realistic taxi speed?
+	bool aircraft_breakdown_speed;	    // Set aircraft breakdown speed to fraction of full speed rather than constant?
 	/*
 	 * New Path Finding
 	 */
Index: src/newgrf.cpp
===================================================================
--- src/newgrf.cpp	(revision 8763)
+++ src/newgrf.cpp	(working copy)
@@ -2770,8 +2770,14 @@
 		if (GB(data, 0, 8) == 0xFF) {
 			if (data == 0x0000FFFF) {
 				/* Patch variables */
-				grfmsg(2, "ParamSet: Reading Patch variables unsupported");
-				return;
+				switch (src1) {
+				case 0x10:
+					src1 = _patches.aircraft_speed_coeff;
+					break;
+				default:
+					grfmsg(2, "ParamSet: Reading Patch variable 0x%x unsupported", (int)src1);
+					return;
+				}
 			} else {
 				/* GRF Resource Management */
 				if (_cur_stage != GLS_ACTIVATION) {
@@ -3341,7 +3347,7 @@
 	                   |                                        (0 << 0x0B)  // enhancedgui
 	                   |                                        (0 << 0x0C)  // newagerating
 	                   |       ((_patches.build_on_slopes ? 1 : 0) << 0x0D)  // buildonslopes
-	                   |                                        (0 << 0x0F)  // planespeed
+	                   |                                        (1 << 0x0F)  // planespeed
 	                   |                                        (0 << 0x10)  // moreindustriesperclimate - obsolete
 	                   |                                        (0 << 0x11)  // moretoylandfeatures
 	                   |                                        (1 << 0x12)  // newstations
Index: src/vehicle.h
===================================================================
--- src/vehicle.h	(revision 8763)
+++ src/vehicle.h	(working copy)
@@ -168,6 +168,7 @@
 	byte previous_pos;
 	StationID targetairport;
 	byte state;
+	uint16 desired_speed;
 } VehicleAir;
 
 typedef struct VehicleRoad {
Index: src/newgrf_engine.cpp
===================================================================
--- src/newgrf_engine.cpp	(revision 8763)
+++ src/newgrf_engine.cpp	(working copy)
@@ -267,9 +267,9 @@
 	AMS_TTDP_CLIMBING,
 	AMS_TTDP_FLIGHT_APPROACH,
 	AMS_TTDP_UNUSED_0x11,
-	AMS_TTDP_FLIGHT_TO_TOWER,
+	AMS_TTDP_FLIGHT_EN_ROUTE,
 	AMS_TTDP_UNUSED_0x13,
-	AMS_TTDP_FLIGHT_FINAL,
+	AMS_TTDP_FLIGHT_PATTERN,
 	AMS_TTDP_FLIGHT_DESCENT,
 	AMS_TTDP_BRAKING,
 	AMS_TTDP_HELI_TAKEOFF_AIRPORT,
@@ -280,7 +280,6 @@
 	AMS_TTDP_HELI_LAND_HELIPORT,
 };
 
-
 /**
  * Map OTTD aircraft movement states to TTDPatch style movement states
  * (VarAction 2 Variable 0xE2)
@@ -303,7 +302,7 @@
 
 			/* This condition only occurs for helicopters, before starting descent,
 			 * to a landing by the hanger of an international airport. */
-			if (amdflag & AMED_SLOWTURN) return AMS_TTDP_FLIGHT_TO_TOWER;
+			if (amdflag & AMED_SLOWTURN) return AMS_TTDP_FLIGHT_APPROACH;
 
 			// The final two conditions apply to helicopters or aircraft.
 			/* Has reached hanger? */
@@ -335,7 +334,7 @@
 		case HELIPAD3:
 		case HELIPAD4: // Will only occur for helicopters.
 			if (amdflag & AMED_HELI_LOWER) return AMS_TTDP_HELI_LAND_AIRPORT; // Descending.
-			if (amdflag & AMED_SLOWTURN)   return AMS_TTDP_FLIGHT_TO_TOWER;   // Still hasn't started descent.
+			if (amdflag & AMED_SLOWTURN)   return AMS_TTDP_FLIGHT_APPROACH;   // Still hasn't started descent.
 			return AMS_TTDP_TO_JUNCTION; // On the ground.
 
 		case TAKEOFF: // Moving to takeoff position.
@@ -355,8 +354,13 @@
 				return AMS_TTDP_HELI_TAKEOFF_HELIPORT;
 			}
 
-		case FLYING:
-			return AMS_TTDP_FLIGHT_TO_TOWER;
+		case FLYING: {
+			// The previous and current pos is set to equal in
+			// AircraftNextAirportPos_and_Order and that is only
+			// set if comming from another airport.
+			if (v->u.air.pos == v->u.air.previous_pos) return AMS_TTDP_FLIGHT_EN_ROUTE;
+			return AMS_TTDP_FLIGHT_PATTERN;
+		}
 
 		case LANDING: // Descent
 			return AMS_TTDP_FLIGHT_DESCENT;
@@ -372,7 +376,7 @@
 				return afc->delta_z == 0 ?
 					AMS_TTDP_HELI_LAND_AIRPORT : AMS_TTDP_HELI_LAND_HELIPORT;
 			} else {
-				return AMS_TTDP_FLIGHT_TO_TOWER;
+				return AMS_TTDP_FLIGHT_APPROACH;
 			}
 
 		default:
Index: src/vehicle.cpp
===================================================================
--- src/vehicle.cpp	(revision 8763)
+++ src/vehicle.cpp	(working copy)
@@ -1520,12 +1520,17 @@
 
 void CheckVehicleBreakdown(Vehicle *v)
 {
-	int rel, rel_old;
+	int rel, rel_old, wear;
 	uint32 r;
 	int chance;
 
+	/* to rebalance aircraft under higher aircraft_speed_coef, they need
+	 * to break down after about the same distance as with normal speed.
+	 * This is the appropriate coefficient. */
+	wear = (v->type == VEH_Aircraft) ? _patches.aircraft_speed_coeff : 1;
+
 	/* decrease reliability */
-	v->reliability = rel = max((rel_old = v->reliability) - v->reliability_spd_dec, 0);
+	v->reliability = rel = max((rel_old = v->reliability) - v->reliability_spd_dec * wear, 0);
 	if ((rel_old >> 8) != (rel >> 8))
 		InvalidateWindow(WC_VEHICLE_DETAILS, v->index);
 
@@ -1537,8 +1542,8 @@
 	r = Random();
 
 	/* increase chance of failure */
-	chance = v->breakdown_chance + 1;
-	if (CHANCE16I(1,25,r)) chance += 25;
+	chance = v->breakdown_chance + wear;
+	if (CHANCE16I(wear, 25, r)) chance += 25;
 	v->breakdown_chance = min(255, chance);
 
 	/* calculate reliability value to use in comparison */
Index: src/newgrf_callbacks.h
===================================================================
--- src/newgrf_callbacks.h	(revision 8763)
+++ src/newgrf_callbacks.h	(working copy)
@@ -58,6 +58,9 @@
 
 	/* Called to play a special sound effect */
 	CBID_VEHICLE_SOUND_EFFECT       = 0x33,
+
+	/* Called to change a vehicle's property value */
+	CBID_CHANGE_VEHICLE_PROPERTY    = 0x36,
 };
 
 /**
Index: src/aircraft_cmd.cpp
===================================================================
--- src/aircraft_cmd.cpp	(revision 8763)
+++ src/aircraft_cmd.cpp	(working copy)
@@ -881,42 +881,94 @@
 	}
 }
 
-/** Special velocities for aircraft
+static const uint _max_taxi_speed[5] = { 12, 12, 8, 6, 4 };
+
+/** Types of aircraft speed limits
  */
 enum AircraftSpeedLimits {
-	SPEED_LIMIT_NONE   =  0,  ///< No environmental speed limit. Speed limit is type dependent
-	SPEED_LIMIT_TAXI   = 12,  ///< Maximum speed of an aircraft while taxiing
-	SPEED_LIMIT_BROKEN = 27,  ///< Maximum speed of an aircraft that is broken
+	SPEED_LIMIT_NONE   =  0, ///< No environmental speed limit. Speed limit is type dependent
+	SPEED_LIMIT_TAXI,	 ///< Limit for aircraft that is taxiing
+	SPEED_LIMIT_BROKEN,      ///< Limit for aircraft that is broken
 };
 
-static bool UpdateAircraftSpeed(Vehicle *v, uint speed_limit)
+// Division rounding UP
+#define CDIV(x, y) (((x) + (y) - 1)/(y))
+
+static int UpdateAircraftSpeed(Vehicle *v, AircraftSpeedLimits speed_limit)
 {
-	uint spd = v->acceleration * 2;
-	byte t;
+	// Adjust the acceleration so the plane accelerates to the same speed
+	// on the same distance.
+	uint spd = v->acceleration * 2 * _patches.aircraft_speed_coeff;
+	byte t = v->subspeed;
+	uint16 callback = GetVehicleCallback(CBID_CHANGE_VEHICLE_PROPERTY, 0x0C, 0, v->engine_type, v);
 
-	v->subspeed = (t=v->subspeed) + (byte)spd;
-	if (speed_limit == SPEED_LIMIT_NONE) speed_limit = v->max_speed;
-	spd = min(v->cur_speed + (spd >> 8) + (v->subspeed < t), speed_limit);
+	// Initialize the desired speed from callback
+	if (callback == CALLBACK_FAILED) {
+		v->u.air.desired_speed = v->max_speed;
+	} else {
+		v->u.air.desired_speed = callback;
+	}
 
-	// adjust speed for broken vehicles
-	if (v->vehstatus & VS_AIRCRAFT_BROKEN) spd = min(spd, SPEED_LIMIT_BROKEN);
+	// apply desired speed limit
+	switch (speed_limit) {
+	case SPEED_LIMIT_NONE:
+		if (!(v->vehstatus & VS_AIRCRAFT_BROKEN))
+			break; // If broken, apply broken limit instead.
+	case SPEED_LIMIT_BROKEN:
+		if (_patches.aircraft_breakdown_speed) {
+			v->u.air.desired_speed = min(v->u.air.desired_speed, (v->max_speed * 5) / 8);
+		} else {
+			v->u.air.desired_speed = min(v->u.air.desired_speed, 27);
+		}
+		break;
+	case SPEED_LIMIT_TAXI:
+		if (_patches.aircraft_taxi_speed) {
+			v->u.air.desired_speed = min(v->u.air.desired_speed, CDIV(v->max_speed, 2 * _patches.aircraft_speed_coeff));
+			v->u.air.desired_speed = min(v->u.air.desired_speed, _max_taxi_speed[_patches.aircraft_speed_coeff]);
+		} else {
+			v->u.air.desired_speed = min(v->u.air.desired_speed, _max_taxi_speed[0]);
+		}
+		break;
+	}
+	// For some reason aircrafts lock up without this.
+	if(v->u.air.desired_speed < 2) v->u.air.desired_speed = 2;
 
+	// accelerate/decelerate the aircraft as appropriate
+	if (v->cur_speed < v->u.air.desired_speed) {
+		v->subspeed = t + (byte)spd;
+		spd = v->cur_speed + (spd >> 8) + (v->subspeed < t);
+	} else if (v->cur_speed > v->u.air.desired_speed) {
+		v->subspeed = t - (byte)spd;
+		spd = v->cur_speed - (spd >> 8) - (v->subspeed > t);
+	} else {
+		spd = v->cur_speed;
+	}
+
 	//updates statusbar only if speed have changed to save CPU time
 	if (spd != v->cur_speed) {
 		v->cur_speed = spd;
-		if (_patches.vehicle_speed)
-			InvalidateWindowWidget(WC_VEHICLE_VIEW, v->index, STATUS_BAR);
+		if (_patches.vehicle_speed) InvalidateWindowWidget(WC_VEHICLE_VIEW, v->index, STATUS_BAR);
 	}
 
 	if (!(v->direction & 1)) spd = spd * 3 / 4;
 
-	if (spd == 0) return false;
+	if (spd == 0) return 0;
 
-	if ((byte)++spd == 0) return true;
+	spd *= _patches.aircraft_speed_coeff;
+	/*
+	   if ((byte)++spd == 0) return true;
 
-	v->progress = (t = v->progress) - (byte)spd;
+	   v->progress = (t = v->progress) - (byte)spd;
 
-	return t < v->progress;
+	   return t < v->progress;
+	   */
+	/* The original algorithm had progress decremented by speed with
+	 * 0 treated as 256 in the initial step. However since we can
+	 * overflow more than once per step, incrementing is easier and
+	 * (hopefuly) equivalent otherwise. */
+	spd += v->progress;
+	v->progress = (byte)spd; // Keep low byte in progress.
+	return spd >> 8; // And return high byte.
 }
 
 /**
@@ -947,6 +999,33 @@
 	return base_altitude;
 }
 
+/**
+ * Extended version of GetNewVehiclePos.
+ *
+ * This is variant of GetNewVehiclePos that handles moving more than one
+ * unit.
+ * @param v Vehicle.
+ * @param[out] gp New coordinates of vehicle.
+ * @param distance Distance moved, in units (1/TILE_SIZE tile).
+ * @return true if staying in the same tile.
+ */
+bool GetNewAircraftPos(Vehicle *v, GetNewVehiclePosResult *gp, int distance)
+{
+	static const int8 _delta_coord[16] = {
+		-1,-1,-1, 0, 1, 1, 1, 0, /* x */
+		-1, 0, 1, 1, 1, 0,-1,-1, /* y */
+	};
+
+	int x = v->x_pos + _delta_coord[v->direction] * distance;
+	int y = v->y_pos + _delta_coord[v->direction + 8] * distance;
+
+	gp->x = x;
+	gp->y = y;
+	gp->old_tile = v->tile;
+	gp->new_tile = TileVirtXY(x, y);
+	return gp->old_tile == gp->new_tile;
+}
+
 static bool AircraftController(Vehicle *v)
 {
 	Station *st;
@@ -955,7 +1034,7 @@
 	Direction newdir;
 	GetNewVehiclePosResult gp;
 	uint dist;
-	int x,y;
+	int x, y, moveDist;
 
 	st = GetStation(v->u.air.targetairport);
 
@@ -1059,7 +1138,7 @@
 		return false;
 	}
 
-	if (!UpdateAircraftSpeed(v, ((amd->flag & AMED_NOSPDCLAMP) == 0) ? SPEED_LIMIT_TAXI : SPEED_LIMIT_NONE)) return false;
+	if (!(moveDist = UpdateAircraftSpeed(v, ((amd->flag & AMED_NOSPDCLAMP) == 0) ? SPEED_LIMIT_TAXI : SPEED_LIMIT_NONE))) return false;
 
 	if (v->load_unload_time_rem != 0) v->load_unload_time_rem--;
 
@@ -1076,7 +1155,7 @@
 	}
 
 	// Move vehicle.
-	GetNewVehiclePos(v, &gp);
+	GetNewAircraftPos(v, &gp, moveDist);
 	v->tile = gp.new_tile;
 
 	// If vehicle is in the air, use tile coordinate 0.
@@ -1122,7 +1201,7 @@
 			z++;
 		}
 
-		if (dist < 64 && v->cur_speed > 12) v->cur_speed -= 4;
+		if (dist < 64 && v->cur_speed > 12) v->cur_speed -= max((v->cur_speed >> 4), 1);
 	}
 
 	SetAircraftPosition(v, gp.x, gp.y, z);
