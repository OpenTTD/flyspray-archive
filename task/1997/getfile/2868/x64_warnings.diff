Index: src/sound_type.h
===================================================================
--- src/sound_type.h	(r‚vision 13015)
+++ src/sound_type.h	(copie de travail)
@@ -20,7 +20,7 @@
 
 struct FileEntry {
 	uint8 file_slot;
-	uint32 file_offset;
+	size_t file_offset;
 	uint32 file_size;
 	uint16 rate;
 	uint8 bits_per_sample;
Index: src/sound.cpp
===================================================================
--- src/sound.cpp	(r‚vision 13015)
+++ src/sound.cpp	(copie de travail)
@@ -29,7 +29,7 @@
 	uint i;
 
 	FioOpenFile(SOUND_SLOT, filename);
-	uint pos = FioGetPos();
+	size_t pos = FioGetPos();
 	uint count = FioReadDword() / 8;
 
 	/* Simple check for the correct number of original sounds. */
Index: src/newgrf.cpp
===================================================================
--- src/newgrf.cpp	(r‚vision 13015)
+++ src/newgrf.cpp	(copie de travail)
@@ -3725,7 +3725,7 @@
 	 *                 to place where parameter is to be stored. */
 
 	/* Preload the next sprite */
-	uint32 pos = FioGetPos();
+	size_t pos = FioGetPos();
 	uint16 num = FioReadWord();
 	uint8 type = FioReadByte();
 
Index: src/build_vehicle_gui.cpp
===================================================================
--- src/build_vehicle_gui.cpp	(r‚vision 13015)
+++ src/build_vehicle_gui.cpp	(copie de travail)
@@ -1033,8 +1033,8 @@
 			break;
 
 		case BUILD_VEHICLE_WIDGET_LIST: {
-			uint i = (e->we.click.pt.y - w->widget[BUILD_VEHICLE_WIDGET_LIST].top) / GetVehicleListHeight(bv->vehicle_type) + w->vscroll.pos;
-			uint num_items = bv->eng_list.size();
+			size_t i = (e->we.click.pt.y - w->widget[BUILD_VEHICLE_WIDGET_LIST].top) / GetVehicleListHeight(bv->vehicle_type) + w->vscroll.pos;
+			size_t num_items = bv->eng_list.size();
 			bv->sel_engine = (i < num_items) ? bv->eng_list[i] : INVALID_ENGINE;
 			w->SetDirty();
 			break;
Index: src/autoreplace_gui.cpp
===================================================================
--- src/autoreplace_gui.cpp	(r‚vision 13015)
+++ src/autoreplace_gui.cpp	(copie de travail)
@@ -407,11 +407,11 @@
 
 				case RVW_WIDGET_LEFT_MATRIX:
 				case RVW_WIDGET_RIGHT_MATRIX: {
-					uint i = (e->we.click.pt.y - 14) / w->resize.step_height;
+					size_t i = (e->we.click.pt.y - 14) / w->resize.step_height;
 					uint16 click_scroll_pos = e->we.click.widget == RVW_WIDGET_LEFT_MATRIX ? w->vscroll.pos : w->vscroll2.pos;
 					uint16 click_scroll_cap = e->we.click.widget == RVW_WIDGET_LEFT_MATRIX ? w->vscroll.cap : w->vscroll2.cap;
 					byte click_side         = e->we.click.widget == RVW_WIDGET_LEFT_MATRIX ? 0 : 1;
-					uint16 engine_count     = WP(w, replaceveh_d).list[click_side].size();
+					size_t engine_count     = WP(w, replaceveh_d).list[click_side].size();
 
 					if (i < click_scroll_cap) {
 						i += click_scroll_pos;
Index: src/spriteloader/grf.cpp
===================================================================
--- src/spriteloader/grf.cpp	(r‚vision 13015)
+++ src/spriteloader/grf.cpp	(copie de travail)
@@ -9,7 +9,7 @@
 #include "../core/alloc_func.hpp"
 #include "grf.hpp"
 
-bool SpriteLoaderGrf::LoadSprite(SpriteLoader::Sprite *sprite, uint8 file_slot, uint32 file_pos)
+bool SpriteLoaderGrf::LoadSprite(SpriteLoader::Sprite *sprite, uint8 file_slot, size_t file_pos)
 {
 	/* Open the right file and go to the correct position */
 	FioSeekToFile(file_slot, file_pos);
Index: src/spriteloader/grf.hpp
===================================================================
--- src/spriteloader/grf.hpp	(r‚vision 13015)
+++ src/spriteloader/grf.hpp	(copie de travail)
@@ -12,7 +12,7 @@
 	/**
 	 * Load a sprite from the disk and return a sprite struct which is the same for all loaders.
 	 */
-	bool LoadSprite(SpriteLoader::Sprite *sprite, uint8 file_slot, uint32 file_pos);
+	bool LoadSprite(SpriteLoader::Sprite *sprite, uint8 file_slot, size_t file_pos);
 };
 
 #endif /* SPRITELOADER_GRF_HPP */
Index: src/spritecache.cpp
===================================================================
--- src/spritecache.cpp	(r‚vision 13015)
+++ src/spritecache.cpp	(copie de travail)
@@ -25,7 +25,7 @@
 struct SpriteCache {
 	void *ptr;
 	uint32 id;
-	uint32 file_pos;
+	size_t file_pos;
 	uint16 file_slot;
 	int16 lru;
 };
@@ -123,7 +123,7 @@
 static void* ReadSprite(SpriteCache *sc, SpriteID id, bool real_sprite)
 {
 	uint8 file_slot = sc->file_slot;
-	uint32 file_pos = sc->file_pos;
+	size_t file_pos = sc->file_pos;
 
 	DEBUG(sprite, 9, "Load sprite %d", id);
 
@@ -241,7 +241,7 @@
 bool LoadNextSprite(int load_index, byte file_slot, uint file_sprite_id)
 {
 	SpriteCache *sc;
-	uint32 file_pos = FioGetPos();
+	size_t file_pos = FioGetPos();
 
 	if (!ReadSpriteHeaderSkipData()) return false;
 
@@ -279,9 +279,9 @@
 	return (MemBlock*)((byte*)block + (block->size & ~S_FREE_MASK));
 }
 
-static uint32 GetSpriteCacheUsage()
+static size_t GetSpriteCacheUsage()
 {
-	uint32 tot_size = 0;
+	size_t tot_size = 0;
 	MemBlock* s;
 
 	for (s = _spritecache_ptr; s->size != 0; s = NextBlock(s)) {
Index: src/newgrf.h
===================================================================
--- src/newgrf.h	(r‚vision 13015)
+++ src/newgrf.h	(copie de travail)
@@ -52,7 +52,7 @@
 struct GRFLabel {
 	byte label;
 	uint32 nfo_line;
-	uint32 pos;
+	size_t pos;
 	struct GRFLabel *next;
 };
 
Index: src/fileio.cpp
===================================================================
--- src/fileio.cpp	(r‚vision 13015)
+++ src/fileio.cpp	(copie de travail)
@@ -43,7 +43,7 @@
 static Fio _fio;
 
 /* Get current position in file */
-uint32 FioGetPos()
+size_t FioGetPos()
 {
 	return _fio.pos + (_fio.buffer - _fio.buffer_end);
 }
@@ -53,7 +53,7 @@
 	return _fio.shortnames[slot];
 }
 
-void FioSeekTo(uint32 pos, int mode)
+void FioSeekTo(size_t pos, int mode)
 {
 	if (mode == SEEK_CUR) pos += FioGetPos();
 	_fio.buffer = _fio.buffer_end = _fio.buffer_start + FIO_BUFFER_SIZE;
@@ -74,7 +74,7 @@
 #endif /* LIMITED_FDS */
 
 /* Seek to a file and a position */
-void FioSeekToFile(uint8 slot, uint32 pos)
+void FioSeekToFile(uint8 slot, size_t pos)
 {
 	FILE *f;
 #if defined(LIMITED_FDS)
Index: src/fileio.h
===================================================================
--- src/fileio.h	(r‚vision 13015)
+++ src/fileio.h	(copie de travail)
@@ -9,9 +9,9 @@
 #include <string>
 #include "core/enum_type.hpp"
 
-void FioSeekTo(uint32 pos, int mode);
-void FioSeekToFile(uint8 slot, uint32 pos);
-uint32 FioGetPos();
+void FioSeekTo(size_t pos, int mode);
+void FioSeekToFile(uint8 slot, size_t pos);
+size_t FioGetPos();
 const char *FioGetFilename(uint8 slot);
 byte FioReadByte();
 uint16 FioReadWord();
