Index: src/core/geometry_func.hpp
===================================================================
--- src/core/geometry_func.hpp	(revision 18781)
+++ src/core/geometry_func.hpp	(working copy)
@@ -14,6 +14,157 @@
 
 #include "geometry_type.hpp"
 
+/**
+ * Add to dimension another dimension.
+ * @param left The dimension to add to.
+ * @param right The another dimension to add.
+ * @return reference to left.
+ */
+template <typename T>
+inline static DimensionT<T> &operator += (DimensionT<T> &left, const DimensionT<T> &right)
+{
+	left.width += right.width;
+	left.height += right.height;
+	return left;
+}
+
+/**
+ * Subtract from dimension another dimension.
+ * @param left The dimension to subtract from.
+ * @param right The another dimension to subtract
+ * @return reference to left.
+ */
+template <typename T>
+inline static DimensionT<T> &operator -= (DimensionT<T> &left, const DimensionT<T> &right)
+{
+	left.width -= right.width;
+	left.height -= right.height;
+	return left;
+}
+
+/**
+ * Add two dimensions.
+ * @param left The first dimension to add to.
+ * @param right The second dimension to add to.
+ * @return Sum of left and right dimensions.
+ */
+template <typename T>
+static DimensionT<T> operator + (const DimensionT<T> &left, const DimensionT<T> &right)
+{
+	return DimensionT<T>::Create(left.width + right.width, left.height + right.height);
+}
+
+/**
+ * Subtract two dimensions.
+ * @param left The dimension being subtracted from.
+ * @param right The dimension being subtracted
+ * @return Dimensions difference.
+ */
+template <typename T>
+inline static DimensionT<T> operator - (const DimensionT<T> &left, const DimensionT<T> &right)
+{
+	return DimensionT<T>::Create(left.width - right.width, left.height - right.height);
+}
+
+/**
+ * Translate a point by a given dimensions.
+ * @param left The point to translate.
+ * @param right The given dimension.
+ * @return reference to left.
+ */
+template <typename T>
+inline static PointT<T> &operator += (PointT<T> &left, const DimensionT<T> &right)
+{
+	left.x += right.width;
+	left.y += right.height;
+	return left;
+}
+
+/**
+ * Translate a point by a negation of given dimensions.
+ * @param left The point to translate.
+ * @param right The given dimension.
+ * @return reference to left.
+ */
+template <typename T>
+inline static PointT<T> &operator -= (PointT<T> &left, const DimensionT<T> &right)
+{
+	left.x -= right.width;
+	left.y -= right.height;
+	return left;
+}
+
+/**
+ * Calculate a point translation by a given dimensions.
+ * @param left The point to translate.
+ * @param right The given dimension.
+ * @return left translated by right.
+ */
+template <typename T>
+inline static PointT<T> operator + (const PointT<T> &left, const DimensionT<T> &right)
+{
+	return PointT<T>::Create(left.x + right.width, left.y + right.height);
+}
+
+/**
+ * Calculate a point translation by a negation of given dimensions.
+ * @param left The point to translate.
+ * @param right The given dimension.
+ * @return left translated by a negation of right.
+ */
+template <typename T>
+inline static PointT<T> operator - (const PointT<T> &left, const DimensionT<T> &right)
+{
+	return PointT<T>::Create(left.x - right.width, left.y - right.height);
+}
+
+/**
+ * Nagate coordinates of a given point.
+ * @param point The point to negate.
+ * @return Negated point.
+ */
+template <typename T>
+inline static PointT<T> operator - (const PointT<T> &point)
+{
+	return PointT<T>::Create(-point.x, -point.y);
+}
+
+/**
+ * Calculate absolute distance between two given points.
+ * @param left The first point.
+ * @param right The second point.
+ * @return The distance.
+ */
+template <typename T>
+static DimensionT<T> PointDistance(const PointT<T> &a, const PointT<T> &b)
+{
+	return DimensionT<T>::Create((a.x < b.x) ? (b.x - a.x) : (a.x - b.x), (a.y < b.y) ? (b.y - a.y) : (a.y - b.y));
+}
+
+/**
+ * Compute union of two rectangles. See RectT::Unify for more information.
+ * @param a The first rectangle.
+ * @param b The second rectangle.
+ * @return Union of given rectangles.
+ */
+template <typename T>
+static RectT<T> RectUnion(const RectT<T> &a, const RectT<T> &b)
+{
+	return RectT<T>::Create(min(a.left, b.left), min(a.top, b.top), max(a.right, b.right), max(a.bottom, b.bottom));
+}
+
+/**
+ * Compute intersection of two rectangles. See RectT::Intersect for more information.
+ * @param a The first rectangle.
+ * @param b The second rectangle.
+ * @return Intersection of given rectangles.
+ */
+template <typename T>
+static RectT<T> RectIntersection(const RectT<T> &a, const RectT<T> &b)
+{
+	return RectT<T>::Create(max(a.left, b.left), max(a.top, b.top), min(a.right, b.right), min(a.bottom, b.bottom));
+}
+
 Dimension maxdim(const Dimension &d1, const Dimension &d2);
 
 #endif /* GEOMETRY_FUNC_HPP */
Index: src/core/geometry_type.hpp
===================================================================
--- src/core/geometry_type.hpp	(revision 18781)
+++ src/core/geometry_type.hpp	(working copy)
@@ -12,6 +12,8 @@
 #ifndef GEOMETRY_TYPE_HPP
 #define GEOMETRY_TYPE_HPP
 
+#include <limits>
+
 #if defined(__AMIGA__)
 	/* AmigaOS already has a Point declared */
 	#define Point OTTD_Point
@@ -23,42 +25,404 @@
 	#define Point OTTD_Point
 #endif /* __APPLE__ */
 
+template <typename T>
+struct PointT;
 
-/** Coordinates of a point in 2D */
-struct Point {
-	int x;
-	int y;
+/**
+ * Dimensions (a width and height) of a rectangle in 2D.
+ * @tparam T Type of fields storing dimensions.
+ */
+template <typename T>
+struct DimensionT {
+	T width;  ///< The width.
+	T height; ///< The height.
+
+	/**
+	 * Create initialized DimensionT object.
+	 * @note This is a "named constructor", no regular constructor to keep POD'ness.
+	 * @param width Initial width.
+	 * @param height Initial height.
+	 * @return DimensionT initialized with given values.
+	 */
+	FORCEINLINE static DimensionT<T> Create(T width, T height)
+	{
+		DimensionT<T> ret = { width, height };
+		return ret;
+	}
+
+	/**
+	 * Cast to PointT structure.
+	 * The width becomes the x coordinate and the height becomes the y coordinate.
+	 * @return Reference to this object as reference to PointT object.
+	 */
+	FORCEINLINE PointT<T> &AsPoint() { return reinterpret_cast<PointT<T>&>(*this); }
+
+	/**
+	 * Cast to PointT structure (const).
+	 * The width becomes the x coordinate and the height becomes the y coordinate.
+	 * @return Reference to this object as reference to PointT object.
+	 */
+	FORCEINLINE const PointT<T> &AsPoint() const { return reinterpret_cast<const PointT<T>&>(*this); }
 };
 
-/** Dimensions (a width and height) of a rectangle in 2D */
-struct Dimension {
-	uint width;
-	uint height;
+/**
+ * Coordinates of a point in 2D.
+ * @tparam T Type of fields storing coordinates.
+ */
+template <typename T>
+struct PointT {
+	T x; ///< The x coordinate.
+	T y; ///< The y coordinate.
+
+	/**
+	 * Create initialized PointT object.
+	 *
+	 * @note This is a "named constructor", no regular constructor to keep POD'ness.
+	 *
+	 * @param x Initial x coordinate.
+	 * @param y Initial y coordinate.
+	 * @return PointT initialized with given values.
+	 */
+	FORCEINLINE static PointT<T> Create(T x, T y)
+	{
+		PointT<T> ret = { x, y };
+		return ret;
+	}
+
+	/**
+	 * Cast to DimensionT structure.
+	 * The x coordinate becomes the width and the y coordinate becomes the height.
+	 * @return Reference to this object as reference to DimensionT object.
+	 */
+	FORCEINLINE DimensionT<T> &AsDimension() { return reinterpret_cast<DimensionT<T>&>(*this); }
+
+	/**
+	 * Cast to DimensionT structure (const).
+	 * The x coordinate becomes the width and the y coordinate becomes the height.
+	 * @return Reference to this object as reference to DimensionT object.
+	 */
+	FORCEINLINE const DimensionT<T> &AsDimension() const { return reinterpret_cast<const DimensionT<T>&>(*this); }
 };
 
-/** Specification of a rectangle with absolute coordinates of all edges */
-struct Rect {
-	int left;
-	int top;
-	int right;
-	int bottom;
+/**
+ * Specification of a rectangle with absolute coordinates of all edges.
+ * @tparam T Type of fields storing coordinates.
+ */
+template <typename T>
+struct RectT {
+	union {
+		/* Older GCC (and also ISO C++) forbids initialization of unnamed structures. There
+		 * must be a two the same structures containing coordinates (left/top/right/bottom),
+		 * one named and one unnamed so we could be able to:
+		 *  - make an union at all and declare other union member (left_top/right_bottom)
+		 *  - brace initialize this structure
+		 *  - use coordinates directly without the mentioned name prefix */
+		struct {
+			T left;   ///< The left coordinate.
+			T top;    ///< The top coordinate.
+			T right;  ///< The right coordinate.
+			T bottom; ///< The bottom coordinate.
+		}
+		coordinates;
+
+		struct {
+			T left;   ///< The left coordinate.
+			T top;    ///< The top coordinate.
+			T right;  ///< The right coordinate.
+			T bottom; ///< The bottom coordinate.
+		};
+
+		struct {
+			PointT<T> left_top; ///< Coordinates of upper left corner of this rectangle.
+			PointT<T> right_bottom; ///< Coordinates of lower right corner of this rectangle.
+		};
+	};
+
+	/**
+	 * Create initialized RectT object.
+	 *
+	 * @note This is a "named constructor", no regular constructor to keep POD'ness.
+	 *
+	 * @param left Initial left coordinate.
+	 * @param top Initial top coordinate.
+	 * @param right Initial right coordinate.
+	 * @param bottom Initial bottom coordinate.
+	 * @return RectT initialized with given values.
+	 */
+	FORCEINLINE static RectT<T> Create(T left, T top, T right, T bottom)
+	{
+		RectT<T> ret = { { { left, top, right, bottom } } };
+		return ret;
+	}
+
+	/**
+	 * Create initialized RectT object.
+	 *
+	 * @note This is a "named constructor", no regular constructor to keep POD'ness.
+	 *
+	 * @param left_top Initial coordinates of upper left corner.
+	 * @param right_bottom Initial coordinates of lower right corner.
+	 * @return RectT initialized with given values.
+	 */
+	FORCEINLINE static RectT<T> Create(const PointT<T> &left_top, const PointT<T> &right_bottom)
+	{
+		RectT<T> ret = { { { left_top.x, left_top.y, right_bottom.x, right_bottom.y } } };
+		return ret;
+	}
+
+	/**
+	 * Make an union of this and other rectangle and store the result in this rectangle.
+	 * In other words, this rectangle is extended exactly as much as needed to contain
+	 * the other rectangle.
+	 * @param rect The other rectangle.
+	 */
+	void Unify(const RectT<T> &rect)
+	{
+		if (this->left   > rect.left  ) this->left   = rect.left;
+		if (this->top    > rect.top   ) this->top    = rect.top;
+		if (this->bottom < rect.bottom) this->bottom = rect.bottom;
+		if (this->right  < rect.left  ) this->right  = rect.right;
+	}
+
+	/**
+	 * Make an intersection of this and other rectangle and store the result in this
+	 * rectangle. In other words, this rectangle is shrunk exactly as much as needed
+	 * to not exceed the other rectangle.
+	 * @param rect The other rectangle.
+	 */
+	void Intersect(const RectT<T> &rect)
+	{
+		if (this->left   < rect.left  ) this->left   = rect.left;
+		if (this->top    < rect.top   ) this->top    = rect.top;
+		if (this->bottom > rect.bottom) this->bottom = rect.bottom;
+		if (this->right  > rect.left  ) this->right  = rect.right;
+	}
 };
 
 /**
- * Specification of a rectangle with an absolute top-left coordinate and a
- * (relative) width/height
+ * Specification of a rectangle with an absolute top-left coordinate and
+ * a (relative) width/height.
+ * @tparam Tpoint_coord Type of fields storing top-left coordinates.
+ * @tparam Tdim_coord Type of fields storing width/height coordinates.
  */
-struct PointDimension {
-	int x;
-	int y;
-	int width;
-	int height;
+template <typename Tpoint_coord, typename Tdim_coord = Tpoint_coord>
+struct PointDimensionT {
+	union {
+		/* Older GCC (and also ISO C++) forbids initialization of unnamed structures. There
+		 * must be a two the same structures containing coordinates (x/y/width/height),
+		 * one named and one unnamed so we could be able to:
+		 *  - make an union at all and declare other union member (point/dimension)
+		 *  - brace initialize this structure
+		 *  - use coordinates directly without the mentioned name prefix */
+		struct {
+			Tpoint_coord x;    ///< The x (left) coordinate.
+			Tpoint_coord y;    ///< The y (top) coordinate.
+			Tdim_coord width;  ///< The width.
+			Tdim_coord height; ///< The height.
+		}
+		coordinates;
+
+		struct {
+			Tpoint_coord x;    ///< The x (left) coordinate.
+			Tpoint_coord y;    ///< The y (top) coordinate.
+			Tdim_coord width;  ///< The width.
+			Tdim_coord height; ///< The height.
+		};
+
+		struct {
+			PointT<Tpoint_coord> point;       // The top-left coordinates.
+			DimensionT<Tdim_coord> dimension; // The width/height coordinates.
+		};
+	};
+
+	/**
+	 * Create initialized PointDimensionT object.
+	 *
+	 * @note This is a "named constructor", no regular constructor to keep POD'ness.
+	 *
+	 * @param x Initial x coordinate.
+	 * @param y Initial y coordinate.
+	 * @param width Initial width.
+	 * @param height Initial height.
+	 * @return PointDimensionT initialized with given values.
+	 */
+	FORCEINLINE static PointDimensionT<Tpoint_coord, Tdim_coord> Create(Tpoint_coord x, Tpoint_coord y, Tdim_coord width, Tdim_coord height)
+	{
+		PointDimensionT<Tpoint_coord, Tdim_coord> ret = { { { x, y, width, height } } };
+		return ret;
+	}
+
+	/**
+	 * Create initialized PointDimensionT object.
+	 *
+	 * @note This is a "named constructor", no regular constructor to keep POD'ness.
+	 *
+	 * @param point Initial x and y coordinates.
+	 * @param dimension Initial width and height.
+	 * @return PointDimensionT initialized with given values.
+	 */
+	FORCEINLINE static PointDimensionT<Tpoint_coord, Tdim_coord> Create(const PointT<Tpoint_coord> &point, const DimensionT<Tdim_coord> &dimension)
+	{
+		PointDimensionT<Tpoint_coord, Tdim_coord> ret = { { { point.x, point.y, dimension.width, dimension.height } } };
+		return ret;
+	}
 };
 
-/** A pair of two integers */
-struct Pair {
-	int a;
-	int b;
+/**
+ * A pair of two variables.
+ * @tparam Ta Type of the first variable.
+ * @tparam Ta Type of the second variable.
+ */
+template <typename Ta, typename Tb = Ta>
+struct PairT {
+	Ta a; ///< The first variable.
+	Tb b; ///< The second variable.
+
+	/**
+	 * Create initialized PairT object.
+	 *
+	 * @note This is a "named constructor", no regular constructor to keep POD'ness.
+	 *
+	 * @param a Initial value for the first variable of a pair.
+	 * @param b Initial value for the second variable of a pair.
+	 * @return PairT initialized with given values.
+	 */
+	FORCEINLINE static PairT<Ta, Tb> Create(Ta a, Tb b)
+	{
+		PairT<Ta, Tb> ret = { a, b };
+		return ret;
+	}
 };
 
+/**
+ * Type of rectangle to store and compute surrounding bounds of an object(s) in 2D.
+ * @tparam T Type of fields storing coordinates.
+ *
+ * @note There must exist an std::numeric_limits<T> instance thus T must be a numeric
+ *       type or otherwise you must instantiate the std::numeric_limits. See BoundsT::EMPTY
+ *       for more information.
+ *
+ * @note When including an object each bound is checked and updated separately i.e. when
+ *       minimal x is being updated then comparison to maximal x will not be skipped and
+ *       vice versa.
+ */
+template <typename T>
+struct BoundsT {
+	PointT<T> min; ///< Minimal x and minimal y coordinate.
+	PointT<T> max; ///< Maximal x and maximal y coordinate.
+
+	static const BoundsT<T> EMPTY;
+
+	/**
+	 * Cast to RectT structure.
+	 * Minimal x becomes left coordinate, minimal y becomes top coordinate and so on.
+	 * @return Reference to this object as reference to RectT object.
+	 */
+	FORCEINLINE RectT<T> &AsRect() { return reinterpret_cast<RectT<T>&>(*this); }
+
+	/**
+	 * Cast to RectT structure (const).
+	 * Minimal x becomes left coordinate, minimal y becomes top coordinate and so on.
+	 * @return Reference to this object as reference to RectT object.
+	 */
+	FORCEINLINE const RectT<T> &AsRect() const { return reinterpret_cast<RectT<T>&>(*this); }
+
+	/**
+	 * Cast a RectT reference to BoundsT reference.
+	 * The left coordinate becomes the minimal x, the top coordinate becomes the minimal y and so on.
+	 * @param rect RectT reference to cast from.
+	 * @return rect reference casted to BoundsT.
+	 */
+	FORCEINLINE static BoundsT<T> &FromRect(RectT<T> &rect) { return reinterpret_cast<BoundsT<T>&>(rect); }
+
+	/**
+	 * Cast a RectT reference to BoundsT reference (const).
+	 * The left coordinate becomes the minimal x, the top coordinate becomes the minimal y and so on.
+	 * @param rect RectT reference to cast from.
+	 * @return rect reference casted to BoundsT.
+	 */
+	FORCEINLINE static const BoundsT<T> &FromRect(const RectT<T> &rect) { return reinterpret_cast<BoundsT<T>&>(rect); }
+
+	/**
+	 * Include a point with a given x and y coordinates.
+	 * @param x The x coordinate of being included point.
+	 * @param y The y coordinate of being included point.
+	 * @return Reference to this object.
+	 */
+	BoundsT<T> &Include(T x, T y)
+	{
+		if (this->min.x > x) this->min.x = x;
+		if (this->max.x < x) this->max.x = x;
+		if (this->min.y > y) this->min.y = y;
+		if (this->max.y < y) this->max.y = y;
+
+		return *this;
+	}
+
+	/**
+	 * Include a point.
+	 * @param point The point to include.
+	 * @return Reference to this object.
+	 */
+	FORCEINLINE BoundsT<T> &Include(const PointT<T> &point) { return this->Include(point.x, point.y); }
+
+	/**
+	 * Include a rectangle.
+	 * @param rect The rectangle to include.
+	 * @return Reference to this object.
+	 */
+	FORCEINLINE BoundsT<T> &Include(const RectT<T> &rect) { return this->AsRect().Unify(rect), *this; }
+
+	/**
+	 * Include other bounds.
+	 * @param bounds The other bounds to include.
+	 * @return Reference to this object.
+	 */
+	FORCEINLINE BoundsT<T> &Include(const BoundsT<T> &bounds) { return this->Include(bounds.AsRect()); }
+};
+
+#ifdef min
+	#undef min
+#endif
+
+#ifdef max
+	#undef max
+#endif
+
+/**
+ * An empty bounds.
+ * Including any object to this bounds for the first time results in bounds of that
+ * object. std::numeric_limits<T>.max() is used to initialize minimal coordinates and
+ * std::numeric_limits<T>.min() is used to initialize maximal coordinates so they are
+ * overwritten when including any other object.
+ *
+ * @warning Minimal coordinates are grater then maximal coordinates here.
+ */
+template <typename T>
+const BoundsT<T> BoundsT<T>::EMPTY = {
+	{ std::numeric_limits<T>::max(), std::numeric_limits<T>::max() },
+	{ std::numeric_limits<T>::min(), std::numeric_limits<T>::min() }
+};
+
+/** Integer coordinates of a point in 2D. */
+typedef PointT<int> Point;
+
+/** Integer dimensions (a width and height) of a rectangle in 2D. */
+typedef DimensionT<uint> Dimension;
+
+/** Specification of a rectangle with absolute integer coordinates of all edges. */
+typedef RectT<int> Rect;
+
+/**
+ * Specification of a rectangle with an absolute top-left integer coordinate and
+ * a (relative) width/height.
+ */
+typedef PointDimensionT<int> PointDimension;
+
+/** A pair of two integers. */
+typedef PairT<int> Pair;
+
+/** Integer, rectangular bounds. */
+typedef BoundsT<int> Bounds;
+
 #endif /* GEOMETRY_TYPE_HPP */
Index: src/station.cpp
===================================================================
--- src/station.cpp	(revision 18781)
+++ src/station.cpp	(working copy)
@@ -243,12 +243,12 @@
 	/* Compute acceptance rectangle */
 	int catchment_radius = this->GetCatchmentRadius();
 
-	Rect ret = {
+	Rect ret = { { {
 		max<int>(this->rect.left   - catchment_radius, 0),
 		max<int>(this->rect.top    - catchment_radius, 0),
 		min<int>(this->rect.right  + catchment_radius, MapMaxX()),
 		min<int>(this->rect.bottom + catchment_radius, MapMaxY())
-	};
+	} } };
 
 	return ret;
 }
@@ -378,7 +378,7 @@
 	} else if (!PtInExtendedRect(x, y)) {
 		/* current rect is not empty and new point is outside this rect
 		 * make new spread-out rectangle */
-		Rect new_rect = {min(x, this->left), min(y, this->top), max(x, this->right), max(y, this->bottom)};
+		Rect new_rect = { { { min(x, this->left), min(y, this->top), max(x, this->right), max(y, this->bottom) } } };
 
 		/* check new rect dimensions against preset max */
 		int w = new_rect.right - new_rect.left + 1;
Index: src/station_gui.cpp
===================================================================
--- src/station_gui.cpp	(revision 18781)
+++ src/station_gui.cpp	(working copy)
@@ -105,7 +105,7 @@
 			}
 			if (cargos[i] >= (supplies ? 1U : 8U)) SetBit(cargo_mask, i);
 		}
-		Rect r = {left, top, right, INT32_MAX};
+		Rect r = { { { left, top, right, INT32_MAX } } };
 		return DrawCargoListText(cargo_mask, r, supplies ? STR_STATION_BUILD_SUPPLIES_CARGO : STR_STATION_BUILD_ACCEPTS_CARGO);
 	}
 
@@ -950,7 +950,7 @@
 
 		if (!this->IsShaded()) {
 			NWidgetBase *nwi = this->GetWidget<NWidgetBase>(SVW_WAITING);
-			Rect waiting_rect = {nwi->pos_x, nwi->pos_y, nwi->pos_x + nwi->current_x - 1, nwi->pos_y + nwi->current_y - 1};
+			Rect waiting_rect = { { { nwi->pos_x, nwi->pos_y, nwi->pos_x + nwi->current_x - 1, nwi->pos_y + nwi->current_y - 1 } } };
 			this->DrawWaitingCargo(waiting_rect, cargolist, transfers);
 		}
 	}
@@ -1097,7 +1097,7 @@
 		for (CargoID i = 0; i < NUM_CARGO; i++) {
 			if (HasBit(st->goods[i].acceptance_pickup, GoodsEntry::ACCEPTANCE)) SetBit(cargo_mask, i);
 		}
-		Rect s = {r.left + WD_FRAMERECT_LEFT, r.top + WD_FRAMERECT_TOP, r.right - WD_FRAMERECT_RIGHT, r.bottom - WD_FRAMERECT_BOTTOM};
+		Rect s = { { { r.left + WD_FRAMERECT_LEFT, r.top + WD_FRAMERECT_TOP, r.right - WD_FRAMERECT_RIGHT, r.bottom - WD_FRAMERECT_BOTTOM } } };
 		DrawCargoListText(cargo_mask, s, STR_STATION_VIEW_ACCEPTS_CARGO);
 	}
 
