Index: src/airport_gui.cpp
===================================================================
--- src/airport_gui.cpp	(revision 22753)
+++ src/airport_gui.cpp	(working copy)
@@ -114,7 +114,7 @@
 		return ES_HANDLED;
 	}
 
-	virtual void OnPlaceObject(Point pt, TileIndex tile)
+	virtual void OnPlaceObject(Point pt, TileIndex tile, ViewPort *vp)
 	{
 		switch (this->last_user_action) {
 			case ATW_AIRPORT:
@@ -122,7 +122,7 @@
 				break;
 
 			case ATW_DEMOLISH:
-				PlaceProc_DemolishArea(tile);
+				PlaceProc_DemolishArea(vp, tile);
 				break;
 
 			default: NOT_REACHED();
Index: src/company_gui.cpp
===================================================================
--- src/company_gui.cpp	(revision 22753)
+++ src/company_gui.cpp	(working copy)
@@ -2037,7 +2037,7 @@
 		this->SetDirty();
 	}
 
-	virtual void OnPlaceObject(Point pt, TileIndex tile)
+	virtual void OnPlaceObject(Point pt, TileIndex tile, ViewPort *vp)
 	{
 		if (DoCommandP(tile, OBJECT_HQ, 0, CMD_BUILD_OBJECT | CMD_MSG(STR_ERROR_CAN_T_BUILD_COMPANY_HEADQUARTERS))) {
 			ResetObjectToPlace();
Index: src/dock_gui.cpp
===================================================================
--- src/dock_gui.cpp	(revision 22753)
+++ src/dock_gui.cpp	(working copy)
@@ -186,11 +186,11 @@
 		return ES_HANDLED;
 	}
 
-	virtual void OnPlaceObject(Point pt, TileIndex tile)
+	virtual void OnPlaceObject(Point pt, TileIndex tile, ViewPort *vp)
 	{
 		switch (this->last_clicked_widget) {
 			case DTW_CANAL: // Build canal button
-				VpStartPlaceSizing(tile, (_game_mode == GM_EDITOR) ? VPM_X_AND_Y : VPM_X_OR_Y, DDSP_CREATE_WATER);
+				VpStartPlaceSizing(vp, tile, (_game_mode == GM_EDITOR) ? VPM_X_AND_Y : VPM_X_OR_Y, DDSP_CREATE_WATER);
 				break;
 
 			case DTW_LOCK: // Build lock button
@@ -198,7 +198,7 @@
 				break;
 
 			case DTW_DEMOLISH: // Demolish aka dynamite button
-				PlaceProc_DemolishArea(tile);
+				PlaceProc_DemolishArea(vp, tile);
 				break;
 
 			case DTW_DEPOT: // Build depot button
@@ -224,7 +224,7 @@
 				break;
 
 			case DTW_RIVER: // Build river button (in scenario editor)
-				VpStartPlaceSizing(tile, VPM_X_AND_Y, DDSP_CREATE_RIVER);
+				VpStartPlaceSizing(vp, tile, VPM_X_AND_Y, DDSP_CREATE_RIVER);
 				break;
 
 			case DTW_BUILD_AQUEDUCT: // Build aqueduct button
Index: src/industry_gui.cpp
===================================================================
--- src/industry_gui.cpp	(revision 22753)
+++ src/industry_gui.cpp	(working copy)
@@ -530,7 +530,7 @@
 		this->GetWidget<NWidgetCore>(DPIW_MATRIX_WIDGET)->widget_data = (this->vscroll->GetCapacity() << MAT_ROW_START) + (1 << MAT_COL_START);
 	}
 
-	virtual void OnPlaceObject(Point pt, TileIndex tile)
+	virtual void OnPlaceObject(Point pt, TileIndex tile, ViewPort *vp)
 	{
 		bool success = true;
 		/* We do not need to protect ourselves against "Random Many Industries" in this mode */
@@ -665,7 +665,6 @@
 public:
 	IndustryViewWindow(const WindowDesc *desc, WindowNumber window_number) : Window()
 	{
-		this->flags4 |= WF_DISABLE_VP_SCROLL;
 		this->editbox_line = IL_NONE;
 		this->clicked_line = IL_NONE;
 		this->clicked_button = 0;
@@ -673,7 +672,7 @@
 
 		this->InitNested(desc, window_number);
 		NWidgetViewport *nvp = this->GetWidget<NWidgetViewport>(IVW_VIEWPORT);
-		nvp->InitializeViewport(this, Industry::Get(window_number)->location.GetCenterTile(), ZOOM_LVL_INDUSTRY);
+		nvp->InitializeViewport(this, Industry::Get(window_number)->location.GetCenterTile(), ZOOM_LVL_INDUSTRY, VPFL_DISABLE_SCROLL);
 
 		this->InvalidateData();
 	}
Index: src/news_gui.cpp
===================================================================
--- src/news_gui.cpp	(revision 22753)
+++ src/news_gui.cpp	(working copy)
@@ -293,8 +293,6 @@
 		this->chat_height = (w != NULL) ? w->height : 0;
 		this->status_height = FindWindowById(WC_STATUS_BAR, 0)->height;
 
-		this->flags4 |= WF_DISABLE_VP_SCROLL;
-
 		this->CreateNestedTree(desc);
 		switch (this->ni->subtype) {
 			case NS_COMPANY_TROUBLE:
@@ -321,7 +319,7 @@
 		/* Initialize viewport if it exists. */
 		NWidgetViewport *nvp = this->GetWidget<NWidgetViewport>(NTW_VIEWPORT);
 		if (nvp != NULL) {
-			nvp->InitializeViewport(this, ni->reftype1 == NR_VEHICLE ? 0x80000000 | ni->ref1 : GetReferenceTile(ni->reftype1, ni->ref1), ZOOM_LVL_NEWS);
+			nvp->InitializeViewport(this, ni->reftype1 == NR_VEHICLE ? 0x80000000 | ni->ref1 : GetReferenceTile(ni->reftype1, ni->ref1), ZOOM_LVL_NEWS, VPFL_DISABLE_SCROLL | VPFL_DISABLE_PLACING | VPFL_DISABLE_CROSS_VP_DRAG);
 			if (this->ni->flags & NF_NO_TRANSPARENT) nvp->disp_flags |= ND_NO_TRANSPARENCY;
 			if ((this->ni->flags & NF_INCOLOUR) == 0) {
 				nvp->disp_flags |= ND_SHADE_GREY;
@@ -526,7 +524,10 @@
 	 */
 	void SetWindowTop(int newtop)
 	{
-		if (this->top == newtop) return;
+		if (this->top == newtop) {
+			if (this->viewport != NULL) this->viewport->flags &= ~VPFL_DISABLE_PLACING;
+			return;
+		}
 
 		int mintop = min(newtop, this->top);
 		int maxtop = max(newtop, this->top);
Index: src/order_gui.cpp
===================================================================
--- src/order_gui.cpp	(revision 22753)
+++ src/order_gui.cpp	(working copy)
@@ -1351,7 +1351,7 @@
 		return CheckHotkeyMatch<OrdersWindow>(order_hotkeys, keycode, this) != -1 ? ES_HANDLED : ES_NOT_HANDLED;
 	}
 
-	virtual void OnPlaceObject(Point pt, TileIndex tile)
+	virtual void OnPlaceObject(Point pt, TileIndex tile, ViewPort *vp)
 	{
 		if (this->goto_type == OPOS_GOTO) {
 			const Order cmd = GetOrderCmdFromTile(this->vehicle, tile);
Index: src/rail_gui.cpp
===================================================================
--- src/rail_gui.cpp	(revision 22753)
+++ src/rail_gui.cpp	(working copy)
@@ -132,17 +132,17 @@
  * Place a rail waypoint.
  * @param tile Position to start dragging a waypoint.
  */
-static void PlaceRail_Waypoint(TileIndex tile)
+static void PlaceRail_Waypoint(ViewPort *vp, TileIndex tile)
 {
 	if (_remove_button_clicked) {
-		VpStartPlaceSizing(tile, VPM_X_AND_Y, DDSP_REMOVE_STATION);
+		VpStartPlaceSizing(vp, tile, VPM_X_AND_Y, DDSP_REMOVE_STATION);
 		return;
 	}
 
 	Axis axis = GetAxisForNewWaypoint(tile);
 	if (IsValidAxis(axis)) {
 		/* Valid tile for waypoints */
-		VpStartPlaceSizing(tile, axis == AXIS_X ? VPM_FIX_X : VPM_FIX_Y, DDSP_BUILD_STATION);
+		VpStartPlaceSizing(vp, tile, axis == AXIS_X ? VPM_FIX_X : VPM_FIX_Y, DDSP_BUILD_STATION);
 	} else {
 		/* Tile where we can't build rail waypoints. This is always going to fail,
 		 * but provides the user with a proper error message. */
@@ -163,13 +163,13 @@
  * Place a rail station.
  * @param tile Position to place or start dragging a station.
  */
-static void PlaceRail_Station(TileIndex tile)
+static void PlaceRail_Station(ViewPort *vp, TileIndex tile)
 {
 	if (_remove_button_clicked) {
-		VpStartPlaceSizing(tile, VPM_X_AND_Y_LIMITED, DDSP_REMOVE_STATION);
+		VpStartPlaceSizing(vp, tile, VPM_X_AND_Y_LIMITED, DDSP_REMOVE_STATION);
 		VpSetPlaceSizingLimit(-1);
 	} else if (_settings_client.gui.station_dragdrop) {
-		VpStartPlaceSizing(tile, VPM_X_AND_Y_LIMITED, DDSP_BUILD_STATION);
+		VpStartPlaceSizing(vp, tile, VPM_X_AND_Y_LIMITED, DDSP_BUILD_STATION);
 		VpSetPlaceSizingLimit(_settings_game.station.station_spread);
 	} else {
 		uint32 p1 = _cur_railtype | _railstation.orientation << 4 | _settings_client.gui.station_numtracks << 8 | _settings_client.gui.station_platlength << 16 | _ctrl_pressed << 24;
@@ -240,14 +240,14 @@
  * @param tile Position of the first tile of the bridge.
  * @param w    Rail toolbar window.
  */
-static void PlaceRail_Bridge(TileIndex tile, Window *w)
+static void PlaceRail_Bridge(ViewPort *vp, TileIndex tile, Window *w)
 {
 	if (IsBridgeTile(tile)) {
 		TileIndex other_tile = GetOtherTunnelBridgeEnd(tile);
 		Point pt = {0, 0};
 		w->OnPlaceMouseUp(VPM_X_OR_Y, DDSP_BUILD_BRIDGE, pt, tile, other_tile);
 	} else {
-		VpStartPlaceSizing(tile, VPM_X_OR_Y, DDSP_BUILD_BRIDGE);
+		VpStartPlaceSizing(vp, tile, VPM_X_OR_Y, DDSP_BUILD_BRIDGE);
 	}
 }
 
@@ -608,31 +608,31 @@
 		return ES_HANDLED;
 	}
 
-	virtual void OnPlaceObject(Point pt, TileIndex tile)
+	virtual void OnPlaceObject(Point pt, TileIndex tile, ViewPort *vp)
 	{
 		switch (this->last_user_action) {
 			case RTW_BUILD_NS:
-				VpStartPlaceSizing(tile, VPM_FIX_VERTICAL | VPM_RAILDIRS, DDSP_PLACE_RAIL);
+				VpStartPlaceSizing(vp, tile, VPM_FIX_VERTICAL | VPM_RAILDIRS, DDSP_PLACE_RAIL);
 				break;
 
 			case RTW_BUILD_X:
-				VpStartPlaceSizing(tile, VPM_FIX_Y | VPM_RAILDIRS, DDSP_PLACE_RAIL);
+				VpStartPlaceSizing(vp, tile, VPM_FIX_Y | VPM_RAILDIRS, DDSP_PLACE_RAIL);
 				break;
 
 			case RTW_BUILD_EW:
-				VpStartPlaceSizing(tile, VPM_FIX_HORIZONTAL | VPM_RAILDIRS, DDSP_PLACE_RAIL);
+				VpStartPlaceSizing(vp, tile, VPM_FIX_HORIZONTAL | VPM_RAILDIRS, DDSP_PLACE_RAIL);
 				break;
 
 			case RTW_BUILD_Y:
-				VpStartPlaceSizing(tile, VPM_FIX_X | VPM_RAILDIRS, DDSP_PLACE_RAIL);
+				VpStartPlaceSizing(vp, tile, VPM_FIX_X | VPM_RAILDIRS, DDSP_PLACE_RAIL);
 				break;
 
 			case RTW_AUTORAIL:
-				VpStartPlaceSizing(tile, VPM_RAILDIRS, DDSP_PLACE_RAIL);
+				VpStartPlaceSizing(vp, tile, VPM_RAILDIRS, DDSP_PLACE_RAIL);
 				break;
 
 			case RTW_DEMOLISH:
-				PlaceProc_DemolishArea(tile);
+				PlaceProc_DemolishArea(vp, tile);
 				break;
 
 			case RTW_BUILD_DEPOT:
@@ -642,19 +642,19 @@
 				break;
 
 			case RTW_BUILD_WAYPOINT:
-				PlaceRail_Waypoint(tile);
+				PlaceRail_Waypoint(vp, tile);
 				break;
 
 			case RTW_BUILD_STATION:
-				PlaceRail_Station(tile);
+				PlaceRail_Station(vp, tile);
 				break;
 
 			case RTW_BUILD_SIGNALS:
-				VpStartPlaceSizing(tile, VPM_SIGNALDIRS, DDSP_BUILD_SIGNALS);
+				VpStartPlaceSizing(vp, tile, VPM_SIGNALDIRS, DDSP_BUILD_SIGNALS);
 				break;
 
 			case RTW_BUILD_BRIDGE:
-				PlaceRail_Bridge(tile, this);
+				PlaceRail_Bridge(vp, tile, this);
 				break;
 
 			case RTW_BUILD_TUNNEL:
@@ -662,7 +662,7 @@
 				break;
 
 			case RTW_CONVERT_RAIL:
-				VpStartPlaceSizing(tile, VPM_X_AND_Y, DDSP_CONVERT_RAIL);
+				VpStartPlaceSizing(vp, tile, VPM_X_AND_Y, DDSP_CONVERT_RAIL);
 				break;
 
 			default: NOT_REACHED();
Index: src/road_gui.cpp
===================================================================
--- src/road_gui.cpp	(revision 22753)
+++ src/road_gui.cpp	(working copy)
@@ -68,14 +68,14 @@
  * Callback to start placing a bridge.
  * @param tile Start tile of the bridge.
  */
-static void PlaceRoad_Bridge(TileIndex tile, Window *w)
+static void PlaceRoad_Bridge(ViewPort *vp, TileIndex tile, Window *w)
 {
 	if (IsBridgeTile(tile)) {
 		TileIndex other_tile = GetOtherTunnelBridgeEnd(tile);
 		Point pt = {0, 0};
 		w->OnPlaceMouseUp(VPM_X_OR_Y, DDSP_BUILD_BRIDGE, pt, tile, other_tile);
 	} else {
-		VpStartPlaceSizing(tile, VPM_X_OR_Y, DDSP_BUILD_BRIDGE);
+		VpStartPlaceSizing(vp, tile, VPM_X_OR_Y, DDSP_BUILD_BRIDGE);
 	}
 }
 
@@ -236,15 +236,15 @@
  * Callback for placing a bus station.
  * @param tile Position to place the station.
  */
-static void PlaceRoad_BusStation(TileIndex tile)
+static void PlaceRoad_BusStation(ViewPort *vp, TileIndex tile)
 {
 	if (_remove_button_clicked) {
-		VpStartPlaceSizing(tile, VPM_X_AND_Y, DDSP_REMOVE_BUSSTOP);
+		VpStartPlaceSizing(vp, tile, VPM_X_AND_Y, DDSP_REMOVE_BUSSTOP);
 	} else {
 		if (_road_station_picker_orientation < DIAGDIR_END) { // Not a drive-through stop.
-			VpStartPlaceSizing(tile, (DiagDirToAxis(_road_station_picker_orientation) == AXIS_X) ? VPM_X_LIMITED : VPM_Y_LIMITED, DDSP_BUILD_BUSSTOP);
+			VpStartPlaceSizing(vp, tile, (DiagDirToAxis(_road_station_picker_orientation) == AXIS_X) ? VPM_X_LIMITED : VPM_Y_LIMITED, DDSP_BUILD_BUSSTOP);
 		} else {
-			VpStartPlaceSizing(tile, VPM_X_AND_Y_LIMITED, DDSP_BUILD_BUSSTOP);
+			VpStartPlaceSizing(vp, tile, VPM_X_AND_Y_LIMITED, DDSP_BUILD_BUSSTOP);
 		}
 		VpSetPlaceSizingLimit(_settings_game.station.station_spread);
 	}
@@ -254,15 +254,15 @@
  * Callback for placing a truck station.
  * @param tile Position to place the station.
  */
-static void PlaceRoad_TruckStation(TileIndex tile)
+static void PlaceRoad_TruckStation(ViewPort *vp, TileIndex tile)
 {
 	if (_remove_button_clicked) {
-		VpStartPlaceSizing(tile, VPM_X_AND_Y, DDSP_REMOVE_TRUCKSTOP);
+		VpStartPlaceSizing(vp, tile, VPM_X_AND_Y, DDSP_REMOVE_TRUCKSTOP);
 	} else {
 		if (_road_station_picker_orientation < DIAGDIR_END) { // Not a drive-through stop.
-			VpStartPlaceSizing(tile, (DiagDirToAxis(_road_station_picker_orientation) == AXIS_X) ? VPM_X_LIMITED : VPM_Y_LIMITED, DDSP_BUILD_TRUCKSTOP);
+			VpStartPlaceSizing(vp, tile, (DiagDirToAxis(_road_station_picker_orientation) == AXIS_X) ? VPM_X_LIMITED : VPM_Y_LIMITED, DDSP_BUILD_TRUCKSTOP);
 		} else {
-			VpStartPlaceSizing(tile, VPM_X_AND_Y_LIMITED, DDSP_BUILD_TRUCKSTOP);
+			VpStartPlaceSizing(vp, tile, VPM_X_AND_Y_LIMITED, DDSP_BUILD_TRUCKSTOP);
 		}
 		VpSetPlaceSizingLimit(_settings_game.station.station_spread);
 	}
@@ -496,7 +496,7 @@
 		return ES_HANDLED;
 	}
 
-	virtual void OnPlaceObject(Point pt, TileIndex tile)
+	virtual void OnPlaceObject(Point pt, TileIndex tile, ViewPort *vp)
 	{
 		_remove_button_clicked = this->IsWidgetLowered(RTW_REMOVE);
 		_one_way_button_clicked = this->IsWidgetLowered(RTW_ONE_WAY);
@@ -504,24 +504,24 @@
 			case RTW_ROAD_X:
 				_place_road_flag = RF_DIR_X;
 				if (_tile_fract_coords.x >= 8) _place_road_flag |= RF_START_HALFROAD_X;
-				VpStartPlaceSizing(tile, VPM_FIX_Y, DDSP_PLACE_ROAD_X_DIR);
+				VpStartPlaceSizing(vp, tile, VPM_FIX_Y, DDSP_PLACE_ROAD_X_DIR);
 				break;
 
 			case RTW_ROAD_Y:
 				_place_road_flag = RF_DIR_Y;
 				if (_tile_fract_coords.y >= 8) _place_road_flag |= RF_START_HALFROAD_Y;
-				VpStartPlaceSizing(tile, VPM_FIX_X, DDSP_PLACE_ROAD_Y_DIR);
+				VpStartPlaceSizing(vp, tile, VPM_FIX_X, DDSP_PLACE_ROAD_Y_DIR);
 				break;
 
 			case RTW_AUTOROAD:
 				_place_road_flag = RF_NONE;
 				if (_tile_fract_coords.x >= 8) _place_road_flag |= RF_START_HALFROAD_X;
 				if (_tile_fract_coords.y >= 8) _place_road_flag |= RF_START_HALFROAD_Y;
-				VpStartPlaceSizing(tile, VPM_X_OR_Y, DDSP_PLACE_AUTOROAD);
+				VpStartPlaceSizing(vp, tile, VPM_X_OR_Y, DDSP_PLACE_AUTOROAD);
 				break;
 
 			case RTW_DEMOLISH:
-				PlaceProc_DemolishArea(tile);
+				PlaceProc_DemolishArea(vp, tile);
 				break;
 
 			case RTW_DEPOT:
@@ -530,15 +530,15 @@
 				break;
 
 			case RTW_BUS_STATION:
-				PlaceRoad_BusStation(tile);
+				PlaceRoad_BusStation(vp, tile);
 				break;
 
 			case RTW_TRUCK_STATION:
-				PlaceRoad_TruckStation(tile);
+				PlaceRoad_TruckStation(vp, tile);
 				break;
 
 			case RTW_BUILD_BRIDGE:
-				PlaceRoad_Bridge(tile, this);
+				PlaceRoad_Bridge(vp, tile, this);
 				break;
 
 			case RTW_BUILD_TUNNEL:
Index: src/terraform_gui.cpp
===================================================================
--- src/terraform_gui.cpp	(revision 22753)
+++ src/terraform_gui.cpp	(working copy)
@@ -136,9 +136,9 @@
  * Start a drag for demolishing an area.
  * @param tile Position of one corner.
  */
-void PlaceProc_DemolishArea(TileIndex tile)
+void PlaceProc_DemolishArea(ViewPort *vp, TileIndex tile)
 {
-	VpStartPlaceSizing(tile, VPM_X_AND_Y, DDSP_DEMOLISH_AREA);
+	VpStartPlaceSizing(vp, tile, VPM_X_AND_Y, DDSP_DEMOLISH_AREA);
 }
 
 /** Enum referring to the widgets of the terraform toolbar */
@@ -246,23 +246,23 @@
 		return ES_HANDLED;
 	}
 
-	virtual void OnPlaceObject(Point pt, TileIndex tile)
+	virtual void OnPlaceObject(Point pt, TileIndex tile, ViewPort *vp)
 	{
 		switch (this->last_user_action) {
 			case TTW_LOWER_LAND: // Lower land button
-				VpStartPlaceSizing(tile, VPM_X_AND_Y, DDSP_LOWER_AND_LEVEL_AREA);
+				VpStartPlaceSizing(vp, tile, VPM_X_AND_Y, DDSP_LOWER_AND_LEVEL_AREA);
 				break;
 
 			case TTW_RAISE_LAND: // Raise land button
-				VpStartPlaceSizing(tile, VPM_X_AND_Y, DDSP_RAISE_AND_LEVEL_AREA);
+				VpStartPlaceSizing(vp, tile, VPM_X_AND_Y, DDSP_RAISE_AND_LEVEL_AREA);
 				break;
 
 			case TTW_LEVEL_LAND: // Level land button
-				VpStartPlaceSizing(tile, VPM_X_AND_Y, DDSP_LEVEL_AREA);
+				VpStartPlaceSizing(vp, tile, VPM_X_AND_Y, DDSP_LEVEL_AREA);
 				break;
 
 			case TTW_DEMOLISH: // Demolish aka dynamite button
-				PlaceProc_DemolishArea(tile);
+				PlaceProc_DemolishArea(vp, tile);
 				break;
 
 			case TTW_BUY_LAND: // Buy land button
@@ -699,11 +699,11 @@
 		}
 	}
 
-	virtual void OnPlaceObject(Point pt, TileIndex tile)
+	virtual void OnPlaceObject(Point pt, TileIndex tile, ViewPort *vp)
 	{
 		switch (this->last_user_action) {
 			case ETTW_DEMOLISH: // Demolish aka dynamite button
-				PlaceProc_DemolishArea(tile);
+				PlaceProc_DemolishArea(vp, tile);
 				break;
 
 			case ETTW_LOWER_LAND: // Lower land button
@@ -715,15 +715,15 @@
 				break;
 
 			case ETTW_LEVEL_LAND: // Level land button
-				VpStartPlaceSizing(tile, VPM_X_AND_Y, DDSP_LEVEL_AREA);
+				VpStartPlaceSizing(vp, tile, VPM_X_AND_Y, DDSP_LEVEL_AREA);
 				break;
 
 			case ETTW_PLACE_ROCKS: // Place rocks button
-				VpStartPlaceSizing(tile, VPM_X_AND_Y, DDSP_CREATE_ROCKS);
+				VpStartPlaceSizing(vp, tile, VPM_X_AND_Y, DDSP_CREATE_ROCKS);
 				break;
 
 			case ETTW_PLACE_DESERT: // Place desert button (in tropical climate)
-				VpStartPlaceSizing(tile, VPM_X_AND_Y, DDSP_CREATE_DESERT);
+				VpStartPlaceSizing(vp, tile, VPM_X_AND_Y, DDSP_CREATE_DESERT);
 				break;
 
 			case ETTW_PLACE_OBJECT: // Place transmitter button
Index: src/tilehighlight_func.h
===================================================================
--- src/tilehighlight_func.h	(revision 22753)
+++ src/tilehighlight_func.h	(working copy)
@@ -15,7 +15,7 @@
 #include "gfx_type.h"
 #include "tilehighlight_type.h"
 
-void PlaceProc_DemolishArea(TileIndex tile);
+void PlaceProc_DemolishArea(ViewPort *vp, TileIndex tile);
 bool GUIPlaceProcDragXY(ViewportDragDropSelectionProcess proc, TileIndex start_tile, TileIndex end_tile);
 
 bool HandlePlacePushButton(Window *w, int widget, CursorID cursor, HighLightStyle mode);
@@ -24,7 +24,7 @@
 void ResetObjectToPlace();
 
 void VpSelectTilesWithMethod(int x, int y, ViewportPlaceMethod method);
-void VpStartPlaceSizing(TileIndex tile, ViewportPlaceMethod method, ViewportDragDropSelectionProcess process);
+void VpStartPlaceSizing(ViewPort *vp, TileIndex tile, ViewportPlaceMethod method, ViewportDragDropSelectionProcess process);
 void VpSetPresizeRange(TileIndex from, TileIndex to);
 void VpSetPlaceSizingLimit(int limit);
 
Index: src/tilehighlight_type.h
===================================================================
--- src/tilehighlight_type.h	(revision 22753)
+++ src/tilehighlight_type.h	(working copy)
@@ -61,6 +61,8 @@
 	Point selend;        ///< The location where the drag currently ends.
 	byte sizelimit;      ///< Whether the selection is limited in length, and what the maximum length is.
 
+	ViewPort *locked_vp; ///< The viewport, if any, to lock the selection endpoint to
+
 	HighLightStyle drawstyle;      ///< Lower bits 0-3 are reserved for detailed highlight information.
 	HighLightStyle next_drawstyle; ///< Queued, but not yet drawn style.
 
Index: src/toolbar_gui.cpp
===================================================================
--- src/toolbar_gui.cpp	(revision 22753)
+++ src/toolbar_gui.cpp	(working copy)
@@ -1636,7 +1636,7 @@
 		return ES_HANDLED;
 	}
 
-	virtual void OnPlaceObject(Point pt, TileIndex tile)
+	virtual void OnPlaceObject(Point pt, TileIndex tile, ViewPort *vp)
 	{
 		switch (this->last_started_action) {
 			case CBF_PLACE_SIGN:
@@ -1957,7 +1957,7 @@
 		return ES_HANDLED;
 	}
 
-	virtual void OnPlaceObject(Point pt, TileIndex tile)
+	virtual void OnPlaceObject(Point pt, TileIndex tile, ViewPort *vp)
 	{
 		switch (this->last_started_action) {
 			case CBF_PLACE_SIGN:
Index: src/town_gui.cpp
===================================================================
--- src/town_gui.cpp	(revision 22753)
+++ src/town_gui.cpp	(working copy)
@@ -331,9 +331,8 @@
 
 		this->FinishInitNested(desc, window_number);
 
-		this->flags4 |= WF_DISABLE_VP_SCROLL;
 		NWidgetViewport *nvp = this->GetWidget<NWidgetViewport>(TVW_VIEWPORT);
-		nvp->InitializeViewport(this, this->town->xy, ZOOM_LVL_NEWS);
+		nvp->InitializeViewport(this, this->town->xy, ZOOM_LVL_NEWS, VPFL_DISABLE_SCROLL);
 
 		/* disable renaming town in network games if you are not the server */
 		this->SetWidgetDisabledState(TVW_CHANGENAME, _networking && !_network_server);
@@ -1167,7 +1166,7 @@
 		return state;
 	}
 
-	virtual void OnPlaceObject(Point pt, TileIndex tile)
+	virtual void OnPlaceObject(Point pt, TileIndex tile, ViewPort *vp)
 	{
 		this->ExecuteFoundTownCommand(tile, false, STR_ERROR_CAN_T_FOUND_TOWN_HERE, CcFoundTown);
 	}
Index: src/tree_gui.cpp
===================================================================
--- src/tree_gui.cpp	(revision 22753)
+++ src/tree_gui.cpp	(working copy)
@@ -125,9 +125,9 @@
 		}
 	}
 
-	virtual void OnPlaceObject(Point pt, TileIndex tile)
+	virtual void OnPlaceObject(Point pt, TileIndex tile, ViewPort *vp)
 	{
-		VpStartPlaceSizing(tile, VPM_X_AND_Y_LIMITED, DDSP_PLANT_TREES);
+		VpStartPlaceSizing(vp, tile, VPM_X_AND_Y_LIMITED, DDSP_PLANT_TREES);
 		VpSetPlaceSizingLimit(20);
 	}
 
Index: src/viewport.cpp
===================================================================
--- src/viewport.cpp	(revision 22753)
+++ src/viewport.cpp	(working copy)
@@ -176,7 +176,7 @@
  * @param zoom Zoomlevel to display
  */
 void InitializeWindowViewport(Window *w, int x, int y,
-	int width, int height, uint32 follow_flags, ZoomLevel zoom)
+	int width, int height, uint32 follow_flags, ZoomLevel zoom, ViewPortFlags flags)
 {
 	assert(w->viewport == NULL);
 
@@ -186,6 +186,7 @@
 	vp->top = y + w->top;
 	vp->width = width;
 	vp->height = height;
+	vp->flags = flags;
 
 	vp->zoom = zoom;
 
@@ -413,26 +414,25 @@
 /* When used for zooming, check area below current coordinates (x,y)
  * and return the tile of the zoomed out/in position (zoom_x, zoom_y)
  * when you just want the tile, make x = zoom_x and y = zoom_y */
-static Point GetTileFromScreenXY(int x, int y, int zoom_x, int zoom_y)
+static Point GetTileFromScreenXY(int x, int y, int zoom_x, int zoom_y, ViewPort **vp)
 {
 	Window *w;
-	ViewPort *vp;
 	Point pt;
 
 	if ( (w = FindWindowFromPt(x, y)) != NULL &&
-			 (vp = IsPtInWindowViewport(w, x, y)) != NULL)
-				return TranslateXYToTileCoord(vp, zoom_x, zoom_y);
+			 (*vp = IsPtInWindowViewport(w, x, y)) != NULL)
+				return TranslateXYToTileCoord(*vp, zoom_x, zoom_y);
 
 	pt.y = pt.x = -1;
 	return pt;
 }
 
-Point GetTileBelowCursor()
+Point GetTileBelowCursor(ViewPort **vp_out)
 {
-	return GetTileFromScreenXY(_cursor.pos.x, _cursor.pos.y, _cursor.pos.x, _cursor.pos.y);
+	ViewPort *vp;
+	return GetTileFromScreenXY(_cursor.pos.x, _cursor.pos.y, _cursor.pos.x, _cursor.pos.y, vp_out != NULL ? vp_out : &vp);
 }
 
-
 Point GetTileZoomCenterWindow(bool in, Window * w)
 {
 	int x, y;
@@ -446,7 +446,7 @@
 		y = vp->height - (_cursor.pos.y - vp->top);
 	}
 	/* Get the tile below the cursor and center on the zoomed-out center */
-	return GetTileFromScreenXY(_cursor.pos.x, _cursor.pos.y, x + vp->left, y + vp->top);
+	return GetTileFromScreenXY(_cursor.pos.x, _cursor.pos.y, x + vp->left, y + vp->top, &vp);
 }
 
 /**
@@ -1871,8 +1871,9 @@
 {
 	Point pt;
 	Window *w;
+	ViewPort *vp;
 
-	pt = GetTileBelowCursor();
+	pt = GetTileBelowCursor(&vp);
 	if (pt.x == -1) return;
 
 	if ((_thd.place_mode & HT_DRAG_MASK) == HT_POINT) {
@@ -1884,7 +1885,7 @@
 	_tile_fract_coords.y = pt.y & TILE_UNIT_MASK;
 
 	w = _thd.GetCallbackWnd();
-	if (w != NULL) w->OnPlaceObject(pt, TileVirtXY(pt.x, pt.y));
+	if (w != NULL) w->OnPlaceObject(pt, TileVirtXY(pt.x, pt.y), vp);
 }
 
 
@@ -1898,7 +1899,7 @@
 
 	/* Vehicle placement mode already handled above. */
 	if ((_thd.place_mode & HT_DRAG_MASK) != HT_NONE) {
-		PlaceObject();
+		if ((vp->flags & VPFL_DISABLE_PLACING) == 0) PlaceObject();
 		return true;
 	}
 
@@ -2091,10 +2092,11 @@
 			new_drawstyle = _thd.next_drawstyle;
 		}
 	} else if ((_thd.place_mode & HT_DRAG_MASK) != HT_NONE) {
-		Point pt = GetTileBelowCursor();
+		ViewPort *vp;
+		Point pt = GetTileBelowCursor(&vp);
 		x1 = pt.x;
 		y1 = pt.y;
-		if (x1 != -1) {
+		if (x1 != -1 && (vp->flags & VPFL_DISABLE_PLACING) == 0) {
 			switch (_thd.place_mode & HT_DRAG_MASK) {
 				case HT_RECT:
 					new_drawstyle = HT_RECT;
@@ -2173,7 +2175,7 @@
 }
 
 /** highlighting tiles while only going over them with the mouse */
-void VpStartPlaceSizing(TileIndex tile, ViewportPlaceMethod method, ViewportDragDropSelectionProcess process)
+void VpStartPlaceSizing(ViewPort *vp, TileIndex tile, ViewportPlaceMethod method, ViewportDragDropSelectionProcess process)
 {
 	_thd.select_method = method;
 	_thd.select_proc   = process;
@@ -2181,6 +2183,7 @@
 	_thd.selstart.x = TileX(tile) * TILE_SIZE;
 	_thd.selend.y = TileY(tile) * TILE_SIZE;
 	_thd.selstart.y = TileY(tile) * TILE_SIZE;
+	_thd.locked_vp = (vp->flags & VPFL_DISABLE_CROSS_VP_DRAG) != 0 ? vp : NULL;
 
 	/* Needed so several things (road, autoroad, bridges, ...) are placed correctly.
 	 * In effect, placement starts from the centre of a tile
@@ -2822,7 +2825,10 @@
 
 	/* while dragging execute the drag procedure of the corresponding window (mostly VpSelectTilesWithMethod() ) */
 	if (_left_button_down) {
-		w->OnPlaceDrag(_thd.select_method, _thd.select_proc, GetTileBelowCursor());
+		ViewPort *vp;
+		Point pt = GetTileBelowCursor(&vp);
+		if (pt.x != -1 && ((_thd.locked_vp != NULL && _thd.locked_vp != vp) || (_thd.locked_vp == NULL && (vp->flags & VPFL_DISABLE_CROSS_VP_DRAG) != 0))) pt.y = pt.x = -1;
+		w->OnPlaceDrag(_thd.select_method, _thd.select_proc, pt);
 		return ES_HANDLED;
 	}
 
Index: src/viewport_func.h
===================================================================
--- src/viewport_func.h	(revision 22753)
+++ src/viewport_func.h	(working copy)
@@ -22,9 +22,9 @@
 void SetSelectionRed(bool);
 
 void DeleteWindowViewport(Window *w);
-void InitializeWindowViewport(Window *w, int x, int y, int width, int height, uint32 follow_flags, ZoomLevel zoom);
+void InitializeWindowViewport(Window *w, int x, int y, int width, int height, uint32 follow_flags, ZoomLevel zoom, ViewPortFlags flags);
 ViewPort *IsPtInWindowViewport(const Window *w, int x, int y);
-Point GetTileBelowCursor();
+Point GetTileBelowCursor(ViewPort **vp_out = NULL);
 void UpdateViewportPosition(Window *w);
 
 void MarkAllViewportsDirty(int left, int top, int right, int bottom);
Index: src/viewport_type.h
===================================================================
--- src/viewport_type.h	(revision 22753)
+++ src/viewport_type.h	(working copy)
@@ -15,6 +15,16 @@
 #include "zoom_type.h"
 #include "strings_type.h"
 
+/** Flags for controlling viewport behaviour */
+enum ViewPortFlags {
+	VPFL_NONE = 0,
+
+	VPFL_DISABLE_SCROLL        = 1 << 0, ///< Disable scrolling the viewport
+	VPFL_DISABLE_PLACING       = 1 << 1, ///< Disable placing of objects through the viewport
+	VPFL_DISABLE_CROSS_VP_DRAG = 1 << 2, ///< Disable dragging selections between this viewport and others
+};
+DECLARE_ENUM_AS_BIT_SET(ViewPortFlags);
+
 /**
  * Data structure for viewport, display of a part of the world
  */
@@ -30,6 +40,8 @@
 	int virtual_height;  ///< height << zoom
 
 	ZoomLevel zoom; ///< The zoom level of the viewport.
+
+	ViewPortFlags flags; ///< Viewport flags
 };
 
 /** Margings for the viewport sign */
Index: src/waypoint_gui.cpp
===================================================================
--- src/waypoint_gui.cpp	(revision 22753)
+++ src/waypoint_gui.cpp	(working copy)
@@ -73,10 +73,9 @@
 		this->FinishInitNested(desc, window_number);
 
 		if (this->wp->owner != OWNER_NONE) this->owner = this->wp->owner;
-		this->flags4 |= WF_DISABLE_VP_SCROLL;
 
 		NWidgetViewport *nvp = this->GetWidget<NWidgetViewport>(WAYPVW_VIEWPORT);
-		nvp->InitializeViewport(this, this->GetCenterTile(), ZOOM_LVL_MIN);
+		nvp->InitializeViewport(this, this->GetCenterTile(), ZOOM_LVL_MIN, VPFL_DISABLE_SCROLL);
 
 		this->OnInvalidateData(0);
 	}
Index: src/widget.cpp
===================================================================
--- src/widget.cpp	(revision 22753)
+++ src/widget.cpp	(working copy)
@@ -1807,9 +1807,9 @@
  * @param follow_flags Type of viewport, see #InitializeWindowViewport().
  * @param zoom         Zoom level.
  */
-void NWidgetViewport::InitializeViewport(Window *w, uint32 follow_flags, ZoomLevel zoom)
+void NWidgetViewport::InitializeViewport(Window *w, uint32 follow_flags, ZoomLevel zoom, ViewPortFlags flags)
 {
-	InitializeWindowViewport(w, this->pos_x, this->pos_y, this->current_x, this->current_y, follow_flags, zoom);
+	InitializeWindowViewport(w, this->pos_x, this->pos_y, this->current_x, this->current_y, follow_flags, zoom, flags);
 }
 
 /**
Index: src/widget_type.h
===================================================================
--- src/widget_type.h	(revision 22753)
+++ src/widget_type.h	(working copy)
@@ -543,7 +543,7 @@
 	/* virtual */ void SetupSmallestSize(Window *w, bool init_array);
 	/* virtual */ void Draw(const Window *w);
 
-	void InitializeViewport(Window *w, uint32 follow_flags, ZoomLevel zoom);
+	void InitializeViewport(Window *w, uint32 follow_flags, ZoomLevel zoom, ViewPortFlags flags = VPFL_NONE);
 	void UpdateViewportCoordinates(Window *w);
 };
 
Index: src/window.cpp
===================================================================
--- src/window.cpp	(revision 22753)
+++ src/window.cpp	(working copy)
@@ -2067,9 +2067,9 @@
 		int x = _cursor.pos.x;
 		int y = _cursor.pos.y;
 		Window *w = FindWindowFromPt(x, y);
-		if (w == NULL || w->flags4 & WF_DISABLE_VP_SCROLL) return;
+		if (w == NULL) return;
 		ViewPort *vp = IsPtInWindowViewport(w, x, y);
-		if (vp != NULL) {
+		if (vp != NULL && (vp->flags & VPFL_DISABLE_SCROLL) == 0) {
 			x -= vp->left;
 			y -= vp->top;
 
@@ -2200,7 +2200,7 @@
 			case MC_LEFT:
 				DEBUG(misc, 2, "Cursor: 0x%X (%d)", _cursor.sprite, _cursor.sprite);
 				if (!HandleViewportClicked(vp, x, y) &&
-						!(w->flags4 & WF_DISABLE_VP_SCROLL) &&
+						!(vp->flags & VPFL_DISABLE_SCROLL) &&
 						_settings_client.gui.left_mouse_btn_scrolling) {
 					_scrolling_viewport = true;
 					_cursor.fix_at = false;
@@ -2208,7 +2208,7 @@
 				break;
 
 			case MC_RIGHT:
-				if (!(w->flags4 & WF_DISABLE_VP_SCROLL)) {
+				if (!(vp->flags & VPFL_DISABLE_SCROLL)) {
 					_scrolling_viewport = true;
 					_cursor.fix_at = true;
 
Index: src/window_gui.h
===================================================================
--- src/window_gui.h	(revision 22753)
+++ src/window_gui.h	(working copy)
@@ -654,8 +654,9 @@
 	 * has been set.
 	 * @param pt   the exact point on the map that has been clicked.
 	 * @param tile the tile on the map that has been clicked.
+	 * @param vp   the viewport that has been clicked.
 	 */
-	virtual void OnPlaceObject(Point pt, TileIndex tile) {}
+	virtual void OnPlaceObject(Point pt, TileIndex tile, ViewPort *vp) {}
 
 	/**
 	 * The user clicked on a vehicle while HT_VEHICLE has been set.
@@ -772,18 +773,16 @@
 	WF_TIMEOUT_TRIGGER   = 1,       ///< When the timeout should start triggering
 	WF_TIMEOUT_BEGIN     = 7,       ///< The initial value for the timeout
 	WF_TIMEOUT_MASK      = 7,       ///< Window timeout counter bit mask (3 bits)
-	WF_DRAGGING          = 1 <<  3, ///< Window is being dragged
-	WF_SIZING_RIGHT      = 1 <<  4, ///< Window is being resized towards the right.
-	WF_SIZING_LEFT       = 1 <<  5, ///< Window is being resized towards the left.
+	WF_DRAGGING          = 1 << 3, ///< Window is being dragged
+	WF_SIZING_RIGHT      = 1 << 4, ///< Window is being resized towards the right.
+	WF_SIZING_LEFT       = 1 << 5, ///< Window is being resized towards the left.
 	WF_SIZING            = WF_SIZING_RIGHT | WF_SIZING_LEFT, ///< Window is being resized.
-	WF_STICKY            = 1 <<  6, ///< Window is made sticky by user
+	WF_STICKY            = 1 << 6, ///< Window is made sticky by user
 
-	WF_DISABLE_VP_SCROLL = 1 <<  7, ///< Window does not do autoscroll, @see HandleAutoscroll()
+	WF_WHITE_BORDER_ONE  = 1 << 7,
+	WF_WHITE_BORDER_MASK = 1 << 8 | WF_WHITE_BORDER_ONE,
 
-	WF_WHITE_BORDER_ONE  = 1 <<  8,
-	WF_WHITE_BORDER_MASK = 1 <<  9 | WF_WHITE_BORDER_ONE,
-
-	WF_CENTERED          = 1 << 10, ///< Window is centered and shall stay centered after ReInit
+	WF_CENTERED          = 1 << 9, ///< Window is centered and shall stay centered after ReInit
 };
 
 Window *BringWindowToFrontById(WindowClass cls, WindowNumber number);
