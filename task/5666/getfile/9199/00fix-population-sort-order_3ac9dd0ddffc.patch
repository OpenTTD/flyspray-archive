# HG changeset patch
# User sbr <sebastien@brissaud.name>
# Date 1374815504 -7200
#      Fri Jul 26 07:11:44 2013 +0200
# Node ID 24c06774703ea551e2eafddc23e9446ad9457405
# Parent  3ac9dd0ddffcb2588fa0f291afa0f0f56623ce23
-Fix [FS#5666] (r25627): Automatically toggle the sort order of town's population instead of inversing the population sort function.

While it's desirable to sort town's population descending by default, the sorting function should remain consistent with the choosed sort order.

This patch restore the correct behavior of the town's population sort function.
It also ensure that the sort order default to descending when the population criteria is selecting.
The last manually selected sort order is restored when selecting another sort criteria.

diff --git a/src/town_gui.cpp b/src/town_gui.cpp
--- a/src/town_gui.cpp
+++ b/src/town_gui.cpp
@@ -643,6 +643,8 @@ private:
 
 	Scrollbar *vscroll;
 
+	bool auto_toggled_sort_order; ///< Was the sort order automatically toggled to better fit with the sort criteria?
+
 	void BuildSortTownList()
 	{
 		if (this->towns.NeedRebuild()) {
@@ -686,13 +688,13 @@ private:
 		return strnatcmp(buf, buf_cache); // Sort by name (natural sorting).
 	}
 
-	/** Sort by population (default descending, as big towns are of the most interest). */
+	/** Sort by population. */
 	static int CDECL TownPopulationSorter(const Town * const *a, const Town * const *b)
 	{
 		uint32 a_population = (*a)->cache.population;
 		uint32 b_population = (*b)->cache.population;
 		if (a_population == b_population) return TownDirectoryWindow::TownNameSorter(a, b);
-		return (a_population > b_population) ? -1 : 1;
+		return (a_population < b_population) ? -1 : 1;
 	}
 
 	/** Sort by town rating */
@@ -846,6 +848,9 @@ public:
 	{
 		switch (widget) {
 			case WID_TD_SORT_ORDER: // Click on sort order button
+				/* Forget about automatically toggled sort order.*/
+				if (this->auto_toggled_sort_order) auto_toggled_sort_order = false;
+
 				if (this->towns.SortType() != 2) { // A different sort than by rating.
 					this->towns.ToggleSortOrder();
 					this->last_sorting = this->towns.GetListing(); // Store new sorting order.
@@ -885,6 +890,19 @@ public:
 
 		if (this->towns.SortType() != index) {
 			this->towns.SetSortType(index);
+			if (TownDirectoryWindow::sorter_names[this->towns.SortType()] == STR_SORT_BY_POPULATION) {
+				/* When selecting sort by population, default to descending sort order as big towns are of the most interest. */
+				if (!this->towns.IsDescSortOrder()) {
+					this->towns.ToggleSortOrder();
+					this->auto_toggled_sort_order = true;
+					this->SetWidgetDirty(WID_TD_SORT_ORDER);
+				}
+			} else if (this->auto_toggled_sort_order) {
+				/* The sort order was automatically toggled by the latest sort criteria, restore its original value. */
+				this->towns.ToggleSortOrder();
+				this->auto_toggled_sort_order = false;
+				this->SetWidgetDirty(WID_TD_SORT_ORDER);
+			}
 			this->last_sorting = this->towns.GetListing(); // Store new sorting order.
 			this->BuildSortTownList();
 		}
