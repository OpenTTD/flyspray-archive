Index: ai/ai_instance.cpp
===================================================================
--- ai/ai_instance.cpp	(revision 24819)
+++ ai/ai_instance.cpp	(working copy)
@@ -136,6 +136,7 @@
 	SQAIEventExclusiveTransportRights_Register(this->engine);
 	SQAIEventIndustryClose_Register(this->engine);
 	SQAIEventIndustryOpen_Register(this->engine);
+	SQAIEventOnHouseDestroyed_Register(this->engine);
 	SQAIEventRoadReconstruction_Register(this->engine);
 	SQAIEventStationFirstVehicle_Register(this->engine);
 	SQAIEventSubsidyAwarded_Register(this->engine);
Index: game/game_instance.cpp
===================================================================
--- game/game_instance.cpp	(revision 24819)
+++ game/game_instance.cpp	(working copy)
@@ -136,6 +136,7 @@
 	SQGSEventGoalQuestionAnswer_Register(this->engine);
 	SQGSEventIndustryClose_Register(this->engine);
 	SQGSEventIndustryOpen_Register(this->engine);
+	SQGSEventOnHouseDestroyed_Register(this->engine);
 	SQGSEventRoadReconstruction_Register(this->engine);
 	SQGSEventStationFirstVehicle_Register(this->engine);
 	SQGSEventSubsidyAwarded_Register(this->engine);
Index: script/api/ai/ai_event.hpp.sq
===================================================================
--- script/api/ai/ai_event.hpp.sq	(revision 24819)
+++ script/api/ai/ai_event.hpp.sq	(working copy)
@@ -50,6 +50,7 @@
 	SQAIEvent.DefSQConst(engine, ScriptEvent::ET_GOAL_QUESTION_ANSWER,        "ET_GOAL_QUESTION_ANSWER");
 	SQAIEvent.DefSQConst(engine, ScriptEvent::ET_EXCLUSIVE_TRANSPORT_RIGHTS,  "ET_EXCLUSIVE_TRANSPORT_RIGHTS");
 	SQAIEvent.DefSQConst(engine, ScriptEvent::ET_ROAD_RECONSTRUCTION,         "ET_ROAD_RECONSTRUCTION");
+	SQAIEvent.DefSQConst(engine, ScriptEvent::ET_ON_HOUSE_DESTROYED,          "ET_ON_HOUSE_DESTROYED");
 
 	SQAIEvent.DefSQMethod(engine, &ScriptEvent::GetEventType, "GetEventType", 1, "x");
 
Index: script/api/ai/ai_event_types.hpp.sq
===================================================================
--- script/api/ai/ai_event_types.hpp.sq	(revision 24819)
+++ script/api/ai/ai_event_types.hpp.sq	(working copy)
@@ -405,3 +405,20 @@
 
 	SQAIEventRoadReconstruction.PostRegister(engine);
 }
+
+
+template <> const char *GetClassName<ScriptEventOnHouseDestroyed, ST_AI>() { return "AIEventOnHouseDestroyed"; }
+
+void SQAIEventOnHouseDestroyed_Register(Squirrel *engine)
+{
+	DefSQClass<ScriptEventOnHouseDestroyed, ST_AI> SQAIEventOnHouseDestroyed("AIEventOnHouseDestroyed");
+	SQAIEventOnHouseDestroyed.PreRegister(engine, "AIEvent");
+
+	SQAIEventOnHouseDestroyed.DefSQStaticMethod(engine, &ScriptEventOnHouseDestroyed::Convert, "Convert", 2, ".x");
+
+	SQAIEventOnHouseDestroyed.DefSQMethod(engine, &ScriptEventOnHouseDestroyed::GetCompany,    "GetCompany",    1, "x");
+	SQAIEventOnHouseDestroyed.DefSQMethod(engine, &ScriptEventOnHouseDestroyed::GetTownID,     "GetTownID",     1, "x");
+	SQAIEventOnHouseDestroyed.DefSQMethod(engine, &ScriptEventOnHouseDestroyed::GetPopulation, "GetPopulation", 1, "x");
+
+	SQAIEventOnHouseDestroyed.PostRegister(engine);
+}
Index: script/api/ai_changelog.hpp
===================================================================
--- script/api/ai_changelog.hpp	(revision 24819)
+++ script/api/ai_changelog.hpp	(working copy)
@@ -22,6 +22,7 @@
  * API additions:
  * \li AIEventExclusiveTransportRights
  * \li AIEventRoadReconstruction
+ * \li AIEventOnHouseDestroyed
  * \li AIIndustryType::IsProcessingIndustry
  * \li AIStation::IsAirportClosed
  * \li AIStation::OpenCloseAirport
Index: script/api/game/game_event.hpp.sq
===================================================================
--- script/api/game/game_event.hpp.sq	(revision 24819)
+++ script/api/game/game_event.hpp.sq	(working copy)
@@ -50,7 +50,8 @@
 	SQGSEvent.DefSQConst(engine, ScriptEvent::ET_GOAL_QUESTION_ANSWER,        "ET_GOAL_QUESTION_ANSWER");
 	SQGSEvent.DefSQConst(engine, ScriptEvent::ET_EXCLUSIVE_TRANSPORT_RIGHTS,  "ET_EXCLUSIVE_TRANSPORT_RIGHTS");
 	SQGSEvent.DefSQConst(engine, ScriptEvent::ET_ROAD_RECONSTRUCTION,         "ET_ROAD_RECONSTRUCTION");
-
+	SQGSEvent.DefSQConst(engine, ScriptEvent::ET_ON_HOUSE_DESTROYED,          "ET_ON_HOUSE_DESTROYED");
+	
 	SQGSEvent.DefSQMethod(engine, &ScriptEvent::GetEventType, "GetEventType", 1, "x");
 
 	SQGSEvent.PostRegister(engine);
Index: script/api/game/game_event_types.hpp.sq
===================================================================
--- script/api/game/game_event_types.hpp.sq	(revision 24819)
+++ script/api/game/game_event_types.hpp.sq	(working copy)
@@ -310,3 +310,20 @@
 
 	SQGSEventRoadReconstruction.PostRegister(engine);
 }
+
+
+template <> const char *GetClassName<ScriptEventOnHouseDestroyed, ST_GS>() { return "GSEventOnHouseDestroyed"; }
+
+void SQGSEventOnHouseDestroyed_Register(Squirrel *engine)
+{
+	DefSQClass<ScriptEventOnHouseDestroyed, ST_GS> SQGSEventOnHouseDestroyed("GSEventOnHouseDestroyed");
+	SQGSEventOnHouseDestroyed.PreRegister(engine, "GSEvent");
+
+	SQGSEventOnHouseDestroyed.DefSQStaticMethod(engine, &ScriptEventOnHouseDestroyed::Convert, "Convert", 2, ".x");
+
+	SQGSEventOnHouseDestroyed.DefSQMethod(engine, &ScriptEventOnHouseDestroyed::GetCompany,    "GetCompany",    1, "x");
+	SQGSEventOnHouseDestroyed.DefSQMethod(engine, &ScriptEventOnHouseDestroyed::GetTownID,     "GetTownID",     1, "x");
+	SQGSEventOnHouseDestroyed.DefSQMethod(engine, &ScriptEventOnHouseDestroyed::GetPopulation, "GetPopulation", 1, "x");
+
+	SQGSEventOnHouseDestroyed.PostRegister(engine);
+}
Index: script/api/game_changelog.hpp
===================================================================
--- script/api/game_changelog.hpp	(revision 24819)
+++ script/api/game_changelog.hpp	(working copy)
@@ -24,6 +24,7 @@
  * \li GSEngine::IsValidEngine and GSEngine::IsBuildable when outside GSCompanyMode scope
  * \li GSEventExclusiveTransportRights
  * \li GSEventRoadReconstruction
+ * \li GSEventOnHouseDestroyed
  * \li GSNews::NT_ACCIDENT, GSNews::NT_COMPANY_INFO, GSNews::NT_ADVICE, GSNews::NT_ACCEPTANCE
  * \li GSIndustryType::IsProcessingIndustry
  * \li GSStation::IsAirportClosed
Index: script/api/script_event.hpp
===================================================================
--- script/api/script_event.hpp	(revision 24819)
+++ script/api/script_event.hpp	(working copy)
@@ -55,6 +55,7 @@
 		ET_GOAL_QUESTION_ANSWER,
 		ET_EXCLUSIVE_TRANSPORT_RIGHTS,
 		ET_ROAD_RECONSTRUCTION,
+		ET_ON_HOUSE_DESTROYED,
 	};
 
 	/**
Index: script/api/script_event_types.hpp
===================================================================
--- script/api/script_event_types.hpp	(revision 24819)
+++ script/api/script_event_types.hpp	(working copy)
@@ -1067,4 +1067,53 @@
 	static ScriptEventRoadReconstruction *Convert(ScriptEventCompanyTown *instance) { return (ScriptEventRoadReconstruction *)instance; }
 };
 
+/**
+ * Event On House Destroyed, when a company destroys a house in a town.
+ * @api ai game
+ */
+class ScriptEventOnHouseDestroyed : public ScriptEvent {
+public:
+	/**
+	 * @param company The company that destroys the house.
+	 * @param town The town where the house is destroyed.
+	 * @param population The population of the house which got destroyed.
+	 */
+	ScriptEventOnHouseDestroyed(ScriptCompany::CompanyID company, TownID town, uint32 population) :
+	ScriptEvent(ET_ON_HOUSE_DESTROYED),
+	company(company),
+	town(town),
+	population(population)
+	{}
+ 
+	/**
+	 * Convert an ScriptEvent to the real instance.
+	 * @param instance The instance to convert.
+	 * @return The converted instance.
+	 */
+	static ScriptEventOnHouseDestroyed *Convert(ScriptEvent *instance) { return (ScriptEventOnHouseDestroyed *)instance; }
+
+	/**
+	 * Get the company that destroyed the house.
+	 * @return The CompanyID of the company that destroyed the house.
+	 */
+	ScriptCompany::CompanyID GetCompany() { return this->company; }
+
+	/**
+	 * Get the TownID of the town where the house was destroyed.
+	 * @return The TownID of the town where the house was destroyed.
+	 */
+	TownID GetTownID() { return this->town; }
+
+	/**
+	 * Get the Population of the house which got destroyed.
+	 * @return The Population of the house which got destroyed.
+	 */
+	uint32 GetPopulation() { return this->population; }
+
+private:
+	ScriptCompany::CompanyID company;  ///< The companyID which destroyed the house.
+	TownID town; ///< The townID where the house got destroyed.
+	uint32 population; ///< The Population of the house which got destroyed.
+};
+
 #endif /* SCRIPT_EVENT_TYPES_HPP */
Index: script/api/template/template_event_types.hpp.sq
===================================================================
--- script/api/template/template_event_types.hpp.sq	(revision 24819)
+++ script/api/template/template_event_types.hpp.sq	(working copy)
@@ -266,3 +266,12 @@
 	template <> inline const ScriptEventRoadReconstruction &GetParam(ForceType<const ScriptEventRoadReconstruction &>, HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, 0); return *(ScriptEventRoadReconstruction *)instance; }
 	template <> inline int Return<ScriptEventRoadReconstruction *>(HSQUIRRELVM vm, ScriptEventRoadReconstruction *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "EventRoadReconstruction", res, NULL, DefSQDestructorCallback<ScriptEventRoadReconstruction>, true); return 1; }
 } // namespace SQConvert
+
+namespace SQConvert {
+	/* Allow ScriptEventOnHouseDestroyed to be used as Squirrel parameter */
+	template <> inline ScriptEventOnHouseDestroyed *GetParam(ForceType<ScriptEventOnHouseDestroyed *>, HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, 0); return  (ScriptEventOnHouseDestroyed *)instance; }
+	template <> inline ScriptEventOnHouseDestroyed &GetParam(ForceType<ScriptEventOnHouseDestroyed &>, HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, 0); return *(ScriptEventOnHouseDestroyed *)instance; }
+	template <> inline const ScriptEventOnHouseDestroyed *GetParam(ForceType<const ScriptEventOnHouseDestroyed *>, HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, 0); return  (ScriptEventOnHouseDestroyed *)instance; }
+	template <> inline const ScriptEventOnHouseDestroyed &GetParam(ForceType<const ScriptEventOnHouseDestroyed &>, HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, 0); return *(ScriptEventOnHouseDestroyed *)instance; }
+	template <> inline int Return<ScriptEventOnHouseDestroyed *>(HSQUIRRELVM vm, ScriptEventOnHouseDestroyed *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "EventOnHouseDestroyed", res, NULL, DefSQDestructorCallback<ScriptEventOnHouseDestroyed>, true); return 1; }
+} // namespace SQConvert
Index: town_cmd.cpp
===================================================================
--- town_cmd.cpp	(revision 24819)
+++ town_cmd.cpp	(working copy)
@@ -2371,6 +2371,11 @@
 	/* Remove population from the town if the house is finished. */
 	if (IsHouseCompleted(tile)) {
 		ChangePopulation(t, -hs->population);
+
+		if (_current_company != OWNER_TOWN && _current_company != OWNER_NONE && _switch_mode == SM_NONE) {
+			AI::BroadcastNewEvent(new ScriptEventOnHouseDestroyed((ScriptCompany::CompanyID)(byte)_current_company, t->index, hs->population));
+			Game::NewEvent(new ScriptEventOnHouseDestroyed((ScriptCompany::CompanyID)(byte)_current_company, t->index, hs->population));
+		}
 	}
 
 	t->cache.num_houses--;
