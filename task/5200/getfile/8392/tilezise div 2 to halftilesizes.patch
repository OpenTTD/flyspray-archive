Index: src/disaster_cmd.cpp
===================================================================
--- src/disaster_cmd.cpp	(revision 24319)
+++ src/disaster_cmd.cpp	(working copy)
@@ -490,8 +490,8 @@
 	v->tick_counter++;
 
 	if (v->current_order.GetDestination() == 1) {
-		int x = TileX(v->dest_tile) * TILE_SIZE + TILE_SIZE / 2;
-		int y = TileY(v->dest_tile) * TILE_SIZE + TILE_SIZE / 2;
+		int x = TileX(v->dest_tile) * TILE_SIZE + HALF_TILE_SIZE;
+		int y = TileY(v->dest_tile) * TILE_SIZE + HALF_TILE_SIZE;
 		if (Delta(v->x_pos, x) + Delta(v->y_pos, y) >= 8) {
 			v->direction = GetDirectionTowards(v, x, y);
 
@@ -687,7 +687,7 @@
 	if (!Vehicle::CanAllocateItem(2)) return;
 
 	/* Pick a random place, unless we find a small airport */
-	int x = TileX(Random()) * TILE_SIZE + TILE_SIZE / 2;
+	int x = TileX(Random()) * TILE_SIZE + HALF_TILE_SIZE;
 
 	Station *st;
 	FOR_ALL_STATIONS(st) {
@@ -717,7 +717,7 @@
 	if (!Vehicle::CanAllocateItem(2)) return;
 
 	DisasterVehicle *v = new DisasterVehicle();
-	int x = TileX(Random()) * TILE_SIZE + TILE_SIZE / 2;
+	int x = TileX(Random()) * TILE_SIZE + HALF_TILE_SIZE;
 
 	InitializeDisasterVehicle(v, x, 0, INITIAL_DISASTER_VEHICLE_ZPOS, DIR_SE, ST_SMALL_UFO);
 	v->dest_tile = TileXY(MapSizeX() / 2, MapSizeY() / 2);
@@ -803,7 +803,7 @@
 	if (!Vehicle::CanAllocateItem(2)) return;
 
 	DisasterVehicle *v = new DisasterVehicle();
-	int x = TileX(Random()) * TILE_SIZE + TILE_SIZE / 2;
+	int x = TileX(Random()) * TILE_SIZE + HALF_TILE_SIZE;
 	int y = MapMaxX() * TILE_SIZE - 1;
 
 	InitializeDisasterVehicle(v, x, y, INITIAL_DISASTER_VEHICLE_ZPOS, DIR_NW, ST_BIG_UFO);
@@ -825,13 +825,13 @@
 	int y;
 	Direction dir;
 	uint32 r = Random();
-	int x = TileX(r) * TILE_SIZE + TILE_SIZE / 2;
+	int x = TileX(r) * TILE_SIZE + HALF_TILE_SIZE;
 
 	if (HasBit(r, 31)) {
-		y = MapMaxY() * TILE_SIZE - TILE_SIZE / 2 - 1;
+		y = MapMaxY() * TILE_SIZE - HALF_TILE_SIZE - 1;
 		dir = DIR_NW;
 	} else {
-		y = TILE_SIZE / 2;
+		y = HALF_TILE_SIZE;
 		if (_settings_game.construction.freeform_edges) y += TILE_SIZE;
 		dir = DIR_SE;
 	}
Index: src/landscape.cpp
===================================================================
--- src/landscape.cpp	(revision 24319)
+++ src/landscape.cpp	(working copy)
@@ -695,7 +695,7 @@
 			TileIndex off = t - ta.tile;
 			if ((TileX(off) == 0 || TileX(off) == ta.w - 1U) && (TileY(off) == 0 || TileY(off) == ta.h - 1U) && _pause_mode == PM_UNPAUSED) {
 				/* big explosion in each corner, or small explosion for single tiles */
-				CreateEffectVehicleAbove(TileX(t) * TILE_SIZE + TILE_SIZE / 2, TileY(t) * TILE_SIZE + TILE_SIZE / 2, 2,
+				CreateEffectVehicleAbove(TileX(t) * TILE_SIZE + HALF_TILE_SIZE, TileY(t) * TILE_SIZE + HALF_TILE_SIZE, 2,
 					ta.w == 1 && ta.h == 1 ? EV_EXPLOSION_SMALL : EV_EXPLOSION_LARGE
 				);
 			}
Index: src/pathfinder/npf/npf.cpp
===================================================================
--- src/pathfinder/npf/npf.cpp	(revision 24319)
+++ src/pathfinder/npf/npf.cpp	(working copy)
@@ -225,10 +225,10 @@
 	TileIndex next = current->tile + TileOffsByDiagDir(TrackdirToExitdir(current->direction));
 
 	/* Get center of tiles */
-	int x1 = TileX(current->tile) * TILE_SIZE + TILE_SIZE / 2;
-	int y1 = TileY(current->tile) * TILE_SIZE + TILE_SIZE / 2;
-	int x2 = TileX(next) * TILE_SIZE + TILE_SIZE / 2;
-	int y2 = TileY(next) * TILE_SIZE + TILE_SIZE / 2;
+	int x1 = TileX(current->tile) * TILE_SIZE + HALF_TILE_SIZE;
+	int y1 = TileY(current->tile) * TILE_SIZE + HALF_TILE_SIZE;
+	int x2 = TileX(next) * TILE_SIZE + HALF_TILE_SIZE;
+	int y2 = TileY(next) * TILE_SIZE + HALF_TILE_SIZE;
 
 	int dx4 = (x2 - x1) / 4;
 	int dy4 = (y2 - y1) / 4;
Index: src/pathfinder/yapf/yapf_road.cpp
===================================================================
--- src/pathfinder/yapf/yapf_road.cpp	(revision 24319)
+++ src/pathfinder/yapf/yapf_road.cpp	(working copy)
@@ -36,12 +36,12 @@
 		/* height of the center of the current tile */
 		int x1 = TileX(tile) * TILE_SIZE;
 		int y1 = TileY(tile) * TILE_SIZE;
-		int z1 = GetSlopePixelZ(x1 + TILE_SIZE / 2, y1 + TILE_SIZE / 2);
+		int z1 = GetSlopePixelZ(x1 + HALF_TILE_SIZE, y1 + HALF_TILE_SIZE);
 
 		/* height of the center of the next tile */
 		int x2 = TileX(next_tile) * TILE_SIZE;
 		int y2 = TileY(next_tile) * TILE_SIZE;
-		int z2 = GetSlopePixelZ(x2 + TILE_SIZE / 2, y2 + TILE_SIZE / 2);
+		int z2 = GetSlopePixelZ(x2 + HALF_TILE_SIZE, y2 + HALF_TILE_SIZE);
 
 		if (z2 - z1 > 1) {
 			/* Slope up */
Index: src/rail_cmd.cpp
===================================================================
--- src/rail_cmd.cpp	(revision 24319)
+++ src/rail_cmd.cpp	(working copy)
@@ -1898,7 +1898,7 @@
 {
 	int z = ti->z + GetSlopePixelZInCorner(RemoveHalftileSlope(ti->tileh), CORNER_W);
 	AddSortableSpriteToDraw(base_image + RFO_FLAT_VERT, _drawtile_track_palette,
-		ti->x + TILE_SIZE / 2, ti->y + TILE_SIZE / 2, 1, 1, 4, z);
+		ti->x + HALF_TILE_SIZE, ti->y + HALF_TILE_SIZE, 1, 1, 4, z);
 }
 
 /**
@@ -1908,7 +1908,7 @@
 {
 	int z = ti->z + GetSlopePixelZInCorner(RemoveHalftileSlope(ti->tileh), CORNER_E);
 	AddSortableSpriteToDraw(base_image + RFO_FLAT_VERT, _drawtile_track_palette,
-		ti->x + TILE_SIZE / 2, ti->y + TILE_SIZE / 2, 1, 1, 4, z);
+		ti->x + HALF_TILE_SIZE, ti->y + HALF_TILE_SIZE, 1, 1, 4, z);
 }
 
 /**
@@ -1918,7 +1918,7 @@
 {
 	int z = ti->z + GetSlopePixelZInCorner(RemoveHalftileSlope(ti->tileh), CORNER_N);
 	AddSortableSpriteToDraw(base_image + RFO_FLAT_HORZ, _drawtile_track_palette,
-		ti->x + TILE_SIZE / 2, ti->y + TILE_SIZE / 2, 1, 1, 4, z);
+		ti->x + HALF_TILE_SIZE, ti->y + HALF_TILE_SIZE, 1, 1, 4, z);
 }
 
 /**
@@ -1928,7 +1928,7 @@
 {
 	int z = ti->z + GetSlopePixelZInCorner(RemoveHalftileSlope(ti->tileh), CORNER_S);
 	AddSortableSpriteToDraw(base_image + RFO_FLAT_HORZ, _drawtile_track_palette,
-		ti->x + TILE_SIZE / 2, ti->y + TILE_SIZE / 2, 1, 1, 4, z);
+		ti->x + HALF_TILE_SIZE, ti->y + HALF_TILE_SIZE, 1, 1, 4, z);
 }
 
 
Index: src/roadveh_cmd.cpp
===================================================================
--- src/roadveh_cmd.cpp	(revision 24319)
+++ src/roadveh_cmd.cpp	(working copy)
@@ -248,8 +248,8 @@
 		v->owner = _current_company;
 
 		v->tile = tile;
-		int x = TileX(tile) * TILE_SIZE + TILE_SIZE / 2;
-		int y = TileY(tile) * TILE_SIZE + TILE_SIZE / 2;
+		int x = TileX(tile) * TILE_SIZE + HALF_TILE_SIZE;
+		int y = TileY(tile) * TILE_SIZE + HALF_TILE_SIZE;
 		v->x_pos = x;
 		v->y_pos = y;
 		v->z_pos = GetSlopePixelZ(x, y);
Index: src/ship_cmd.cpp
===================================================================
--- src/ship_cmd.cpp	(revision 24319)
+++ src/ship_cmd.cpp	(working copy)
@@ -643,8 +643,8 @@
 
 		v->owner = _current_company;
 		v->tile = tile;
-		x = TileX(tile) * TILE_SIZE + TILE_SIZE / 2;
-		y = TileY(tile) * TILE_SIZE + TILE_SIZE / 2;
+		x = TileX(tile) * TILE_SIZE + HALF_TILE_SIZE;
+		y = TileY(tile) * TILE_SIZE + HALF_TILE_SIZE;
 		v->x_pos = x;
 		v->y_pos = y;
 		v->z_pos = GetSlopePixelZ(x, y);
Index: src/smallmap_gui.cpp
===================================================================
--- src/smallmap_gui.cpp	(revision 24319)
+++ src/smallmap_gui.cpp	(working copy)
@@ -1493,7 +1493,7 @@
 	void SetNewScroll(int sx, int sy, int sub)
 	{
 		const NWidgetBase *wi = this->GetWidget<NWidgetBase>(WID_SM_MAP);
-		Point hv = InverseRemapCoords(wi->current_x * ZOOM_LVL_BASE * TILE_SIZE / 2, wi->current_y * ZOOM_LVL_BASE * TILE_SIZE / 2);
+		Point hv = InverseRemapCoords(wi->current_x * ZOOM_LVL_BASE * HALF_TILE_SIZE, wi->current_y * ZOOM_LVL_BASE * HALF_TILE_SIZE);
 		hv.x *= this->zoom;
 		hv.y *= this->zoom;
 
Index: src/sound.cpp
===================================================================
--- src/sound.cpp	(revision 24319)
+++ src/sound.cpp	(working copy)
@@ -262,8 +262,8 @@
 void SndPlayTileFx(SoundID sound, TileIndex tile)
 {
 	/* emits sound from center of the tile */
-	int x = min(MapMaxX() - 1, TileX(tile)) * TILE_SIZE + TILE_SIZE / 2;
-	int y = min(MapMaxY() - 1, TileY(tile)) * TILE_SIZE - TILE_SIZE / 2;
+	int x = min(MapMaxX() - 1, TileX(tile)) * TILE_SIZE + HALF_TILE_SIZE;
+	int y = min(MapMaxY() - 1, TileY(tile)) * TILE_SIZE - HALF_TILE_SIZE;
 	int z = (y < 0 ? 0 : GetSlopePixelZ(x, y));
 	Point pt = RemapCoords(x, y, z);
 	y += 2 * TILE_SIZE;
Index: src/station_cmd.cpp
===================================================================
--- src/station_cmd.cpp	(revision 24319)
+++ src/station_cmd.cpp	(working copy)
@@ -3076,7 +3076,7 @@
 		y &= 0xF;
 
 		if (DiagDirToAxis(dir) != AXIS_X) Swap(x, y);
-		if (y == TILE_SIZE / 2) {
+		if (y == HALF_TILE_SIZE) {
 			if (dir != DIAGDIR_SE && dir != DIAGDIR_SW) x = TILE_SIZE - 1 - x;
 			stop &= TILE_SIZE - 1;
 
Index: src/viewport.cpp
===================================================================
--- src/viewport.cpp	(revision 24319)
+++ src/viewport.cpp	(working copy)
@@ -1941,8 +1941,8 @@
 	if (pt.x == -1) return;
 
 	if ((_thd.place_mode & HT_DRAG_MASK) == HT_POINT) {
-		pt.x += TILE_SIZE / 2;
-		pt.y += TILE_SIZE / 2;
+		pt.x += HALF_TILE_SIZE;
+		pt.y += HALF_TILE_SIZE;
 	}
 
 	_tile_fract_coords.x = pt.x & TILE_UNIT_MASK;
@@ -2037,7 +2037,7 @@
  */
 bool ScrollMainWindowToTile(TileIndex tile, bool instant)
 {
-	return ScrollMainWindowTo(TileX(tile) * TILE_SIZE + TILE_SIZE / 2, TileY(tile) * TILE_SIZE + TILE_SIZE / 2, -1, instant);
+	return ScrollMainWindowTo(TileX(tile) * TILE_SIZE + HALF_TILE_SIZE, TileY(tile) * TILE_SIZE + HALF_TILE_SIZE, -1, instant);
 }
 
 /**
@@ -2166,8 +2166,8 @@
 					break;
 				case HT_POINT:
 					new_drawstyle = HT_POINT;
-					x1 += TILE_SIZE / 2;
-					y1 += TILE_SIZE / 2;
+					x1 += HALF_TILE_SIZE;
+					y1 += HALF_TILE_SIZE;
 					break;
 				case HT_RAIL:
 					/* Draw one highlighted tile in any direction */
@@ -2251,10 +2251,10 @@
 	 * In effect, placement starts from the centre of a tile
 	 */
 	if (method == VPM_X_OR_Y || method == VPM_FIX_X || method == VPM_FIX_Y) {
-		_thd.selend.x += TILE_SIZE / 2;
-		_thd.selend.y += TILE_SIZE / 2;
-		_thd.selstart.x += TILE_SIZE / 2;
-		_thd.selstart.y += TILE_SIZE / 2;
+		_thd.selend.x += HALF_TILE_SIZE;
+		_thd.selend.y += HALF_TILE_SIZE;
+		_thd.selstart.x += HALF_TILE_SIZE;
+		_thd.selstart.y += HALF_TILE_SIZE;
 	}
 
 	HighLightStyle others = _thd.place_mode & ~(HT_DRAG_MASK | HT_DIR_MASK);
@@ -2530,7 +2530,7 @@
 					y = _thd.selstart.y + (offset & ~TILE_UNIT_MASK);
 
 					/* 'Build' the last half rail tile if needed */
-					if ((offset & TILE_UNIT_MASK) > (TILE_SIZE / 2)) {
+					if ((offset & TILE_UNIT_MASK) > (HALF_TILE_SIZE)) {
 						if (dx + dy >= (int)TILE_SIZE) {
 							x += (dx + dy < 0) ? (int)TILE_SIZE : -(int)TILE_SIZE;
 						} else {
@@ -2565,7 +2565,7 @@
 					y = _thd.selstart.y - (offset & ~TILE_UNIT_MASK);
 
 					/* 'Build' the last half rail tile if needed */
-					if ((offset & TILE_UNIT_MASK) > (TILE_SIZE / 2)) {
+					if ((offset & TILE_UNIT_MASK) > (HALF_TILE_SIZE)) {
 						if (dx - dy < 0) {
 							y += (dx > dy) ? (int)TILE_SIZE : -(int)TILE_SIZE;
 						} else {
@@ -2727,8 +2727,8 @@
 
 	/* Needed so level-land is placed correctly */
 	if ((_thd.next_drawstyle & HT_DRAG_MASK) == HT_POINT) {
-		x += TILE_SIZE / 2;
-		y += TILE_SIZE / 2;
+		x += HALF_TILE_SIZE;
+		y += HALF_TILE_SIZE;
 	}
 
 	sx = _thd.selstart.x;
Index: src/viewport_gui.cpp
===================================================================
--- src/viewport_gui.cpp	(revision 24319)
+++ src/viewport_gui.cpp	(working copy)
@@ -68,7 +68,7 @@
 			pt.x = w->viewport->scrollpos_x + w->viewport->virtual_width / 2;
 			pt.y = w->viewport->scrollpos_y + w->viewport->virtual_height / 2;
 		} else {
-			pt = RemapCoords(TileX(tile) * TILE_SIZE + TILE_SIZE / 2, TileY(tile) * TILE_SIZE + TILE_SIZE / 2, TileHeight(tile));
+			pt = RemapCoords(TileX(tile) * TILE_SIZE + HALF_TILE_SIZE, TileY(tile) * TILE_SIZE + HALF_TILE_SIZE, TileHeight(tile));
 		}
 
 		this->viewport->scrollpos_x = pt.x - this->viewport->virtual_width / 2;
