Index: aircraft_cmd.c
===================================================================
--- aircraft_cmd.c	(revision 5934)
+++ aircraft_cmd.c	(working copy)
@@ -311,7 +311,7 @@
 			v->cargo_type = cargo;
 
 			if (HASBIT(EngInfo(p1)->callbackmask, CBM_REFIT_CAPACITY)) {
-				callback = GetVehicleCallback(CBID_VEHICLE_REFIT_CAPACITY, 0, 0, v->engine_type, v);
+				callback = Get15BitVehicleCallback(CBID_VEHICLE_REFIT_CAPACITY, 0, 0, v->engine_type, v);
 			}
 
 			if (callback == CALLBACK_FAILED) {
@@ -438,7 +438,7 @@
 
 	/* Check if this aircraft can be started/stopped. The callback will fail or
 	 * return 0xFF if it can. */
-	callback = GetVehicleCallback(CBID_VEHICLE_START_STOP_CHECK, 0, 0, v->engine_type, v);
+	callback = Get8BitVehicleCallback(CBID_VEHICLE_START_STOP_CHECK, 0, 0, v->engine_type, v);
 	if (callback != CALLBACK_FAILED && callback != 0xFF) {
 		StringID error = GetGRFStringID(GetEngineGRFID(v->engine_type), 0xD000 + callback);
 		return_cmd_error(error);
@@ -590,7 +590,7 @@
 		v->cargo_type = new_cid;
 		v->cargo_subtype = new_subtype;
 
-		callback = GetVehicleCallback(CBID_VEHICLE_REFIT_CAPACITY, 0, 0, v->engine_type, v);
+		callback = Get15BitVehicleCallback(CBID_VEHICLE_REFIT_CAPACITY, 0, 0, v->engine_type, v);
 
 		/* Restore the cargo type */
 		v->cargo_type = temp_cid;
Index: newgrf_engine.c
===================================================================
--- newgrf_engine.c	(revision 5934)
+++ newgrf_engine.c	(working copy)
@@ -931,7 +931,7 @@
 }
 
 /**
- * Evaluate a newgrf callback for vehicles
+ * Evaluate a 15-bit newgrf callback for vehicles
  * @param callback The callback to evalute
  * @param param1   First parameter of the callback
  * @param param2   Second parameter of the callback
@@ -939,7 +939,7 @@
  * @param vehicle  The vehicle to evaluate the callback for, or NULL if it doesnt exist yet
  * @return The value the callback returned, or CALLBACK_FAILED if it failed
  */
-uint16 GetVehicleCallback(uint16 callback, uint32 param1, uint32 param2, EngineID engine, const Vehicle *v)
+uint16 Get15BitVehicleCallback(uint16 callback, uint32 param1, uint32 param2, EngineID engine, const Vehicle *v)
 {
 	const SpriteGroup *group;
 	ResolverObject object;
@@ -975,16 +975,32 @@
 }
 
 /**
- * Evaluate a newgrf callback for vehicles with a different vehicle for parent scope.
+ * Evaluate an 8-bit newgrf callback for vehicles
  * @param callback The callback to evalute
  * @param param1   First parameter of the callback
  * @param param2   Second parameter of the callback
  * @param engine   Engine type of the vehicle to evaluate the callback for
+ * @param vehicle  The vehicle to evaluate the callback for, or NULL if it doesnt exist yet
+ * @return The value the callback returned, or CALLBACK_FAILED if it failed
+ */
+uint16 Get8BitVehicleCallback(uint16 callback, uint32 param1, uint32 param2, EngineID engine, const Vehicle *v)
+{
+	uint16 result = Get15BitVehicleCallback(callback, param1, param2, engine, v);
+	if (result != CALLBACK_FAILED) result &= 0xFF;
+	return result;
+}
+
+/**
+ * Evaluate a 15-bit newgrf callback for vehicles with a different vehicle for parent scope.
+ * @param callback The callback to evalute
+ * @param param1   First parameter of the callback
+ * @param param2   Second parameter of the callback
+ * @param engine   Engine type of the vehicle to evaluate the callback for
  * @param v        The vehicle to evaluate the callback for, or NULL if it doesnt exist yet
  * @param parent   The vehicle to use for parent scope
  * @return The value the callback returned, or CALLBACK_FAILED if it failed
  */
-uint16 GetVehicleCallbackParent(uint16 callback, uint32 param1, uint32 param2, EngineID engine, const Vehicle *v, const Vehicle *parent)
+uint16 Get15BitVehicleCallbackParent(uint16 callback, uint32 param1, uint32 param2, EngineID engine, const Vehicle *v, const Vehicle *parent)
 {
 	const SpriteGroup *group;
 	ResolverObject object;
@@ -1021,6 +1037,23 @@
 	return group->g.callback.result;
 }
 
+/**
+ * Evaluate an 8-bit newgrf callback for vehicles with a different vehicle for parent scope.
+ * @param callback The callback to evalute
+ * @param param1   First parameter of the callback
+ * @param param2   Second parameter of the callback
+ * @param engine   Engine type of the vehicle to evaluate the callback for
+ * @param v        The vehicle to evaluate the callback for, or NULL if it doesnt exist yet
+ * @param parent   The vehicle to use for parent scope
+ * @return The value the callback returned, or CALLBACK_FAILED if it failed
+ */
+uint16 Get8BitVehicleCallbackParent(uint16 callback, uint32 param1, uint32 param2, EngineID engine, const Vehicle *v, const Vehicle *parent)
+{
+	uint16 result = Get15BitVehicleCallbackParent(callback, param1, param2, engine, v, parent);
+	if (result != CALLBACK_FAILED) result &= 0xFF;
+	return result;
+}
+
 static void DoTriggerVehicle(Vehicle *v, VehicleTrigger trigger, byte base_random_bits, bool first)
 {
 	const SpriteGroup *group;
Index: newgrf_engine.h
===================================================================
--- newgrf_engine.h	(revision 5934)
+++ newgrf_engine.h	(working copy)
@@ -34,8 +34,10 @@
 const struct GRFFile *GetEngineGRF(EngineID engine);
 uint32 GetEngineGRFID(EngineID engine);
 
-uint16 GetVehicleCallback(uint16 callback, uint32 param1, uint32 param2, EngineID engine, const Vehicle *v);
-uint16 GetVehicleCallbackParent(uint16 callback, uint32 param1, uint32 param2, EngineID engine, const Vehicle *v, const Vehicle *parent);
+uint16 Get8BitVehicleCallback(uint16 callback, uint32 param1, uint32 param2, EngineID engine, const Vehicle *v);
+uint16 Get15BitVehicleCallback(uint16 callback, uint32 param1, uint32 param2, EngineID engine, const Vehicle *v);
+uint16 Get8BitVehicleCallbackParent(uint16 callback, uint32 param1, uint32 param2, EngineID engine, const Vehicle *v, const Vehicle *parent);
+uint16 Get15BitVehicleCallbackParent(uint16 callback, uint32 param1, uint32 param2, EngineID engine, const Vehicle *v, const Vehicle *parent);
 bool UsesWagonOverride(const Vehicle *v);
 #define GetCustomVehicleSprite(v, direction) GetCustomEngineSprite(v->engine_type, v, direction)
 #define GetCustomVehicleIcon(et, direction) GetCustomEngineSprite(et, NULL, direction)
Index: newgrf_station.c
===================================================================
--- newgrf_station.c	(revision 5934)
+++ newgrf_station.c	(working copy)
@@ -506,8 +506,15 @@
 }
 
 
-uint16 GetStationCallback(uint16 callback, uint32 param1, uint32 param2, const StationSpec *statspec, const Station *st, TileIndex tile)
+uint16 Get8BitStationCallback(uint16 callback, uint32 param1, uint32 param2, const StationSpec *statspec, const Station *st, TileIndex tile)
 {
+	uint16 result = Get15BitStationCallback(callback, param1,  param2, statspec, st, tile);
+	if (result != CALLBACK_FAILED) result &= 0xFF;
+	return result;
+}
+
+uint16 Get15BitStationCallback(uint16 callback, uint32 param1, uint32 param2, const StationSpec *statspec, const Station *st, TileIndex tile)
+{
 	const SpriteGroup *group;
 	ResolverObject object;
 	CargoID ctype = (st == NULL) ? GC_PURCHASE : GC_DEFAULT_NA;
@@ -638,7 +645,7 @@
 	relocation = GetCustomStationRelocation(statspec, NULL, INVALID_TILE);
 
 	if (HASBIT(statspec->callbackmask, CBM_CUSTOM_LAYOUT)) {
-		uint16 callback = GetStationCallback(CBID_STATION_SPRITE_LAYOUT, 0x2110000, 0, statspec, NULL, INVALID_TILE);
+		uint16 callback = Get15BitStationCallback(CBID_STATION_SPRITE_LAYOUT, 0x2110000, 0, statspec, NULL, INVALID_TILE);
 		if (callback != CALLBACK_FAILED) tile = callback;
 	}
 
Index: newgrf_station.h
===================================================================
--- newgrf_station.h	(revision 5934)
+++ newgrf_station.h	(working copy)
@@ -108,7 +108,8 @@
  * for variational sprite groups. */
 SpriteID GetCustomStationRelocation(const StationSpec *statspec, const Station *st, TileIndex tile);
 SpriteID GetCustomStationGroundRelocation(const StationSpec *statspec, const Station *st, TileIndex tile);
-uint16 GetStationCallback(uint16 callback, uint32 param1, uint32 param2, const StationSpec *statspec, const Station *st, TileIndex tile);
+uint16 Get8BitStationCallback(uint16 callback, uint32 param1, uint32 param2, const StationSpec *statspec, const Station *st, TileIndex tile);
+uint16 Get15BitStationCallback(uint16 callback, uint32 param1, uint32 param2, const StationSpec *statspec, const Station *st, TileIndex tile);
 
 /* Check if a rail station tile is traversable. */
 bool IsStationTileBlocked(TileIndex tile);
Index: rail_cmd.c
===================================================================
--- rail_cmd.c	(revision 5934)
+++ rail_cmd.c	(working copy)
@@ -1347,7 +1347,7 @@
 				uint gfx = 2;
 
 				if (HASBIT(statspec->callbackmask, CBM_CUSTOM_LAYOUT)) {
-					uint16 callback = GetStationCallback(CBID_STATION_SPRITE_LAYOUT, 0, 0, statspec, st, ti->tile);
+					uint16 callback = Get15BitStationCallback(CBID_STATION_SPRITE_LAYOUT, 0, 0, statspec, st, ti->tile);
 					if (callback != CALLBACK_FAILED) gfx = callback;
 				}
 
Index: rail_gui.c
===================================================================
--- rail_gui.c	(revision 5934)
+++ rail_gui.c	(working copy)
@@ -708,7 +708,7 @@
 				const StationSpec *statspec = GetCustomStationSpec(_railstation.station_class, i);
 
 				if (statspec != NULL && statspec->name != 0) {
-					if (HASBIT(statspec->callbackmask, CBM_STATION_AVAIL) && GetStationCallback(CBID_STATION_AVAILABILITY, 0, 0, statspec, NULL, INVALID_TILE) == 0) {
+					if (HASBIT(statspec->callbackmask, CBM_STATION_AVAIL) && Get8BitStationCallback(CBID_STATION_AVAILABILITY, 0, 0, statspec, NULL, INVALID_TILE) == 0) {
 						GfxFillRect(8, y - 2, 127, y + 10, PALETTE_MODIFIER_GREYOUT);
 					}
 
@@ -787,7 +787,7 @@
 			statspec = GetCustomStationSpec(_railstation.station_class, y);
 			if (statspec != NULL &&
 				HASBIT(statspec->callbackmask, CBM_STATION_AVAIL) &&
-				GetStationCallback(CBID_STATION_AVAILABILITY, 0, 0, statspec, NULL, INVALID_TILE) == 0) return;
+				Get8BitStationCallback(CBID_STATION_AVAILABILITY, 0, 0, statspec, NULL, INVALID_TILE) == 0) return;
 
 			_railstation.station_type = y;
 			SndPlayFx(SND_15_BEEP);
@@ -1004,7 +1004,7 @@
 
 				if (statspec != NULL &&
 						HASBIT(statspec->callbackmask, CBM_STATION_AVAIL) &&
-						GetStationCallback(CBID_STATION_AVAILABILITY, 0, 0, statspec, NULL, INVALID_TILE) == 0) {
+						Get8BitStationCallback(CBID_STATION_AVAILABILITY, 0, 0, statspec, NULL, INVALID_TILE) == 0) {
 					GfxFillRect(4 + i * 68, 18, 67 + i * 68, 75, PALETTE_MODIFIER_GREYOUT);
 				}
 			}
@@ -1020,7 +1020,7 @@
 			const StationSpec *statspec = GetCustomStationSpec(STAT_CLASS_WAYP, type);
 			if (statspec != NULL &&
 					HASBIT(statspec->callbackmask, CBM_STATION_AVAIL) &&
-					GetStationCallback(CBID_STATION_AVAILABILITY, 0, 0, statspec, NULL, INVALID_TILE) == 0) return;
+					Get8BitStationCallback(CBID_STATION_AVAILABILITY, 0, 0, statspec, NULL, INVALID_TILE) == 0) return;
 
 			_cur_waypoint_type = type;
 			SndPlayFx(SND_15_BEEP);
Index: roadveh_cmd.c
===================================================================
--- roadveh_cmd.c	(revision 5934)
+++ roadveh_cmd.c	(working copy)
@@ -220,7 +220,7 @@
 
 	/* Check if this road veh can be started/stopped. The callback will fail or
 	 * return 0xFF if it can. */
-	callback = GetVehicleCallback(CBID_VEHICLE_START_STOP_CHECK, 0, 0, v->engine_type, v);
+	callback = Get8BitVehicleCallback(CBID_VEHICLE_START_STOP_CHECK, 0, 0, v->engine_type, v);
 	if (callback != CALLBACK_FAILED && callback != 0xFF) {
 		StringID error = GetGRFStringID(GetEngineGRFID(v->engine_type), 0xD000 + callback);
 		return_cmd_error(error);
@@ -1774,7 +1774,7 @@
 		v->cargo_subtype = new_subtype;
 
 		/* Check the refit capacity callback */
-		capacity = GetVehicleCallback(CBID_VEHICLE_REFIT_CAPACITY, 0, 0, v->engine_type, v);
+		capacity = Get15BitVehicleCallback(CBID_VEHICLE_REFIT_CAPACITY, 0, 0, v->engine_type, v);
 
 		/* Restore the original cargo type */
 		v->cargo_type = temp_cid;
Index: ship_cmd.c
===================================================================
--- ship_cmd.c	(revision 5934)
+++ ship_cmd.c	(working copy)
@@ -970,7 +970,7 @@
 
 	/* Check if this ship can be started/stopped. The callback will fail or
 	 * return 0xFF if it can. */
-	callback = GetVehicleCallback(CBID_VEHICLE_START_STOP_CHECK, 0, 0, v->engine_type, v);
+	callback = Get8BitVehicleCallback(CBID_VEHICLE_START_STOP_CHECK, 0, 0, v->engine_type, v);
 	if (callback != CALLBACK_FAILED && callback != 0xFF) {
 		StringID error = GetGRFStringID(GetEngineGRFID(v->engine_type), 0xD000 + callback);
 		return_cmd_error(error);
@@ -1078,7 +1078,7 @@
 		v->cargo_type = new_cid;
 		v->cargo_subtype = new_subtype;
 
-		capacity = GetVehicleCallback(CBID_VEHICLE_REFIT_CAPACITY, 0, 0, v->engine_type, v);
+		capacity = Get15BitVehicleCallback(CBID_VEHICLE_REFIT_CAPACITY, 0, 0, v->engine_type, v);
 
 		/* Restore the cargo type */
 		v->cargo_type = temp_cid;
Index: station_cmd.c
===================================================================
--- station_cmd.c	(revision 5934)
+++ station_cmd.c	(working copy)
@@ -1043,7 +1043,7 @@
 		}
 
 		/* Check if the station is buildable */
-		if (HASBIT(statspec->callbackmask, CBM_STATION_AVAIL) && GetStationCallback(CBID_STATION_AVAILABILITY, 0, 0, statspec, NULL, INVALID_TILE) == 0) {
+		if (HASBIT(statspec->callbackmask, CBM_STATION_AVAIL) && Get8BitStationCallback(CBID_STATION_AVAILABILITY, 0, 0, statspec, NULL, INVALID_TILE) == 0) {
 			return CMD_ERROR;
 		}
 	}
@@ -1090,7 +1090,7 @@
 				if (statspec != NULL) {
 					/* Use a fixed axis for GetPlatformInfo as our platforms / numtracks are always the right way around */
 					uint32 platinfo = GetPlatformInfo(AXIS_X, 0, plat_len, numtracks_orig, plat_len - w, numtracks_orig - numtracks, false);
-					uint16 callback = GetStationCallback(CBID_STATION_TILE_LAYOUT, platinfo, 0, statspec, st, tile);
+					uint16 callback = Get8BitStationCallback(CBID_STATION_TILE_LAYOUT, platinfo, 0, statspec, st, tile);
 					if (callback != CALLBACK_FAILED && callback < 8) SetStationGfx(tile, callback + axis);
 				}
 
@@ -2075,7 +2075,7 @@
 			relocation = GetCustomStationRelocation(statspec, st, ti->tile);
 
 			if (HASBIT(statspec->callbackmask, CBM_CUSTOM_LAYOUT)) {
-				uint16 callback = GetStationCallback(CBID_STATION_SPRITE_LAYOUT, 0, 0, statspec, st, ti->tile);
+				uint16 callback = Get15BitStationCallback(CBID_STATION_SPRITE_LAYOUT, 0, 0, statspec, st, ti->tile);
 				if (callback != CALLBACK_FAILED) tile = callback + GetRailStationAxis(ti->tile);
 			}
 
Index: train_cmd.c
===================================================================
--- train_cmd.c	(revision 5934)
+++ train_cmd.c	(working copy)
@@ -172,7 +172,7 @@
 
 			/* Check powered wagon / visual effect callback */
 			if (HASBIT(EngInfo(u->engine_type)->callbackmask, CBM_WAGON_POWER)) {
-				uint16 callback = GetVehicleCallback(CBID_TRAIN_WAGON_POWER, 0, 0, u->engine_type, u);
+				uint16 callback = Get8BitVehicleCallback(CBID_TRAIN_WAGON_POWER, 0, 0, u->engine_type, u);
 
 				if (callback != CALLBACK_FAILED) u->u.rail.cached_vis_effect = callback;
 			}
@@ -199,7 +199,7 @@
 		// check the vehicle length (callback)
 		veh_len = CALLBACK_FAILED;
 		if (HASBIT(EngInfo(u->engine_type)->callbackmask, CBM_VEHICLE_LENGTH)) {
-			veh_len = GetVehicleCallback(CBID_TRAIN_VEHICLE_LENGTH, 0, 0, u->engine_type, u);
+			veh_len = Get8BitVehicleCallback(CBID_TRAIN_VEHICLE_LENGTH, 0, 0, u->engine_type, u);
 		}
 		if (veh_len == CALLBACK_FAILED) veh_len = rvi_u->shorten_factor;
 		veh_len = clamp(veh_len, 0, u->next == NULL ? 7 : 5); // the clamp on vehicles not the last in chain is stricter, as too short wagons can break the 'follow next vehicle' code
@@ -486,7 +486,7 @@
 	if (!HASBIT(EngInfo(engine_type)->callbackmask, CBM_ARTIC_ENGINE)) return 0;
 
 	for (i = 1; i < 10; i++) {
-		callback = GetVehicleCallback(CBID_TRAIN_ARTIC_ENGINE, i, 0, engine_type, NULL);
+		callback = Get8BitVehicleCallback(CBID_TRAIN_ARTIC_ENGINE, i, 0, engine_type, NULL);
 		if (callback == CALLBACK_FAILED || callback == 0xFF) break;
 	}
 
@@ -506,7 +506,7 @@
 	if (!HASBIT(EngInfo(v->engine_type)->callbackmask, CBM_ARTIC_ENGINE)) return;
 
 	for (i = 1; i < 10; i++) {
-		callback = GetVehicleCallback(CBID_TRAIN_ARTIC_ENGINE, i, 0, v->engine_type, NULL);
+		callback = Get8BitVehicleCallback(CBID_TRAIN_ARTIC_ENGINE, i, 0, v->engine_type, NULL);
 		if (callback == CALLBACK_FAILED || callback == 0xFF) return;
 
 		u->next = vl[i];
@@ -1079,7 +1079,7 @@
 
 	if (dst_head != NULL) {
 		/* Check NewGRF Callback 0x1D */
-		uint16 callback = GetVehicleCallbackParent(CBID_TRAIN_ALLOW_WAGON_ATTACH, 0, 0, dst_head->engine_type, src, dst_head);
+		uint16 callback = Get8BitVehicleCallbackParent(CBID_TRAIN_ALLOW_WAGON_ATTACH, 0, 0, dst_head->engine_type, src, dst_head);
 		if (callback != CALLBACK_FAILED) {
 			if (callback == 0xFD) return_cmd_error(STR_INCOMPATIBLE_RAIL_TYPES);
 			if (callback < 0xFD) {
@@ -1238,7 +1238,7 @@
 
 	/* Check if this train can be started/stopped. The callback will fail or
 	 * return 0xFF if it can. */
-	callback = GetVehicleCallback(CBID_VEHICLE_START_STOP_CHECK, 0, 0, v->engine_type, v);
+	callback = Get8BitVehicleCallback(CBID_VEHICLE_START_STOP_CHECK, 0, 0, v->engine_type, v);
 	if (callback != CALLBACK_FAILED && callback != 0xFF) {
 		StringID error = GetGRFStringID(GetEngineGRFID(v->engine_type), 0xD000 + callback);
 		return_cmd_error(error);
@@ -1778,7 +1778,7 @@
 				v->cargo_type = new_cid;
 				v->cargo_subtype = new_subtype;
 				/* Check the refit capacity callback */
-				amount = GetVehicleCallback(CBID_VEHICLE_REFIT_CAPACITY, 0, 0, v->engine_type, v);
+				amount = Get15BitVehicleCallback(CBID_VEHICLE_REFIT_CAPACITY, 0, 0, v->engine_type, v);
 				/* Restore the original cargo type */
 				v->cargo_type = temp_cid;
 				v->cargo_subtype = temp_subtype;
Index: vehicle_gui.c
===================================================================
--- vehicle_gui.c	(revision 5934)
+++ vehicle_gui.c	(working copy)
@@ -258,7 +258,7 @@
 /* Display additional text from NewGRF in the purchase information window */
 int ShowAdditionalText(int x, int y, int w, EngineID engine)
 {
-	uint16 callback = GetVehicleCallback(CBID_VEHICLE_ADDITIONAL_TEXT, 0, 0, engine, NULL);
+	uint16 callback = Get8BitVehicleCallback(CBID_VEHICLE_ADDITIONAL_TEXT, 0, 0, engine, NULL);
 	if (callback == CALLBACK_FAILED) return 0;
 
 	DrawStringTruncated(x, y, GetGRFStringID(GetEngineGRFID(engine), 0xD000 + callback), 16, w);
