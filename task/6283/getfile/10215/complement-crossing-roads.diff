# HG changeset patch
# Parent eecab9c58e15289abe7e39be5f53df04479b1d87

diff -r eecab9c58e15 src/rail_cmd.cpp
--- a/src/rail_cmd.cpp	Thu Apr 16 17:17:10 2015 +0200
+++ b/src/rail_cmd.cpp	Thu Apr 16 18:42:07 2015 +0200
@@ -485,34 +485,33 @@
 				RoadTypes roadtypes = GetRoadTypes(tile);
 				RoadBits road = GetRoadBits(tile, ROADTYPE_ROAD);
 				RoadBits tram = GetRoadBits(tile, ROADTYPE_TRAM);
-				if ((track == TRACK_X && (road | tram) == ROAD_Y) ||
-						(track == TRACK_Y && (road | tram) == ROAD_X)) {
-					switch (roadtypes) {
-						default: break;
-						case ROADTYPES_TRAM:
-							/* Tram crossings must always have road. */
-							if (flags & DC_EXEC) {
-								SetRoadOwner(tile, ROADTYPE_ROAD, _current_company);
-								Company *c = Company::GetIfValid(_current_company);
-								if (c != NULL) {
-									/* A full diagonal tile has two road bits. */
-									c->infrastructure.road[ROADTYPE_ROAD] += 2;
-									DirtyCompanyInfrastructureWindows(c->index);
-								}
-							}
-							roadtypes |= ROADTYPES_ROAD;
-							cost.AddCost(2 * _price[PR_BUILD_ROAD]);
-							break;
-
-						case ROADTYPES_ALL:
-							if (road != tram) return CMD_ERROR;
-							break;
-					}
-
-					road |= tram;
+				if ((track == TRACK_X && ((road | tram) & ROAD_X) == 0) ||
+						(track == TRACK_Y && ((road | tram) & ROAD_Y) == 0)) {
+					Owner road_owner = GetRoadOwner(tile, ROADTYPE_ROAD);
+					Owner tram_owner = GetRoadOwner(tile, ROADTYPE_TRAM);
+					/* Complement to full road. */
+					RoadBits new_road = ((track == TRACK_X) ? ROAD_Y : ROAD_X) & ~road;
+					RoadBits new_tram = ((track == TRACK_X) ? ROAD_Y : ROAD_X) & ~tram;
+					/* Crossings must always have a road... */
+					if (road == ROAD_NONE) road_owner = _current_company;
+					roadtypes |= ROADTYPES_ROAD;
+					/* ...but tram is optional. */
+					if (tram == ROAD_NONE) new_tram = ROAD_NONE;
+
+					cost.AddCost((CountBits(new_road) + CountBits(new_tram)) * _price[PR_BUILD_ROAD]);
 
 					if (flags & DC_EXEC) {
-						MakeRoadCrossing(tile, GetRoadOwner(tile, ROADTYPE_ROAD), GetRoadOwner(tile, ROADTYPE_TRAM), _current_company, (track == TRACK_X ? AXIS_Y : AXIS_X), railtype, roadtypes, GetTownIndex(tile));
+						if (new_road != ROAD_NONE) {
+							Company *c = Company::GetIfValid(road_owner);
+							if (c != NULL) c->infrastructure.road[ROADTYPE_ROAD] += CountBits(new_road);
+							DirtyCompanyInfrastructureWindows(c->index);
+						}
+						if (new_tram != ROAD_NONE) {
+							Company *c = Company::GetIfValid(tram_owner);
+							if (c != NULL) c->infrastructure.road[ROADTYPE_TRAM] += CountBits(new_tram);
+							DirtyCompanyInfrastructureWindows(c->index);
+						}
+						MakeRoadCrossing(tile, road_owner, tram_owner, _current_company, (track == TRACK_X ? AXIS_Y : AXIS_X), railtype, roadtypes, GetTownIndex(tile));
 						UpdateLevelCrossing(tile, false);
 						Company::Get(_current_company)->infrastructure.rail[railtype] += LEVELCROSSING_TRACKBIT_FACTOR;
 						DirtyCompanyInfrastructureWindows(_current_company);
