Index: src/openttd.cpp
===================================================================
--- src/openttd.cpp	(revision 24118)
+++ src/openttd.cpp	(working copy)
@@ -1119,6 +1119,7 @@
 	}
 }
 
+#include "town.h"
 
 /**
  * Check the validity of some of the caches.
@@ -1128,6 +1129,40 @@
  */
 static void CheckCaches()
 {
+	SmallVector<uint, 16> town_populations;
+	SmallVector<uint, 16> town_houses;
+
+	Town *town;
+	FOR_ALL_TOWNS(town) {
+		*town_populations.Append() = town->population;
+		*town_houses.Append() = town->num_houses;
+
+		town->population = 0;
+		town->num_houses = 0;
+	}
+
+	for (TileIndex t = 0; t < MapSize(); t++) {
+		if (!IsTileType(t, MP_HOUSE)) continue;
+
+		HouseID house_id = GetCleanHouseType(t);
+		town = Town::GetByTile(t);
+		if (IsHouseCompleted(t)) town->population += HouseSpec::Get(house_id)->population;
+
+		/* Increase the number of houses for every house, but only once. */
+		if (GetHouseNorthPart(house_id) == 0) town->num_houses++;
+	}
+
+	uint i = 0;
+	FOR_ALL_TOWNS(town) {
+		if (town_populations[i] != town->population) {
+			DEBUG(desync, 0, "town population cache mismatch: town %i", (int)town->index);
+		}
+		if (town_houses[i] != town->num_houses) {
+			DEBUG(desync, 0, "town house cache mismatch: town %i", (int)town->index);
+		}
+		i++;
+	}
+
 	/* Return here so it is easy to add checks that are run
 	 * always to aid testing of caches. */
 	if (_debug_desync_level <= 1) return;
@@ -1140,7 +1175,6 @@
 	extern void AfterLoadCompanyStats();
 	AfterLoadCompanyStats();
 
-	uint i = 0;
 	FOR_ALL_COMPANIES(c) {
 		if (MemCmpT(old_infrastructure.Get(i), &c->infrastructure) != 0) {
 			DEBUG(desync, 2, "infrastructure cache mismatch: company %i", (int)c->index);
