diff -r openttd-1.2.3/bin/ai/regression/regression.nut openttd-1.2.3mod/bin/ai/regression/regression.nut
554a555
> 	print("  BT_CLEAR_RIVER:  " + AITile.GetBuildCost(AITile.BT_CLEAR_RIVER));
diff -r openttd-1.2.3/src/script/api/ai/ai_tile.hpp.sq openttd-1.2.3mod/src/script/api/ai/ai_tile.hpp.sq
68a69
> 	SQAITile.DefSQConst(engine, ScriptTile::BT_CLEAR_RIVER,              "BT_CLEAR_RIVER");
82a84
> 	SQAITile.DefSQStaticMethod(engine, &ScriptTile::IsRiverTile,                "IsRiverTile",                2, ".i");
diff -r openttd-1.2.3/src/script/api/game/game_tile.hpp.sq openttd-1.2.3mod/src/script/api/game/game_tile.hpp.sq
68a69
> 	SQGSTile.DefSQConst(engine, ScriptTile::BT_CLEAR_RIVER,              "BT_CLEAR_RIVER");
82a84
> 	SQGSTile.DefSQStaticMethod(engine, &ScriptTile::IsRiverTile,                "IsRiverTile",                2, ".i");
diff -r openttd-1.2.3/src/script/api/script_tile.cpp openttd-1.2.3mod/src/script/api/script_tile.cpp
66a67,73
> /* static */ bool ScriptTile::IsRiverTile(TileIndex tile)
> {
> 	if (!::IsValidTile(tile)) return false;
> 
> 	return ::IsTileType(tile, MP_WATER) && ::IsRiver(tile);
> }
> 
304a312
> 		case BT_CLEAR_RIVER:  return ::GetPrice(PR_CLEAR_WATER, 1, NULL);
diff -r openttd-1.2.3/src/script/api/script_tile.hpp openttd-1.2.3mod/src/script/api/script_tile.hpp
120a121
> 		BT_CLEAR_RIVER,	 ///< Clear a tile with a river
153a155,162
> 
> 	/**
> 	 * Checks whether the given tile is actually a river tile.
> 	 * @param tile The tile to check on.
> 	 * @pre ScriptMap::IsValidTile(tile).
> 	 * @return True if and only if the tile is a river tile.
> 	 */
> 	static bool IsRiverTile(TileIndex tile);
