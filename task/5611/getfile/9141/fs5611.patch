diff --git a/src/goal_gui.cpp b/src/goal_gui.cpp
--- a/src/goal_gui.cpp
+++ b/src/goal_gui.cpp
@@ -27,8 +27,9 @@
 
 #include "table/strings.h"
 
-struct GoalListWindow : Window {
-	Scrollbar *vscroll;
+/** Window for displaying goals. */
+struct GoalListWindow : public Window {
+	Scrollbar *vscroll; ///< Reference to the scrollbar widget.
 
 	GoalListWindow(WindowDesc *desc, WindowNumber window_number) : Window(desc)
 	{
@@ -38,7 +39,7 @@
 		this->OnInvalidateData(0);
 	}
 
-	virtual void SetStringParameters(int widget) const
+	/* virtual */ void SetStringParameters(int widget) const
 	{
 		if (widget != WID_GOAL_CAPTION) return;
 
@@ -50,11 +51,11 @@
 		}
 	}
 
-	virtual void OnClick(Point pt, int widget, int click_count)
+	/* virtual */ void OnClick(Point pt, int widget, int click_count)
 	{
-		if (widget != WID_GOAL_GOAL && widget != WID_GOAL_PROGRESS) return;
+		if (widget != WID_GOAL_TEXT) return;
 
-		int y = this->vscroll->GetScrolledRowFromWidget(pt.y, this, WID_GOAL_GOAL, WD_FRAMERECT_TOP);
+		int y = this->vscroll->GetScrolledRowFromWidget(pt.y, this, WID_GOAL_TEXT, WD_FRAMERECT_TOP);
 		int num = 0;
 		const Goal *s;
 		FOR_ALL_GOALS(s) {
@@ -69,11 +70,11 @@
 		}
 
 		if (num == 0) {
-			y--; // "None"
+			y--; // "None" line.
 			if (y < 0) return;
 		}
 
-		y -= 2; // "Company specific goals:"
+		y -= 2; // "Company specific goals:" line.
 		if (y < 0) return;
 
 		FOR_ALL_GOALS(s) {
@@ -87,9 +88,13 @@
 		}
 	}
 
+	/**
+	 * Handle clicking at a goal.
+	 * @param s %Goal clicked at.
+	 */
 	void HandleClick(const Goal *s)
 	{
-		/* determine dst coordinate for goal and try to scroll to it */
+		/* Determine dst coordinate for goal and try to scroll to it. */
 		TileIndex xy;
 		switch (s->type) {
 			case GT_NONE: return;
@@ -122,11 +127,11 @@
 
 	/**
 	 * Count the number of lines in this window.
-	 * @return the number of lines
+	 * @return the number of lines.
 	 */
 	uint CountLines()
 	{
-		/* Count number of (non) awarded goals */
+		/* Count number of (non) awarded goals. */
 		uint num_global = 0;
 		uint num_company = 0;
 		const Goal *s;
@@ -138,7 +143,7 @@
 			}
 		}
 
-		/* Count the 'none' lines */
+		/* Count the 'none' lines. */
 		if (num_global  == 0) num_global = 1;
 		if (num_company == 0) num_company = 1;
 
@@ -146,27 +151,11 @@
 		return 3 + num_global + num_company;
 	}
 
-	virtual void UpdateWidgetSize(int widget, Dimension *size, const Dimension &padding, Dimension *fill, Dimension *resize)
+	/* virtual */ void UpdateWidgetSize(int widget, Dimension *size, const Dimension &padding, Dimension *fill, Dimension *resize)
 	{
-		if (widget != WID_GOAL_GOAL && widget != WID_GOAL_PROGRESS) return;
+		if (widget != WID_GOAL_TEXT) return;
 		Dimension d = maxdim(GetStringBoundingBox(STR_GOALS_GLOBAL_TITLE), GetStringBoundingBox(STR_GOALS_COMPANY_TITLE));
 
-		if (widget == WID_GOAL_PROGRESS) {
-			/* Get max progress width. */
-			d.width = 0;
-			Goal *s;
-			FOR_ALL_GOALS(s) {
-				if (s->progress != NULL) {
-					SetDParamStr(0, s->progress);
-					Dimension goal_d = GetStringBoundingBox(STR_GOALS_PROGRESS);
-
-					if (goal_d.width > d.width) {
-						d.width = goal_d.width;
-					}
-				}
-			}
-		}
-
 		resize->height = d.height;
 
 		d.height *= 5;
@@ -177,31 +166,39 @@
 
 	/**
 	 * Draws either the global goals or the company goal section.
-	 * This is a helper method for DrawWidget.
+	 * This is a helper method for #DrawWidget.
+	 * @param pos [inout] Vertical line number to draw.
+	 * @param cap Number of lines to draw in the window.
+	 * @param x Left edge of the text line to draw.
+	 * @param y Vertical position of the top edge of the window.
+	 * @param right Right edge of the text line to draw.
+	 * @param global_section Whether the global goals are printed.
 	 */
-	void DrawPartialGoalList(int widget, int &pos, const int cap, int x, int y, int right, bool global_section) const
+	void DrawPartialGoalList(int &pos, const int cap, int x, int y, int right, bool global_section) const
 	{
-		if (widget == WID_GOAL_GOAL && IsInsideMM(pos, 0, cap)) DrawString(x, right, y + pos * FONT_HEIGHT_NORMAL, global_section ? STR_GOALS_GLOBAL_TITLE : STR_GOALS_COMPANY_TITLE);
+		DrawString(x, right, y + pos * FONT_HEIGHT_NORMAL, global_section ? STR_GOALS_GLOBAL_TITLE : STR_GOALS_COMPANY_TITLE);
 		pos++;
 
 		uint num = 0;
 		const Goal *s;
 		FOR_ALL_GOALS(s) {
-			if (global_section ? s->company == INVALID_COMPANY : s->company == this->window_number && s->company != INVALID_COMPANY) {
+			if (global_section ? s->company == INVALID_COMPANY : (s->company == this->window_number && s->company != INVALID_COMPANY)) {
 				if (IsInsideMM(pos, 0, cap)) {
-					switch (widget) {
-						case WID_GOAL_GOAL:
-							/* Display the goal. */
-							SetDParamStr(0, s->text);
-							DrawString(x, right, y + pos * FONT_HEIGHT_NORMAL, STR_GOALS_TEXT);
-							break;
+					/* Display the goal. */
+					SetDParamStr(0, s->text);
+					int end = DrawString(x, right, y + pos * FONT_HEIGHT_NORMAL, STR_GOALS_TEXT);
 
-						case WID_GOAL_PROGRESS:
-							if (s->progress != NULL) {
-								SetDParamStr(0, s->progress);
-								DrawString(x, right, y + pos * FONT_HEIGHT_NORMAL, s->completed ? STR_GOALS_PROGRESS_COMPLETE : STR_GOALS_PROGRESS, TC_FROMSTRING, SA_RIGHT | SA_FORCE);
-							}
-							break;
+					if (s->progress != NULL) {
+						int left;
+						if (_current_text_dir == TD_RTL) {
+							left = x;
+							right = end - 4;
+						} else {
+							left = end + 4;
+						}
+						SetDParamStr(0, s->progress);
+						StringID str = s->completed ? STR_GOALS_PROGRESS_COMPLETE : STR_GOALS_PROGRESS;
+						DrawString(left, right, y + pos * FONT_HEIGHT_NORMAL, str, TC_FROMSTRING, SA_RIGHT | SA_FORCE);
 					}
 				}
 				pos++;
@@ -209,18 +206,18 @@
 			}
 		}
 
-		if (widget == WID_GOAL_GOAL && num == 0) {
-			if (IsInsideMM(pos, 0, cap)) DrawString(x, right, y + pos * FONT_HEIGHT_NORMAL, !global_section && this->window_number == INVALID_COMPANY ? STR_GOALS_SPECTATOR_NONE : STR_GOALS_NONE);
+		if (num == 0) {
+			if (IsInsideMM(pos, 0, cap)) {
+				StringID str = (!global_section && this->window_number == INVALID_COMPANY) ? STR_GOALS_SPECTATOR_NONE : STR_GOALS_NONE;
+				DrawString(x, right, y + pos * FONT_HEIGHT_NORMAL, str);
+			}
 			pos++;
 		}
 	}
 
-	virtual void DrawWidget(const Rect &r, int widget) const
+	/* virtual */ void DrawWidget(const Rect &r, int widget) const
 	{
-		if (widget != WID_GOAL_GOAL && widget != WID_GOAL_PROGRESS) return;
-
-		YearMonthDay ymd;
-		ConvertDateToYMD(_date, &ymd);
+		if (widget != WID_GOAL_TEXT) return;
 
 		int right = r.right - WD_FRAMERECT_RIGHT;
 		int y = r.top + WD_FRAMERECT_TOP;
@@ -230,16 +227,16 @@
 		const int cap = this->vscroll->GetCapacity();
 
 		/* Draw partial list with global goals */
-		DrawPartialGoalList(widget, pos, cap, x, y, right, true);
+		DrawPartialGoalList(pos, cap, x, y, right, true);
 
 		/* Draw partial list with company goals */
 		pos++;
-		DrawPartialGoalList(widget, pos, cap, x, y, right, false);
+		DrawPartialGoalList(pos, cap, x, y, right, false);
 	}
 
-	virtual void OnResize()
+	/* virtual */ void OnResize()
 	{
-		this->vscroll->SetCapacityFromWidget(this, WID_GOAL_GOAL);
+		this->vscroll->SetCapacityFromWidget(this, WID_GOAL_TEXT);
 	}
 
 	/**
@@ -247,13 +244,14 @@
 	 * @param data Information about the changed data.
 	 * @param gui_scope Whether the call is done from GUI scope. You may not do everything when not in GUI scope. See #InvalidateWindowData() for details.
 	 */
-	virtual void OnInvalidateData(int data = 0, bool gui_scope = true)
+	/* virtual */ void OnInvalidateData(int data = 0, bool gui_scope = true)
 	{
 		if (!gui_scope) return;
 		this->vscroll->SetCount(this->CountLines());
 	}
 };
 
+/** Widgets of the #GoalListWindow. */
 static const NWidgetPart _nested_goals_list_widgets[] = {
 	NWidget(NWID_HORIZONTAL),
 		NWidget(WWT_CLOSEBOX, COLOUR_BROWN),
@@ -262,14 +260,9 @@
 		NWidget(WWT_DEFSIZEBOX, COLOUR_BROWN),
 		NWidget(WWT_STICKYBOX, COLOUR_BROWN),
 	EndContainer(),
-	NWidget(NWID_HORIZONTAL), SetFill(1, 1),
-		NWidget(WWT_PANEL, COLOUR_BROWN), SetDataTip(0x0, STR_GOALS_TOOLTIP_CLICK_ON_SERVICE_TO_CENTER), SetResize(1, 1), SetFill(1, 0), SetScrollbar(WID_GOAL_SCROLLBAR),
-			NWidget(NWID_VERTICAL), SetPIP(WD_FRAMERECT_TOP, 4, WD_FRAMETEXT_BOTTOM),
-				NWidget(NWID_HORIZONTAL), SetPIP(2, 4, 2),
-					NWidget(WWT_EMPTY, COLOUR_GREY, WID_GOAL_GOAL), SetResize(1, 1), SetMinimalTextLines(2, 0), SetFill(1, 0),
-					NWidget(WWT_EMPTY, COLOUR_GREY, WID_GOAL_PROGRESS), SetResize(0, 1), SetMinimalTextLines(2, 0), SetFill(0, 1),
-				EndContainer(),
-			EndContainer(),
+	NWidget(NWID_HORIZONTAL),
+		NWidget(WWT_PANEL, COLOUR_BROWN), SetDataTip(0x0, STR_GOALS_TOOLTIP_CLICK_ON_SERVICE_TO_CENTER), SetScrollbar(WID_GOAL_SCROLLBAR),
+			NWidget(WWT_EMPTY, COLOUR_GREY, WID_GOAL_TEXT), SetResize(1, 1), SetMinimalTextLines(2, 0), SetFill(1, 1), SetPadding(WD_FRAMERECT_TOP, 2, WD_FRAMETEXT_BOTTOM, 2),
 		EndContainer(),
 		NWidget(NWID_VERTICAL),
 			NWidget(NWID_VSCROLLBAR, COLOUR_BROWN, WID_GOAL_SCROLLBAR),
@@ -285,6 +278,10 @@
 	_nested_goals_list_widgets, lengthof(_nested_goals_list_widgets)
 );
 
+/**
+ * Open a goal list window.
+ * @param company %Company to display the goals for, use #INVALID_COMPANY to display global goals.
+ */
 void ShowGoalsList(CompanyID company)
 {
 	if (!Company::IsValidID(company)) company = (CompanyID)INVALID_COMPANY;
@@ -292,20 +289,19 @@
 	AllocateWindowDescFront<GoalListWindow>(&_goals_list_desc, company);
 }
 
-
-
-struct GoalQuestionWindow : Window {
-	char *question;
-	int buttons;
-	int button[3];
-	byte type;
+/** Ask a question about a goal. */
+struct GoalQuestionWindow : public Window {
+	char *question; ///< Question to ask (private copy).
+	int buttons;    ///< Number of valid buttons in #button.
+	int button[3];  ///< Buttons to display.
+	byte type;      ///< Type of question.
 
 	GoalQuestionWindow(WindowDesc *desc, WindowNumber window_number, byte type, uint32 button_mask, const char *question) : Window(desc), type(type)
 	{
 		assert(type < GOAL_QUESTION_TYPE_COUNT);
 		this->question = strdup(question);
 
-		/* Figure out which buttons we have to enable */
+		/* Figure out which buttons we have to enable. */
 		uint bit;
 		int n = 0;
 		FOR_EACH_SET_BIT(bit, button_mask) {
@@ -326,7 +322,7 @@
 		free(this->question);
 	}
 
-	virtual void SetStringParameters(int widget) const
+	/* virtual */ void SetStringParameters(int widget) const
 	{
 		switch (widget) {
 			case WID_GQ_CAPTION:
@@ -347,7 +343,7 @@
 		}
 	}
 
-	virtual void OnClick(Point pt, int widget, int click_count)
+	/* virtual */ void OnClick(Point pt, int widget, int click_count)
 	{
 		switch (widget) {
 			case WID_GQ_BUTTON_1:
@@ -367,7 +363,7 @@
 		}
 	}
 
-	virtual void UpdateWidgetSize(int widget, Dimension *size, const Dimension &padding, Dimension *fill, Dimension *resize)
+	/* virtual */ void UpdateWidgetSize(int widget, Dimension *size, const Dimension &padding, Dimension *fill, Dimension *resize)
 	{
 		if (widget != WID_GQ_QUESTION) return;
 
@@ -375,7 +371,7 @@
 		size->height = GetStringHeight(STR_JUST_RAW_STRING, size->width) + WD_PAR_VSEP_WIDE;
 	}
 
-	virtual void DrawWidget(const Rect &r, int widget) const
+	/* virtual */ void DrawWidget(const Rect &r, int widget) const
 	{
 		if (widget != WID_GQ_QUESTION) return;
 
@@ -384,6 +380,7 @@
 	}
 };
 
+/** Widgets of the goal question window. */
 static const NWidgetPart _nested_goal_question_widgets[] = {
 	NWidget(NWID_HORIZONTAL),
 		NWidget(WWT_CLOSEBOX, COLOUR_LIGHT_BLUE),
@@ -416,7 +413,13 @@
 	_nested_goal_question_widgets, lengthof(_nested_goal_question_widgets)
 );
 
-
+/**
+ * Display a goal question.
+ * @param id ????
+ * @param type Type of question.
+ * @param button_mask Buttons to display.
+ * @param question Question to ask.
+ */
 void ShowGoalQuestion(uint16 id, byte type, uint32 button_mask, const char *question)
 {
 	new GoalQuestionWindow(&_goal_question_list_desc, id, type, button_mask, question);
diff --git a/src/script/api/game/game_window.hpp.sq b/src/script/api/game/game_window.hpp.sq
--- a/src/script/api/game/game_window.hpp.sq
+++ b/src/script/api/game/game_window.hpp.sq
@@ -496,8 +496,7 @@
 	SQGSWindow.DefSQConst(engine, ScriptWindow::WID_GP_PROGRESS_TEXT,                      "WID_GP_PROGRESS_TEXT");
 	SQGSWindow.DefSQConst(engine, ScriptWindow::WID_GP_ABORT,                              "WID_GP_ABORT");
 	SQGSWindow.DefSQConst(engine, ScriptWindow::WID_GOAL_CAPTION,                          "WID_GOAL_CAPTION");
-	SQGSWindow.DefSQConst(engine, ScriptWindow::WID_GOAL_GOAL,                             "WID_GOAL_GOAL");
-	SQGSWindow.DefSQConst(engine, ScriptWindow::WID_GOAL_PROGRESS,                         "WID_GOAL_PROGRESS");
+	SQGSWindow.DefSQConst(engine, ScriptWindow::WID_GOAL_TEXT,                             "WID_GOAL_TEXT");
 	SQGSWindow.DefSQConst(engine, ScriptWindow::WID_GOAL_SCROLLBAR,                        "WID_GOAL_SCROLLBAR");
 	SQGSWindow.DefSQConst(engine, ScriptWindow::WID_GQ_CAPTION,                            "WID_GQ_CAPTION");
 	SQGSWindow.DefSQConst(engine, ScriptWindow::WID_GQ_QUESTION,                           "WID_GQ_QUESTION");
diff --git a/src/script/api/script_window.hpp b/src/script/api/script_window.hpp
--- a/src/script/api/script_window.hpp
+++ b/src/script/api/script_window.hpp
@@ -1340,8 +1340,7 @@
 	/** Widgets of the #GoalListWindow class. */
 	enum GoalListWidgets {
 		WID_GOAL_CAPTION                             = ::WID_GOAL_CAPTION,                             ///< Caption of the window.
-		WID_GOAL_GOAL                                = ::WID_GOAL_GOAL,                                ///< Goal text column of the goal list.
-		WID_GOAL_PROGRESS                            = ::WID_GOAL_PROGRESS,                            ///< Goal progress column of the goal list.
+		WID_GOAL_TEXT                                = ::WID_GOAL_TEXT,                                ///< Goal text line in the goal list.
 		WID_GOAL_SCROLLBAR                           = ::WID_GOAL_SCROLLBAR,                           ///< Scrollbar of the goal list.
 	};
 
diff --git a/src/widgets/goal_widget.h b/src/widgets/goal_widget.h
--- a/src/widgets/goal_widget.h
+++ b/src/widgets/goal_widget.h
@@ -16,8 +16,7 @@
 /** Widgets of the #GoalListWindow class. */
 enum GoalListWidgets {
 	WID_GOAL_CAPTION,   ///< Caption of the window.
-	WID_GOAL_GOAL,      ///< Goal text column of the goal list.
-	WID_GOAL_PROGRESS,  ///< Goal progress column of the goal list.
+	WID_GOAL_TEXT,      ///< Goal text line in the goal list.
 	WID_GOAL_SCROLLBAR, ///< Scrollbar of the goal list.
 };
 
