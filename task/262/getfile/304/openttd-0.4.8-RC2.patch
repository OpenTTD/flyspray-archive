Only in openttd-0.4.8-RC2-os2: .deps
Only in openttd-0.4.8-RC2-os2/ai: ai.o
Only in openttd-0.4.8-RC2-os2/ai/default: default.o
Only in openttd-0.4.8-RC2-os2/ai/trolly: build.o
Only in openttd-0.4.8-RC2-os2/ai/trolly: pathfinder.o
Only in openttd-0.4.8-RC2-os2/ai/trolly: shared.o
Only in openttd-0.4.8-RC2-os2/ai/trolly: trolly.o
Only in openttd-0.4.8-RC2-os2: aircraft_cmd.o
Only in openttd-0.4.8-RC2-os2: aircraft_gui.o
Only in openttd-0.4.8-RC2-os2: airport.o
Only in openttd-0.4.8-RC2-os2: airport_gui.o
Only in openttd-0.4.8-RC2-os2: aystar.o
Only in openttd-0.4.8-RC2-os2: bridge_gui.o
Only in openttd-0.4.8-RC2-os2: build.log
Only in openttd-0.4.8-RC2-os2: callback_table.o
Only in openttd-0.4.8-RC2-os2: clear_cmd.o
Only in openttd-0.4.8-RC2-os2: command.o
Only in openttd-0.4.8-RC2-os2: conf.cmd
diff -ur openttd-0.4.8-RC2/configure openttd-0.4.8-RC2-os2/configure
--- openttd-0.4.8-RC2/configure	Tue May  2 22:12:20 2006
+++ openttd-0.4.8-RC2-os2/configure	Thu Aug  3 12:09:26 2006
@@ -19,7 +19,7 @@
 	echo " --host-cc          Sets the host-compiler              [\$CC]"
 	echo " --os               Sets the OS. Listens to:            [detected]"
 	echo "                       UNIX, OSX, FREEBSD, MORPHOS"
-	echo "                       BEOS, SUNOS, CYGWIN, MINGW"
+	echo "                       BEOS, SUNOS, CYGWIN, MINGW, OS2"
 	echo " --windres          Sets the windres (Windows)          [windres]"
 	echo " --force-le         Force LE platform                   [no]"
 	echo " --force-be         Force BE platform                   [no]"
@@ -222,6 +222,9 @@
 			;;
 		BEOS)
 			PARAM="$PARAM BEOS=1 UNIX=1"
+			;;
+		OS2)
+			PARAM="$PARAM OS2=1 UNIX=1"
 			;;
 		SUNOS)
 			PARAM="$PARAM SUNOS=1 UNIX=1"
Only in openttd-0.4.8-RC2-os2: console.o
diff -ur openttd-0.4.8-RC2/console_cmds.c openttd-0.4.8-RC2-os2/console_cmds.c
--- openttd-0.4.8-RC2/console_cmds.c	Fri Jun 16 02:17:12 2006
+++ openttd-0.4.8-RC2-os2/console_cmds.c	Thu Aug  3 12:16:54 2006
@@ -179,7 +179,7 @@
 	if (argc == 2) {
 		char buf[200];
 
-		snprintf(buf, lengthof(buf), "%s%s%s.sav", _path.save_dir, PATHSEP, argv[1]);
+		snprintf(buf, lengthof(buf), "%s%s%s.sav", _paths.save_dir, PATHSEP, argv[1]);
 		IConsolePrint(_icolour_def, "Saving map...");
 
 		if (SaveOrLoad(buf, SL_SAVE) != SL_OK) {
Only in openttd-0.4.8-RC2-os2: console_cmds.o
Only in openttd-0.4.8-RC2-os2: currency.o
Only in openttd-0.4.8-RC2-os2: debug.o
Only in openttd-0.4.8-RC2-os2: dedicated.o
Only in openttd-0.4.8-RC2-os2: depot.o
Only in openttd-0.4.8-RC2-os2: disaster_cmd.o
Only in openttd-0.4.8-RC2-os2: dock_gui.o
diff -ur openttd-0.4.8-RC2/driver.c openttd-0.4.8-RC2-os2/driver.c
--- openttd-0.4.8-RC2/driver.c	Sat Jan 28 21:38:06 2006
+++ openttd-0.4.8-RC2-os2/driver.c	Thu Aug  3 12:46:32 2006
@@ -45,7 +45,7 @@
 #ifdef __BEOS__
 	M("bemidi",  "BeOS MIDI Driver",        &_bemidi_music_driver),
 #endif
-#ifdef __OS2__
+#if defined(__OS2__)&&!defined(__INNOTEK_LIBC__)
 	M("os2",     "OS/2 Music Driver",       &_os2_music_driver),
 #endif
 #ifdef WIN32_ENABLE_DIRECTMUSIC_SUPPORT
Only in openttd-0.4.8-RC2-os2: driver.o
Only in openttd-0.4.8-RC2-os2: dummy_land.o
Only in openttd-0.4.8-RC2-os2: economy.o
Only in openttd-0.4.8-RC2-os2: endian_check
Only in openttd-0.4.8-RC2-os2: endian_check.exe
Only in openttd-0.4.8-RC2-os2: endian_host.h
Only in openttd-0.4.8-RC2-os2: endian_target.h
Only in openttd-0.4.8-RC2-os2: engine.o
Only in openttd-0.4.8-RC2-os2: engine_gui.o
diff -ur openttd-0.4.8-RC2/fileio.c openttd-0.4.8-RC2-os2/fileio.c
--- openttd-0.4.8-RC2/fileio.c	Sat Dec 10 21:46:44 2005
+++ openttd-0.4.8-RC2-os2/fileio.c	Thu Aug  3 12:28:46 2006
@@ -110,22 +110,22 @@
 	FILE *f;
 	char buf[MAX_PATH];
 
-	sprintf(buf, "%s%s", _path.data_dir, filename);
+	sprintf(buf, "%s%s", _paths.data_dir, filename);
 
 	f = fopen(buf, "rb");
 #if !defined(WIN32)
 	if (f == NULL) {
 		char *s;
 		// Make lower case and try again
-		for(s=buf + strlen(_path.data_dir) - 1; *s != 0; s++)
+		for(s=buf + strlen(_paths.data_dir) - 1; *s != 0; s++)
 			*s = tolower(*s);
 		f = fopen(buf, "rb");
 
 #if defined SECOND_DATA_DIR
 	// tries in the 2nd data directory
 		if (f == NULL) {
-			sprintf(buf, "%s%s", _path.second_data_dir, filename);
-			for(s=buf + strlen(_path.second_data_dir) - 1; *s != 0; s++)
+			sprintf(buf, "%s%s", _paths.second_data_dir, filename);
+			for(s=buf + strlen(_paths.second_data_dir) - 1; *s != 0; s++)
 			*s = tolower(*s);
 		f = fopen(buf, "rb");
 		}
@@ -146,22 +146,22 @@
 	FILE *f;
 	char buf[MAX_PATH];
 
-	sprintf(buf, "%s%s", _path.data_dir, filename);
+	sprintf(buf, "%s%s", _paths.data_dir, filename);
 
 	f = fopen(buf, "rb");
 #if !defined(WIN32)
 	if (f == NULL) {
 		char *s;
 		// Make lower case and try again
-		for(s=buf + strlen(_path.data_dir) - 1; *s != 0; s++)
+		for(s=buf + strlen(_paths.data_dir) - 1; *s != 0; s++)
 			*s = tolower(*s);
 		f = fopen(buf, "rb");
 
 #if defined SECOND_DATA_DIR
 		// tries in the 2nd data directory
 		if (f == NULL) {
-			sprintf(buf, "%s%s", _path.second_data_dir, filename);
-			for(s=buf + strlen(_path.second_data_dir) - 1; *s != 0; s++)
+			sprintf(buf, "%s%s", _paths.second_data_dir, filename);
+			for(s=buf + strlen(_paths.second_data_dir) - 1; *s != 0; s++)
 				*s = tolower(*s);
 			f = fopen(buf, "rb");
 		}
@@ -177,28 +177,28 @@
 	FILE *f;
 	char buf[MAX_PATH];
 
-	sprintf(buf, "%s%s", _path.data_dir, filename);
+	sprintf(buf, "%s%s", _paths.data_dir, filename);
 
 	f = fopen(buf, "rb");
 #if !defined(WIN32)
 	if (f == NULL) {
 		char *s;
 		// Make lower case and try again
-		for(s=buf + strlen(_path.data_dir) - 1; *s != 0; s++)
+		for(s=buf + strlen(_paths.data_dir) - 1; *s != 0; s++)
 			*s = tolower(*s);
 		f = fopen(buf, "rb");
 
 #if defined SECOND_DATA_DIR
 	// tries in the 2nd data directory
 		if (f == NULL) {
-			sprintf(buf, "%s%s", _path.second_data_dir, filename);
-			for(s=buf + strlen(_path.second_data_dir) - 1; *s != 0; s++)
+			sprintf(buf, "%s%s", _paths.second_data_dir, filename);
+			for(s=buf + strlen(_paths.second_data_dir) - 1; *s != 0; s++)
 			*s = tolower(*s);
 		f = fopen(buf, "rb");
 		}
 
 	if (f == NULL)
-		sprintf(buf, "%s%s", _path.data_dir, filename);	//makes it print the primary datadir path instead of the secundary one
+		sprintf(buf, "%s%s", _paths.data_dir, filename);	//makes it print the primary datadir path instead of the secundary one
 
 #endif
 	}
Only in openttd-0.4.8-RC2-os2: fileio.o
Only in openttd-0.4.8-RC2-os2: gfx.o
diff -ur openttd-0.4.8-RC2/gfxinit.c openttd-0.4.8-RC2-os2/gfxinit.c
--- openttd-0.4.8-RC2/gfxinit.c	Sun Mar 19 02:33:54 2006
+++ openttd-0.4.8-RC2-os2/gfxinit.c	Thu Aug  3 12:28:00 2006
@@ -118,14 +118,14 @@
 	char buf[MAX_PATH];
 
 	// open file
-	sprintf(buf, "%s%s", _path.data_dir, file.filename);
+	sprintf(buf, "%s%s", _paths.data_dir, file.filename);
 	f = fopen(buf, "rb");
 
 #if !defined(WIN32)
 	if (f == NULL) {
 		char *s;
 	// make lower case and check again
-		for (s = buf + strlen(_path.data_dir) - 1; *s != '\0'; s++)
+		for (s = buf + strlen(_paths.data_dir) - 1; *s != '\0'; s++)
 			*s = tolower(*s);
 		f = fopen(buf, "rb");
 	}
Only in openttd-0.4.8-RC2-os2: gfxinit.o
Only in openttd-0.4.8-RC2-os2: graph_gui.o
Only in openttd-0.4.8-RC2-os2: industry_cmd.o
Only in openttd-0.4.8-RC2-os2: industry_gui.o
Only in openttd-0.4.8-RC2-os2: intro_gui.o
Only in openttd-0.4.8-RC2-os2: landscape.o
Only in openttd-0.4.8-RC2-os2/lang: american.lng
Only in openttd-0.4.8-RC2-os2/lang: brazilian_portuguese.lng
Only in openttd-0.4.8-RC2-os2/lang: catalan.lng
Only in openttd-0.4.8-RC2-os2/lang: czech.lng
Only in openttd-0.4.8-RC2-os2/lang: danish.lng
Only in openttd-0.4.8-RC2-os2/lang: dutch.lng
Only in openttd-0.4.8-RC2-os2/lang: english.lng
Only in openttd-0.4.8-RC2-os2/lang: estonian.lng
Only in openttd-0.4.8-RC2-os2/lang: finnish.lng
Only in openttd-0.4.8-RC2-os2/lang: french.lng
Only in openttd-0.4.8-RC2-os2/lang: galician.lng
Only in openttd-0.4.8-RC2-os2/lang: german.lng
Only in openttd-0.4.8-RC2-os2/lang: hungarian.lng
Only in openttd-0.4.8-RC2-os2/lang: icelandic.lng
Only in openttd-0.4.8-RC2-os2/lang: italian.lng
Only in openttd-0.4.8-RC2-os2/lang: norwegian.lng
Only in openttd-0.4.8-RC2-os2/lang: origveh.lng
Only in openttd-0.4.8-RC2-os2/lang: polish.lng
Only in openttd-0.4.8-RC2-os2/lang: portuguese.lng
Only in openttd-0.4.8-RC2-os2/lang: romanian.lng
Only in openttd-0.4.8-RC2-os2/lang: slovak.lng
Only in openttd-0.4.8-RC2-os2/lang: spanish.lng
Only in openttd-0.4.8-RC2-os2/lang: swedish.lng
Only in openttd-0.4.8-RC2-os2/lang: turkish.lng
Only in openttd-0.4.8-RC2-os2: main_gui.o
diff -ur openttd-0.4.8-RC2/Makefile openttd-0.4.8-RC2-os2/Makefile
--- openttd-0.4.8-RC2/Makefile	Tue Aug  1 01:33:44 2006
+++ openttd-0.4.8-RC2-os2/Makefile	Thu Aug  3 12:47:40 2006
@@ -251,10 +251,16 @@
 endif
 
 # Set output executable names
+ifdef OS2
+TTD=openttd.exe
+ENDIAN_CHECK=endian_check.exe
+STRGEN=strgen/strgen.exe
+else
 TTD=openttd$(EXE)
 ENDIAN_CHECK=endian_check$(EXE)
 STRGEN=strgen/strgen$(EXE)
 OSXAPP="OpenTTD.app"
+endif
 
 REV := 0.4.8-RC2
 
@@ -708,6 +714,7 @@
   SRCS += music/extmidi.c
 endif
 
+
 ifdef OSX
 	SRCS += os/macosx/macos.m
 	ifndef DEDICATED
@@ -719,6 +726,7 @@
 		SRCS += os/macosx/splash.c
 	endif
 endif
+
 
 ifdef BEOS
   SRCS += music/bemidi.cpp
Only in openttd-0.4.8-RC2-os2: Makefile.config
diff -ur openttd-0.4.8-RC2/makefiledir/Makefile.config_writer openttd-0.4.8-RC2-os2/makefiledir/Makefile.config_writer
--- openttd-0.4.8-RC2/makefiledir/Makefile.config_writer	Tue May  2 21:58:34 2006
+++ openttd-0.4.8-RC2-os2/makefiledir/Makefile.config_writer	Thu Aug  3 12:24:14 2006
@@ -81,6 +81,7 @@
 	$(call CONFIG_LINE,MORPHOS:=$(MORPHOS))
 	$(call CONFIG_LINE,BEOS:=$(BEOS))
 	$(call CONFIG_LINE,SUNOS:=$(SUNOS))
+	$(call CONFIG_LINE,OS2:=$(OS2))
 	$(call CONFIG_LINE,CYGWIN:=$(CYGWIN))
 	$(call CONFIG_LINE,MINGW:=$(MINGW))
 	$(call CONFIG_LINE,)
diff -ur openttd-0.4.8-RC2/makefiledir/Makefile.libdetection openttd-0.4.8-RC2-os2/makefiledir/Makefile.libdetection
--- openttd-0.4.8-RC2/makefiledir/Makefile.libdetection	Tue May  2 21:58:34 2006
+++ openttd-0.4.8-RC2-os2/makefiledir/Makefile.libdetection	Thu Aug  3 12:20:42 2006
@@ -25,6 +25,13 @@
 UNIX:=1
 endif
 
+# Automatically recognize if building on OS/2
+ifeq ($(shell uname), OS/2)
+OS2:=1
+# OS/2 uses the unix setup too
+UNIX:=1
+endif
+
 # Automatically recognize if building on MorphOS
 ifeq ($(shell uname), MorphOS)
 MORPHOS:=1
Only in openttd-0.4.8-RC2-os2: map.o
Only in openttd-0.4.8-RC2-os2: md5.o
Only in openttd-0.4.8-RC2-os2: mersenne.o
Only in openttd-0.4.8-RC2-os2: minilzo.o
Only in openttd-0.4.8-RC2-os2: misc.o
Only in openttd-0.4.8-RC2-os2: misc_cmd.o
diff -ur openttd-0.4.8-RC2/misc_gui.c openttd-0.4.8-RC2-os2/misc_gui.c
--- openttd-0.4.8-RC2/misc_gui.c	Fri Jul 14 03:28:54 2006
+++ openttd-0.4.8-RC2-os2/misc_gui.c	Thu Aug  3 12:17:10 2006
@@ -26,7 +26,7 @@
 
 #include "hal.h" // for file list
 
-static bool _fios_path_changed;
+static bool _fios_paths_changed;
 static bool _savegame_sort_dirty;
 
 
@@ -1155,7 +1155,7 @@
 
 void BuildFileList(void)
 {
-	_fios_path_changed = true;
+	_fios_paths_changed = true;
 	FiosFreeSavegameList();
 	switch (_saveload_mode) {
 		case SLD_NEW_GAME:
@@ -1176,9 +1176,9 @@
 	static StringID str = STR_4006_UNABLE_TO_READ_DRIVE;
 	static uint32 tot = 0;
 
-	if (_fios_path_changed) {
+	if (_fios_paths_changed) {
 		str = FiosGetDescText(&path, &tot);
-		_fios_path_changed = false;
+		_fios_paths_changed = false;
 	}
 
 	if (str != STR_4006_UNABLE_TO_READ_DRIVE) SetDParam(0, tot);
@@ -1234,16 +1234,16 @@
 		switch (_saveload_mode) {
 			case SLD_SAVE_GAME:
 			case SLD_LOAD_GAME:
-				ttd_strlcpy(&o_dir.name[0], _path.save_dir, sizeof(o_dir.name));
+				ttd_strlcpy(&o_dir.name[0], _paths.save_dir, sizeof(o_dir.name));
 				break;
 
 			case SLD_SAVE_SCENARIO:
 			case SLD_LOAD_SCENARIO:
-				ttd_strlcpy(&o_dir.name[0], _path.scenario_dir, sizeof(o_dir.name));
+				ttd_strlcpy(&o_dir.name[0], _paths.scenario_dir, sizeof(o_dir.name));
 				break;
 
 			default:
-				ttd_strlcpy(&o_dir.name[0], _path.personal_dir, sizeof(o_dir.name));
+				ttd_strlcpy(&o_dir.name[0], _paths.personal_dir, sizeof(o_dir.name));
 		}
 		break;
 		}
Only in openttd-0.4.8-RC2-os2: misc_gui.o
Only in openttd-0.4.8-RC2-os2: mixer.o
Only in openttd-0.4.8-RC2-os2/music: extmidi.o
Only in openttd-0.4.8-RC2-os2/music: null_m.o
Only in openttd-0.4.8-RC2-os2/music: os2_m.o
diff -ur openttd-0.4.8-RC2/music_gui.c openttd-0.4.8-RC2-os2/music_gui.c
--- openttd-0.4.8-RC2/music_gui.c	Mon Jul 31 21:20:22 2006
+++ openttd-0.4.8-RC2-os2/music_gui.c	Thu Aug  3 12:17:16 2006
@@ -117,7 +117,7 @@
 {
 	char filename[256];
 	snprintf(filename, sizeof(filename), "%s%s",
-		_path.gm_dir, origin_songs_specs[_music_wnd_cursong - 1].filename);
+		_paths.gm_dir, origin_songs_specs[_music_wnd_cursong - 1].filename);
 	_music_driver->play_song(filename);
 }
 
@@ -135,7 +135,7 @@
 	memset(_cur_playlist, 0, sizeof(_cur_playlist));
 	do {
 		snprintf(filename, sizeof(filename),  "%s%s",
-		_path.gm_dir, origin_songs_specs[_playlists[msf.playlist][i]].filename);
+		_paths.gm_dir, origin_songs_specs[_playlists[msf.playlist][i]].filename);
 		//we are now checking for the existence of that file prior
 		//to add it to the list of available songs
 		if (FileExists(filename)) {
Only in openttd-0.4.8-RC2-os2: music_gui.o
Only in openttd-0.4.8-RC2-os2: namegen.o
Only in openttd-0.4.8-RC2-os2: network.o
diff -ur openttd-0.4.8-RC2/network_client.c openttd-0.4.8-RC2-os2/network_client.c
--- openttd-0.4.8-RC2/network_client.c	Tue May  2 22:28:12 2006
+++ openttd-0.4.8-RC2-os2/network_client.c	Thu Aug  3 12:17:24 2006
@@ -477,7 +477,7 @@
 	// First packet, init some stuff
 	if (maptype == MAP_PACKET_START) {
 		// The name for the temp-map
-		sprintf(filename, "%s%snetwork_client.tmp",  _path.autosave_dir, PATHSEP);
+		sprintf(filename, "%s%snetwork_client.tmp",  _paths.autosave_dir, PATHSEP);
 
 		file_pointer = fopen(filename, "wb");
 		if (file_pointer == NULL) {
Only in openttd-0.4.8-RC2-os2: network_client.o
diff -ur openttd-0.4.8-RC2/network_core.h openttd-0.4.8-RC2-os2/network_core.h
--- openttd-0.4.8-RC2/network_core.h	Thu Jun 22 05:09:22 2006
+++ openttd-0.4.8-RC2-os2/network_core.h	Thu Aug  3 09:31:26 2006
@@ -65,7 +65,7 @@
 #		include <net/if.h>
 // According to glibc/NEWS, <ifaddrs.h> appeared in glibc-2.3.
 #		if !defined(__sgi__) && !defined(SUNOS) && !defined(__MORPHOS__) && !defined(__BEOS__) \
-		   && !(defined(__GLIBC__) && (__GLIBC__ <= 2) && (__GLIBC_MINOR__ <= 2)) && !defined(__dietlibc__)
+		   && !(defined(__GLIBC__) && (__GLIBC__ <= 2) && (__GLIBC_MINOR__ <= 2)) && !defined(__dietlibc__) &&!defined(__INNOTEK_LIBC__)
 // If for any reason ifaddrs.h does not exist on your system, comment out
 //   the following two lines and an alternative way will be used to fetch
 //   the list of IPs from the system.
@@ -90,12 +90,12 @@
 #	include <netdb.h>
 #endif // UNIX
 
-#ifdef __BEOS__
+#if defined(__BEOS_)||defined(__INNOTEK_LIBC__)
 	typedef int socklen_t;
 #endif
 
 // OS/2 stuff
-#if defined(__OS2__)
+#if defined(__OS2__) &&!defined(__INNOTEK_LIBC__)
 #	define SOCKET int
 #	define INVALID_SOCKET -1
 #	define ioctlsocket ioctl
Only in openttd-0.4.8-RC2-os2: network_data.o
Only in openttd-0.4.8-RC2-os2: network_gamelist.o
Only in openttd-0.4.8-RC2-os2: network_gui.o
diff -ur openttd-0.4.8-RC2/network_server.c openttd-0.4.8-RC2-os2/network_server.c
--- openttd-0.4.8-RC2/network_server.c	Tue May  2 23:17:00 2006
+++ openttd-0.4.8-RC2-os2/network_server.c	Thu Aug  3 12:17:28 2006
@@ -284,7 +284,7 @@
 		Packet *p;
 
 		// Make a dump of the current game
-		sprintf(filename, "%s%snetwork_server.tmp",  _path.autosave_dir, PATHSEP);
+		sprintf(filename, "%s%snetwork_server.tmp",  _paths.autosave_dir, PATHSEP);
 		if (SaveOrLoad(filename, SL_SAVE) != SL_OK) error("network savedump failed");
 
 		file_pointer = fopen(filename, "rb");
Only in openttd-0.4.8-RC2-os2: network_server.o
Only in openttd-0.4.8-RC2-os2: network_udp.o
Only in openttd-0.4.8-RC2-os2: newgrf.o
Only in openttd-0.4.8-RC2-os2: news_gui.o
Only in openttd-0.4.8-RC2-os2: npf.o
Only in openttd-0.4.8-RC2-os2: oldloader.o
Only in openttd-0.4.8-RC2-os2: openttd
diff -ur openttd-0.4.8-RC2/openttd.c openttd-0.4.8-RC2-os2/openttd.c
--- openttd-0.4.8-RC2/openttd.c	Fri Jul 14 03:24:56 2006
+++ openttd-0.4.8-RC2-os2/openttd.c	Thu Aug  3 12:29:38 2006
@@ -281,10 +281,10 @@
 	SetupColorsAndInitialWindow();
 
 	// Generate a world.
-	sprintf(filename, "%sopntitle.dat",  _path.data_dir);
+	sprintf(filename, "%sopntitle.dat",  _paths.data_dir);
 	if (SaveOrLoad(filename, SL_LOAD) != SL_OK) {
 #if defined SECOND_DATA_DIR
-		sprintf(filename, "%sopntitle.dat",  _path.second_data_dir);
+		sprintf(filename, "%sopntitle.dat",  _paths.second_data_dir);
 		if (SaveOrLoad(filename, SL_LOAD) != SL_OK)
 #endif
 			GenerateWorld(GW_EMPTY, 64, 64); // if failed loading, make empty world.
@@ -873,15 +873,15 @@
 	if (_patches.keep_all_autosave && _local_player != OWNER_SPECTATOR) {
 		const Player *p = GetPlayer(_local_player);
 		char *s;
-		sprintf(buf, "%s%s", _path.autosave_dir, PATHSEP);
+		sprintf(buf, "%s%s", _paths.autosave_dir, PATHSEP);
 
 		SetDParam(0, p->name_1);
 		SetDParam(1, p->name_2);
 		SetDParam(2, _date);
-		s = GetString(buf + strlen(_path.autosave_dir) + strlen(PATHSEP), STR_4004);
+		s = GetString(buf + strlen(_paths.autosave_dir) + strlen(PATHSEP), STR_4004);
 		strcpy(s, ".sav");
 	} else { /* generate a savegame name and number according to _patches.max_num_autosaves */
-		sprintf(buf, "%s%sautosave%d.sav", _path.autosave_dir, PATHSEP, _autosave_ctr);
+		sprintf(buf, "%s%sautosave%d.sav", _paths.autosave_dir, PATHSEP, _autosave_ctr);
 
 		_autosave_ctr++;
 		if (_autosave_ctr >= _patches.max_num_autosaves) {
Only in openttd-0.4.8-RC2-os2: openttd.exe
Only in openttd-0.4.8-RC2-os2: openttd.o
Only in openttd-0.4.8-RC2-os2: order_cmd.o
Only in openttd-0.4.8-RC2-os2: order_gui.o
diff -ur openttd-0.4.8-RC2/os2.c openttd-0.4.8-RC2-os2/os2.c
--- openttd-0.4.8-RC2/os2.c	Wed Mar 22 21:56:08 2006
+++ openttd-0.4.8-RC2-os2/os2.c	Thu Aug  3 12:38:34 2006
@@ -16,23 +16,29 @@
 #include <sys/stat.h>
 #include <stdlib.h>
 #include <time.h>
+#ifndef __INNOTEK_LIBC__
 #include <dos.h>
+#else
+#include <dirent.h>
+#endif
 
 #define INCL_WIN
 #define INCL_WINCLIPBOARD
 
 #include <os2.h>
 
+#ifndef __INNOTEK_LIBC__
 #include <i86.h>
+#endif
 
 static inline int strcasecmp(const char* s1, const char* s2)
 {
 	return stricmp(s1, s2);
 }
 
-static char *_fios_path;
-static char *_fios_save_path;
-static char *_fios_scn_path;
+static char *_fios_paths;
+static char *_fios_save_paths;
+static char *_fios_scn_paths;
 static FiosItem *_fios_items;
 static int _fios_count, _fios_alloc;
 
@@ -62,7 +68,7 @@
 }
 
 
-static void append_path(char *out, const char *path, const char *file)
+static void append_paths(char *out, const char *path, const char *file)
 {
 	if (path[2] == '\\' && path[3] == '\0')
 		sprintf(out, "%s%s", path, file);
@@ -80,15 +86,15 @@
 	int sort_start;
 	char filename[MAX_PATH];
 
-	if (_fios_save_path == NULL) {
-		_fios_save_path = malloc(MAX_PATH);
-		strcpy(_fios_save_path, _path.save_dir);
+	if (_fios_save_paths == NULL) {
+		_fios_save_paths = malloc(MAX_PATH);
+		strcpy(_fios_save_paths, _paths.save_dir);
 	}
 
-	_fios_path = _fios_save_path;
+	_fios_paths = _fios_save_paths;
 
 	// Parent directory, only if not of the type C:\.
-	if (_fios_path[3] != '\0') {
+	if (_fios_paths[3] != '\0') {
 		fios = FiosAlloc();
 		fios->type = FIOS_TYPE_PARENT;
 		fios->mtime = 0;
@@ -97,10 +103,10 @@
 	}
 
 	// Show subdirectories first
-	dir = opendir(_fios_path);
+	dir = opendir(_fios_paths);
 	if (dir != NULL) {
 		while ((dirent = readdir(dir)) != NULL) {
-			append_path(filename, _fios_path, dirent->d_name);
+			append_paths(filename, _fios_paths, dirent->d_name);
 			if (!stat(filename, &sb) && S_ISDIR(sb.st_mode) &&
 					strcmp(dirent->d_name, ".") != 0 &&
 					strcmp(dirent->d_name, "..") != 0) {
@@ -132,12 +138,12 @@
 	 * .SV1 Transport Tycoon Deluxe (Patch) saved game
 	 * .SV2 Transport Tycoon Deluxe (Patch) saved 2-player game
 	 */
-	dir = opendir(_fios_path);
+	dir = opendir(_fios_paths);
 	if (dir != NULL) {
 		while ((dirent = readdir(dir)) != NULL) {
 			char *t;
 
-			append_path(filename, _fios_path, dirent->d_name);
+			append_paths(filename, _fios_paths, dirent->d_name);
 			if (stat(filename, &sb) || S_ISDIR(sb.st_mode)) continue;
 
 			t = strrchr(dirent->d_name, '.');
@@ -210,15 +216,15 @@
 	int sort_start;
 	char filename[MAX_PATH];
 
-	if (_fios_scn_path == NULL) {
-		_fios_scn_path = malloc(MAX_PATH);
-		strcpy(_fios_scn_path, _path.scenario_dir);
+	if (_fios_scn_paths == NULL) {
+		_fios_scn_paths = malloc(MAX_PATH);
+		strcpy(_fios_scn_paths, _paths.scenario_dir);
 	}
 
-	_fios_path = _fios_scn_path;
+	_fios_paths = _fios_scn_paths;
 
 	// Parent directory, only if not of the type C:\.
-	if (_fios_path[3] != '\0' && mode != SLD_NEW_GAME) {
+	if (_fios_paths[3] != '\0' && mode != SLD_NEW_GAME) {
 		fios = FiosAlloc();
 		fios->type = FIOS_TYPE_PARENT;
 		fios->mtime = 0;
@@ -226,10 +232,10 @@
 	}
 
 	// Show subdirectories first
-	dir = opendir(_fios_path);
+	dir = opendir(_fios_paths);
 	if (dir != NULL) {
 		while ((dirent = readdir(dir)) != NULL) {
-			append_path(filename, _fios_path, dirent->d_name);
+			append_paths(filename, _fios_paths, dirent->d_name);
 			if (!stat(filename, &sb) && S_ISDIR(sb.st_mode) &&
 					strcmp(dirent->d_name, ".") != 0 &&
 					strcmp(dirent->d_name, "..") != 0) {
@@ -260,12 +266,12 @@
 	 * .SV0 Transport Tycoon Deluxe (Patch) scenario
 	 * .SS0 Transport Tycoon Deluxe preset scenario
 	 */
-	dir = opendir(_fios_path);
+	dir = opendir(_fios_paths);
 	if (dir != NULL) {
 		while ((dirent = readdir(dir)) != NULL) {
 			char *t;
 
-			append_path(filename, _fios_path, dirent->d_name);
+			append_paths(filename, _fios_paths, dirent->d_name);
 			if (stat(filename, &sb) || S_ISDIR(sb.st_mode)) continue;
 
 			t = strrchr(dirent->d_name, '.');
@@ -337,7 +343,7 @@
 // Browse to
 char *FiosBrowseTo(const FiosItem *item)
 {
-	char *path = _fios_path;
+	char *path = _fios_paths;
 	char *s;
 
 	switch (item->type) {
@@ -387,10 +393,11 @@
  */
 StringID FiosGetDescText(const char **path, uint32 *tot)
 {
+#ifndef __INNOTEK_LIBC__
 	struct diskfree_t free;
 	char drive;
 
-	*path = _fios_path;
+	*path = _fios_paths;
 	drive = *path[0] - 'A' + 1;
 
 	if (tot != NULL && _getdiskfree(drive, &free) == 0) {
@@ -399,6 +406,23 @@
 	}
 
 	return STR_4006_UNABLE_TO_READ_DRIVE;
+#else
+	uint32 free = 0;
+	*path = _fios_paths;
+
+#ifdef HAS_STATVFS
+	{
+		struct statvfs s;
+
+		if (statvfs(*path, &s) == 0) {
+			free = (uint64)s.f_frsize * s.f_bavail >> 20;
+		} else
+			return STR_4006_UNABLE_TO_READ_DRIVE;
+	}
+#endif
+	if (tot != NULL) *tot = free;
+	return STR_4005_BYTES_FREE;
+#endif
 }
 
 void FiosMakeSavegameName(char *buf, const char *name, size_t size)
@@ -415,7 +439,7 @@
 	period = strrchr(name, '.');
 	if (period != NULL && strcasecmp(period, extension) == 0) extension = "";
 
-	snprintf(buf, size, "%s\\%s%s", _fios_path, name, extension);
+	snprintf(buf, size, "%s\\%s%s", _fios_paths, name, extension);
 }
 
 bool FiosDelete(const char *name)
@@ -442,7 +466,7 @@
 	struct dirent *dirent;
 	int num = 0;
 
-	dir = opendir(_path.lang_dir);
+	dir = opendir(_paths.lang_dir);
 	if (dir != NULL) {
 		while ((dirent = readdir(dir)) != NULL) {
 			char *t = strrchr(dirent->d_name, '.');
@@ -518,11 +542,11 @@
 {
 	char *s;
 
-	_path.game_data_dir = malloc(MAX_PATH);
-	ttd_strlcpy(_path.game_data_dir, GAME_DATA_DIR, MAX_PATH);
+	_paths.game_data_dir = malloc(MAX_PATH);
+	ttd_strlcpy(_paths.game_data_dir, GAME_DATA_DIR, MAX_PATH);
 	#if defined SECOND_DATA_DIR
-	_path.second_data_dir = malloc(MAX_PATH);
-	ttd_strlcpy(_path.second_data_dir, SECOND_DATA_DIR, MAX_PATH);
+	_paths.second_data_dir = malloc(MAX_PATH);
+	ttd_strlcpy(_paths.second_data_dir, SECOND_DATA_DIR, MAX_PATH);
 	#endif
 
 #if defined(USE_HOMEDIR)
@@ -534,57 +558,64 @@
 			if (pw != NULL) homedir = pw->pw_dir;
 		}
 
-		_path.personal_dir = str_fmt("%s" PATHSEP "%s", homedir, PERSONAL_DIR);
+		_paths.personal_dir = str_fmt("%s" PATHSEP "%s", homedir, PERSONAL_DIR);
 	}
 
 #else /* not defined(USE_HOMEDIR) */
 
-	_path.personal_dir = malloc(MAX_PATH);
-	ttd_strlcpy(_path.personal_dir, PERSONAL_DIR, MAX_PATH);
+	_paths.personal_dir = malloc(MAX_PATH);
+	ttd_strlcpy(_paths.personal_dir, PERSONAL_DIR, MAX_PATH);
 
 	// check if absolute or relative path
-	s = strchr(_path.personal_dir, '\\');
+	s = strchr(_paths.personal_dir, '\\');
 
 	// add absolute path
-	if (s == NULL || _path.personal_dir != s) {
-		getcwd(_path.personal_dir, MAX_PATH);
-		s = strchr(_path.personal_dir, 0);
+	if (s == NULL || _paths.personal_dir != s) {
+		getcwd(_paths.personal_dir, MAX_PATH);
+		s = strchr(_paths.personal_dir, 0);
 		*s++ = '\\';
 		ttd_strlcpy(s, PERSONAL_DIR, MAX_PATH);
 	}
 
 #endif /* defined(USE_HOMEDIR) */
 
-	s = strchr(_path.personal_dir, 0);
+	s = strchr(_paths.personal_dir, 0);
 
 	// append a / ?
 	if (s[-1] != '\\') strcpy(s, "\\");
 
-	_path.save_dir = str_fmt("%ssave", _path.personal_dir);
-	_path.autosave_dir = str_fmt("%s\\autosave", _path.save_dir);
-	_path.scenario_dir = str_fmt("%sscenario", _path.personal_dir);
-	_path.gm_dir = str_fmt("%sgm\\", _path.game_data_dir);
-	_path.data_dir = str_fmt("%sdata\\", _path.game_data_dir);
+	_paths.save_dir = str_fmt("%ssave", _paths.personal_dir);
+	_paths.autosave_dir = str_fmt("%s\\autosave", _paths.save_dir);
+	_paths.scenario_dir = str_fmt("%sscenario", _paths.personal_dir);
+	_paths.gm_dir = str_fmt("%sgm\\", _paths.game_data_dir);
+	_paths.data_dir = str_fmt("%sdata\\", _paths.game_data_dir);
 
 	if (_config_file == NULL)
-		_config_file = str_fmt("%sopenttd.cfg", _path.personal_dir);
+		_config_file = str_fmt("%sopenttd.cfg", _paths.personal_dir);
 
-	_highscore_file = str_fmt("%shs.dat", _path.personal_dir);
-	_log_file = str_fmt("%sopenttd.log", _path.personal_dir);
+	_highscore_file = str_fmt("%shs.dat", _paths.personal_dir);
+	_log_file = str_fmt("%sopenttd.log", _paths.personal_dir);
 
 #if defined CUSTOM_LANG_DIR
 	// sets the search path for lng files to the custom one
-	_path.lang_dir = malloc( MAX_PATH );
-	ttd_strlcpy( _path.lang_dir, CUSTOM_LANG_DIR, MAX_PATH);
+	_paths.lang_dir = malloc( MAX_PATH );
+	ttd_strlcpy( _paths.lang_dir, CUSTOM_LANG_DIR, MAX_PATH);
 #else
-	_path.lang_dir = str_fmt("%slang\\", _path.game_data_dir);
+	_paths.lang_dir = str_fmt("%slang\\", _paths.game_data_dir);
 #endif
 
 	// create necessary folders
-	mkdir(_path.personal_dir);
-	mkdir(_path.save_dir);
-	mkdir(_path.autosave_dir);
-	mkdir(_path.scenario_dir);
+#ifndef __INNOTEK_LIBC__
+	mkdir(_paths.personal_dir);
+	mkdir(_paths.save_dir);
+	mkdir(_paths.autosave_dir);
+	mkdir(_paths.scenario_dir);
+#else
+	mkdir(_paths.personal_dir, 0755);
+	mkdir(_paths.save_dir, 0755);
+	mkdir(_paths.autosave_dir, 0755);
+	mkdir(_paths.scenario_dir, 0755);
+#endif
 }
 
 /**
Only in openttd-0.4.8-RC2-os2: os2.o
Only in openttd-0.4.8-RC2-os2: pathfind.o
Only in openttd-0.4.8-RC2-os2: player_gui.o
Only in openttd-0.4.8-RC2-os2: players.o
Only in openttd-0.4.8-RC2-os2: pool.o
Only in openttd-0.4.8-RC2-os2: queue.o
Only in openttd-0.4.8-RC2-os2: rail.o
Only in openttd-0.4.8-RC2-os2: rail_cmd.o
Only in openttd-0.4.8-RC2-os2: rail_gui.o
Only in openttd-0.4.8-RC2-os2: rev.c
Only in openttd-0.4.8-RC2-os2: rev.o
Only in openttd-0.4.8-RC2-os2: road_cmd.o
Only in openttd-0.4.8-RC2-os2: road_gui.o
Only in openttd-0.4.8-RC2-os2: roadveh_cmd.o
Only in openttd-0.4.8-RC2-os2: roadveh_gui.o
diff -ur openttd-0.4.8-RC2/saveload.c openttd-0.4.8-RC2-os2/saveload.c
--- openttd-0.4.8-RC2/saveload.c	Thu Mar 23 08:10:26 2006
+++ openttd-0.4.8-RC2-os2/saveload.c	Thu Aug  3 12:17:46 2006
@@ -1522,7 +1522,7 @@
 void DoExitSave(void)
 {
 	char buf[200];
-	snprintf(buf, sizeof(buf), "%s%sexit.sav", _path.autosave_dir, PATHSEP);
+	snprintf(buf, sizeof(buf), "%s%sexit.sav", _paths.autosave_dir, PATHSEP);
 	SaveOrLoad(buf, SL_SAVE);
 }
 
Only in openttd-0.4.8-RC2-os2: saveload.o
diff -ur openttd-0.4.8-RC2/screenshot.c openttd-0.4.8-RC2-os2/screenshot.c
--- openttd-0.4.8-RC2/screenshot.c	Thu Mar 23 08:10:26 2006
+++ openttd-0.4.8-RC2-os2/screenshot.c	Thu Aug  3 12:17:50 2006
@@ -503,7 +503,7 @@
 
 	serial = 0;
 	for (;;) {
-		snprintf(filename, sizeof(filename), "%s%s", _path.personal_dir, _screenshot_name);
+		snprintf(filename, sizeof(filename), "%s%s", _paths.personal_dir, _screenshot_name);
 		if (!FileExists(filename))
 			break;
 		sprintf(base, " #%d.%s", ++serial, ext);
Only in openttd-0.4.8-RC2-os2: screenshot.o
Only in openttd-0.4.8-RC2-os2: sdl.o
Only in openttd-0.4.8-RC2-os2: settings.o
Only in openttd-0.4.8-RC2-os2: settings_gui.o
Only in openttd-0.4.8-RC2-os2: ship_cmd.o
Only in openttd-0.4.8-RC2-os2: ship_gui.o
Only in openttd-0.4.8-RC2-os2: signs.o
Only in openttd-0.4.8-RC2-os2: smallmap_gui.o
Only in openttd-0.4.8-RC2-os2/sound: null_s.o
Only in openttd-0.4.8-RC2-os2/sound: sdl_s.o
Only in openttd-0.4.8-RC2-os2: sound.o
Only in openttd-0.4.8-RC2-os2: sprite.o
Only in openttd-0.4.8-RC2-os2: spritecache.o
Only in openttd-0.4.8-RC2-os2: station_cmd.o
Only in openttd-0.4.8-RC2-os2: station_gui.o
Only in openttd-0.4.8-RC2-os2: station_newgrf.o
diff -ur openttd-0.4.8-RC2/stdafx.h openttd-0.4.8-RC2-os2/stdafx.h
--- openttd-0.4.8-RC2/stdafx.h	Tue May  2 23:00:12 2006
+++ openttd-0.4.8-RC2-os2/stdafx.h	Thu Aug  3 12:21:50 2006
@@ -5,7 +5,6 @@
 
 #include <stdio.h>
 #include <string.h>
-#include <stdlib.h>
 
 // MacOS X will use an NSAlert to display failed assertaions since they're lost unless running from a terminal
 // strgen always runs from terminal and don't need a window for asserts
Only in openttd-0.4.8-RC2-os2/strgen: strgen
Only in openttd-0.4.8-RC2-os2/strgen: strgen.exe
Only in openttd-0.4.8-RC2-os2: string.o
diff -ur openttd-0.4.8-RC2/strings.c openttd-0.4.8-RC2-os2/strings.c
--- openttd-0.4.8-RC2/strings.c	Mon Jul 31 21:20:22 2006
+++ openttd-0.4.8-RC2-os2/strings.c	Thu Aug  3 12:17:56 2006
@@ -975,7 +975,7 @@
 	char *s;
 
 	{
-		char *lang = str_fmt("%s%s", _path.lang_dir, _dynlang.ent[lang_index].file);
+		char *lang = str_fmt("%s%s", _paths.lang_dir, _dynlang.ent[lang_index].file);
 		lang_pack = ReadFileToMem(lang, &len, 100000);
 		free(lang);
 	}
@@ -1066,7 +1066,7 @@
 	for (i = m = 0; i != n; i++) {
 		int j;
 
-		char *s = str_fmt("%s%s", _path.lang_dir, files[i]);
+		char *s = str_fmt("%s%s", _paths.lang_dir, files[i]);
 		in = fopen(s, "rb");
 		free(s);
 		if (in == NULL ||
Only in openttd-0.4.8-RC2-os2: strings.o
Only in openttd-0.4.8-RC2-os2: subsidy_gui.o
Only in openttd-0.4.8-RC2-os2/table: strings.h
Only in openttd-0.4.8-RC2-os2: terraform_gui.o
Only in openttd-0.4.8-RC2-os2: texteff.o
Only in openttd-0.4.8-RC2-os2: thread.o
Only in openttd-0.4.8-RC2-os2: tile.o
Only in openttd-0.4.8-RC2-os2: town_cmd.o
Only in openttd-0.4.8-RC2-os2: town_gui.o
Only in openttd-0.4.8-RC2-os2: train_cmd.o
Only in openttd-0.4.8-RC2-os2: train_gui.o
Only in openttd-0.4.8-RC2-os2: tree_cmd.o
Only in openttd-0.4.8-RC2-os2: tunnel_map.o
Only in openttd-0.4.8-RC2-os2: tunnelbridge_cmd.o
diff -ur openttd-0.4.8-RC2/unix.c openttd-0.4.8-RC2-os2/unix.c
--- openttd-0.4.8-RC2/unix.c	Fri Jul 14 03:50:50 2006
+++ openttd-0.4.8-RC2-os2/unix.c	Thu Aug  3 12:28:14 2006
@@ -48,9 +48,9 @@
 		#include <SDL.h>
 	#endif
 #endif
-static char *_fios_path;
-static char *_fios_save_path;
-static char *_fios_scn_path;
+static char *_fios_paths;
+static char *_fios_save_paths;
+static char *_fios_scn_paths;
 static FiosItem *_fios_items;
 static int _fios_count, _fios_alloc;
 
@@ -103,15 +103,15 @@
 	int sort_start;
 	char filename[MAX_PATH];
 
-	if (_fios_save_path == NULL) {
-		_fios_save_path = malloc(MAX_PATH);
-		strcpy(_fios_save_path, _path.save_dir);
+	if (_fios_save_paths == NULL) {
+		_fios_save_paths = malloc(MAX_PATH);
+		strcpy(_fios_save_paths, _paths.save_dir);
 	}
 
-	_fios_path = _fios_save_path;
+	_fios_paths = _fios_save_paths;
 
 	// Parent directory, only if not in root already.
-	if (!ISROOT(_fios_path)) {
+	if (!ISROOT(_fios_paths)) {
 		fios = FiosAlloc();
 		fios->type = FIOS_TYPE_PARENT;
 		fios->mtime = 0;
@@ -120,11 +120,11 @@
 	}
 
 	// Show subdirectories first
-	dir = opendir(_fios_path);
+	dir = opendir(_fios_paths);
 	if (dir != NULL) {
 		while ((dirent = readdir(dir)) != NULL) {
 			snprintf(filename, lengthof(filename), PATHTEMPLATE,
-				_fios_path, dirent->d_name);
+				_fios_paths, dirent->d_name);
 			if (!stat(filename, &sb) && S_ISDIR(sb.st_mode) &&
 					dirent->d_name[0] != '.') {
 				fios = FiosAlloc();
@@ -156,13 +156,13 @@
 	 * .SV1 Transport Tycoon Deluxe (Patch) saved game
 	 * .SV2 Transport Tycoon Deluxe (Patch) saved 2-player game
 	 */
-	dir = opendir(_fios_path);
+	dir = opendir(_fios_paths);
 	if (dir != NULL) {
 		while ((dirent = readdir(dir)) != NULL) {
 			char *t;
 
 			snprintf(filename, lengthof(filename), PATHTEMPLATE,
-				_fios_path, dirent->d_name);
+				_fios_paths, dirent->d_name);
 			if (stat(filename, &sb) || S_ISDIR(sb.st_mode)) continue;
 
 			t = strrchr(dirent->d_name, '.');
@@ -208,15 +208,15 @@
 	int sort_start;
 	char filename[MAX_PATH];
 
-	if (_fios_scn_path == NULL) {
-		_fios_scn_path = malloc(MAX_PATH);
-		strcpy(_fios_scn_path, _path.scenario_dir);
+	if (_fios_scn_paths == NULL) {
+		_fios_scn_paths = malloc(MAX_PATH);
+		strcpy(_fios_scn_paths, _paths.scenario_dir);
 	}
 
-	_fios_path = _fios_scn_path;
+	_fios_paths = _fios_scn_paths;
 
 	// Parent directory, only if not of the type C:\.
-	if ((!ISROOT(_fios_path)) && mode != SLD_NEW_GAME) {
+	if ((!ISROOT(_fios_paths)) && mode != SLD_NEW_GAME) {
 		fios = FiosAlloc();
 		fios->type = FIOS_TYPE_PARENT;
 		fios->mtime = 0;
@@ -224,11 +224,11 @@
 	}
 
 	// Show subdirectories first
-	dir = opendir(_fios_path);
+	dir = opendir(_fios_paths);
 	if (dir != NULL) {
 		while ((dirent = readdir(dir)) != NULL) {
 			snprintf(filename, lengthof(filename), PATHTEMPLATE,
-				_fios_path, dirent->d_name);
+				_fios_paths, dirent->d_name);
 			if (!stat(filename, &sb) && S_ISDIR(sb.st_mode) &&
 					dirent->d_name[0] != '.') {
 				fios = FiosAlloc();
@@ -258,12 +258,12 @@
 	 * .SV0 Transport Tycoon Deluxe (Patch) scenario
 	 * .SS0 Transport Tycoon Deluxe preset scenario
 	 */
-	dir = opendir(_fios_path);
+	dir = opendir(_fios_paths);
 	if (dir != NULL) {
 		while ((dirent = readdir(dir)) != NULL) {
 			char *t;
 
-			snprintf(filename, lengthof(filename), PATHTEMPLATE, _fios_path, dirent->d_name);
+			snprintf(filename, lengthof(filename), PATHTEMPLATE, _fios_paths, dirent->d_name);
 			if (stat(filename, &sb) || S_ISDIR(sb.st_mode)) continue;
 
 			t = strrchr(dirent->d_name, '.');
@@ -310,7 +310,7 @@
 // Browse to
 char *FiosBrowseTo(const FiosItem *item)
 {
-	char *path = _fios_path;
+	char *path = _fios_paths;
 	char *s;
 
 	switch (item->type) {
@@ -371,7 +371,7 @@
 StringID FiosGetDescText(const char **path, uint32 *tot)
 {
 	uint32 free = 0;
-	*path = _fios_path;
+	*path = _fios_paths;
 
 #ifdef HAS_STATVFS
 	{
@@ -401,7 +401,7 @@
 	period = strrchr(name, '.');
 	if (period != NULL && strcasecmp(period, extension) == 0) extension = "";
 
-	snprintf(buf, size, "%s/%s%s", _fios_path, name, extension);
+	snprintf(buf, size, "%s/%s%s", _fios_paths, name, extension);
 }
 
 bool FiosDelete(const char *name)
@@ -428,7 +428,7 @@
 	struct dirent *dirent;
 	int num = 0;
 
-	dir = opendir(_path.lang_dir);
+	dir = opendir(_paths.lang_dir);
 	if (dir != NULL) {
 		while ((dirent = readdir(dir)) != NULL) {
 			char *t = strrchr(dirent->d_name, '.');
@@ -517,11 +517,11 @@
 {
 	char *s;
 
-	_path.game_data_dir = malloc(MAX_PATH);
-	ttd_strlcpy(_path.game_data_dir, GAME_DATA_DIR, MAX_PATH);
+	_paths.game_data_dir = malloc(MAX_PATH);
+	ttd_strlcpy(_paths.game_data_dir, GAME_DATA_DIR, MAX_PATH);
 	#if defined SECOND_DATA_DIR
-	_path.second_data_dir = malloc(MAX_PATH);
-	ttd_strlcpy(_path.second_data_dir, SECOND_DATA_DIR, MAX_PATH);
+	_paths.second_data_dir = malloc(MAX_PATH);
+	ttd_strlcpy(_paths.second_data_dir, SECOND_DATA_DIR, MAX_PATH);
 	#endif
 
 #if defined(USE_HOMEDIR)
@@ -533,57 +533,57 @@
 			if (pw != NULL) homedir = pw->pw_dir;
 		}
 
-		_path.personal_dir = str_fmt("%s" PATHSEP "%s", homedir, PERSONAL_DIR);
+		_paths.personal_dir = str_fmt("%s" PATHSEP "%s", homedir, PERSONAL_DIR);
 	}
 
 #else /* not defined(USE_HOMEDIR) */
 
-	_path.personal_dir = malloc(MAX_PATH);
-	ttd_strlcpy(_path.personal_dir, PERSONAL_DIR, MAX_PATH);
+	_paths.personal_dir = malloc(MAX_PATH);
+	ttd_strlcpy(_paths.personal_dir, PERSONAL_DIR, MAX_PATH);
 
 	// check if absolute or relative path
-	s = strchr(_path.personal_dir, '/');
+	s = strchr(_paths.personal_dir, '/');
 
 	// add absolute path
-	if (s == NULL || _path.personal_dir != s) {
-		getcwd(_path.personal_dir, MAX_PATH);
-		s = strchr(_path.personal_dir, 0);
+	if (s == NULL || _paths.personal_dir != s) {
+		getcwd(_paths.personal_dir, MAX_PATH);
+		s = strchr(_paths.personal_dir, 0);
 		*s++ = '/';
 		ttd_strlcpy(s, PERSONAL_DIR, MAX_PATH);
 	}
 
 #endif /* defined(USE_HOMEDIR) */
 
-	s = strchr(_path.personal_dir, 0);
+	s = strchr(_paths.personal_dir, 0);
 
 	// append a / ?
 	if (s[-1] != '/') strcpy(s, "/");
 
-	_path.save_dir = str_fmt("%ssave", _path.personal_dir);
-	_path.autosave_dir = str_fmt("%s/autosave", _path.save_dir);
-	_path.scenario_dir = str_fmt("%sscenario", _path.personal_dir);
-	_path.gm_dir = str_fmt("%sgm/", _path.game_data_dir);
-	_path.data_dir = str_fmt("%sdata/", _path.game_data_dir);
+	_paths.save_dir = str_fmt("%ssave", _paths.personal_dir);
+	_paths.autosave_dir = str_fmt("%s/autosave", _paths.save_dir);
+	_paths.scenario_dir = str_fmt("%sscenario", _paths.personal_dir);
+	_paths.gm_dir = str_fmt("%sgm/", _paths.game_data_dir);
+	_paths.data_dir = str_fmt("%sdata/", _paths.game_data_dir);
 
 	if (_config_file == NULL)
-		_config_file = str_fmt("%sopenttd.cfg", _path.personal_dir);
+		_config_file = str_fmt("%sopenttd.cfg", _paths.personal_dir);
 
-	_highscore_file = str_fmt("%shs.dat", _path.personal_dir);
-	_log_file = str_fmt("%sopenttd.log", _path.personal_dir);
+	_highscore_file = str_fmt("%shs.dat", _paths.personal_dir);
+	_log_file = str_fmt("%sopenttd.log", _paths.personal_dir);
 
 #if defined CUSTOM_LANG_DIR
 	// sets the search path for lng files to the custom one
-	_path.lang_dir = malloc( MAX_PATH );
-	ttd_strlcpy( _path.lang_dir, CUSTOM_LANG_DIR, MAX_PATH);
+	_paths.lang_dir = malloc( MAX_PATH );
+	ttd_strlcpy( _paths.lang_dir, CUSTOM_LANG_DIR, MAX_PATH);
 #else
-	_path.lang_dir = str_fmt("%slang/", _path.game_data_dir);
+	_paths.lang_dir = str_fmt("%slang/", _paths.game_data_dir);
 #endif
 
 	// create necessary folders
-	mkdir(_path.personal_dir, 0755);
-	mkdir(_path.save_dir, 0755);
-	mkdir(_path.autosave_dir, 0755);
-	mkdir(_path.scenario_dir, 0755);
+	mkdir(_paths.personal_dir, 0755);
+	mkdir(_paths.save_dir, 0755);
+	mkdir(_paths.autosave_dir, 0755);
+	mkdir(_paths.scenario_dir, 0755);
 }
 
 bool InsertTextBufferClipboard(Textbuf *tb)
Only in openttd-0.4.8-RC2-os2: unix.o
Only in openttd-0.4.8-RC2-os2: unmovable_cmd.o
diff -ur openttd-0.4.8-RC2/variables.h openttd-0.4.8-RC2-os2/variables.h
--- openttd-0.4.8-RC2/variables.h	Tue May  2 23:32:22 2006
+++ openttd-0.4.8-RC2-os2/variables.h	Thu Aug  3 12:19:12 2006
@@ -8,6 +8,7 @@
 # define MAX_PATH 260
 #endif
 
+
 // Prices and also the fractional part.
 VARDEF Prices _price;
 VARDEF uint16 _price_frac[NUM_PRICES];
@@ -244,7 +245,7 @@
 	char *second_data_dir;
 } Paths;
 
-VARDEF Paths _path;
+VARDEF Paths _paths;
 
 // NOSAVE: Used in palette animations only, not really important.
 VARDEF int _timer_counter;
Only in openttd-0.4.8-RC2-os2: vehicle.o
Only in openttd-0.4.8-RC2-os2: vehicle_gui.o
Only in openttd-0.4.8-RC2-os2/video: dedicated_v.o
Only in openttd-0.4.8-RC2-os2/video: null_v.o
Only in openttd-0.4.8-RC2-os2/video: sdl_v.o
Only in openttd-0.4.8-RC2-os2: viewport.o
Only in openttd-0.4.8-RC2-os2: water_cmd.o
Only in openttd-0.4.8-RC2-os2: waypoint.o
Only in openttd-0.4.8-RC2-os2: widget.o
diff -ur openttd-0.4.8-RC2/win32.c openttd-0.4.8-RC2-os2/win32.c
--- openttd-0.4.8-RC2/win32.c	Thu May  4 07:27:08 2006
+++ openttd-0.4.8-RC2-os2/win32.c	Thu Aug  3 12:28:22 2006
@@ -608,9 +608,9 @@
 }
 #endif
 
-static char *_fios_path;
-static char *_fios_save_path;
-static char *_fios_scn_path;
+static char *_fios_paths;
+static char *_fios_save_paths;
+static char *_fios_scn_paths;
 static FiosItem *_fios_items;
 static int _fios_count, _fios_alloc;
 
@@ -662,15 +662,15 @@
 	FiosItem *fios;
 	int sort_start;
 
-	if (_fios_save_path == NULL) {
-		_fios_save_path = malloc(MAX_PATH);
-		strcpy(_fios_save_path, _path.save_dir);
+	if (_fios_save_paths == NULL) {
+		_fios_save_paths = malloc(MAX_PATH);
+		strcpy(_fios_save_paths, _paths.save_dir);
 	}
 
-	_fios_path = _fios_save_path;
+	_fios_paths = _fios_save_paths;
 
 	// Parent directory, only if not of the type C:\.
-	if (_fios_path[3] != '\0') {
+	if (_fios_paths[3] != '\0') {
 		fios = FiosAlloc();
 		fios->type = FIOS_TYPE_PARENT;
 		fios->mtime = 0;
@@ -679,7 +679,7 @@
 	}
 
 	// Show subdirectories first
-	h = MyFindFirstFile(_fios_path, "*.*", &fd);
+	h = MyFindFirstFile(_fios_paths, "*.*", &fd);
 	if (h != INVALID_HANDLE_VALUE) {
 		do {
 			if (fd.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY &&
@@ -713,7 +713,7 @@
 	 * .SV1 Transport Tycoon Deluxe (Patch) saved game
 	 * .SV2 Transport Tycoon Deluxe (Patch) saved 2-player game
 	 */
-	h = MyFindFirstFile(_fios_path, "*.*", &fd);
+	h = MyFindFirstFile(_fios_paths, "*.*", &fd);
 	if (h != INVALID_HANDLE_VALUE) {
 		do {
 			char *t;
@@ -742,7 +742,7 @@
 					fios->type = FIOS_TYPE_OLDFILE;
 					fios->mtime = *(uint64*)&fd.ftLastWriteTime;
 					ttd_strlcpy(fios->name, fd.cFileName, lengthof(fios->name));
-					sprintf(buf, "%s\\%s", _fios_path, fd.cFileName);
+					sprintf(buf, "%s\\%s", _fios_paths, fd.cFileName);
 					GetOldSaveGameName(fios->title, buf);
 				}
 			}
@@ -779,15 +779,15 @@
 	HANDLE h;
 	int sort_start;
 
-	if (_fios_scn_path == NULL) {
-		_fios_scn_path = malloc(MAX_PATH);
-		strcpy(_fios_scn_path, _path.scenario_dir);
+	if (_fios_scn_paths == NULL) {
+		_fios_scn_paths = malloc(MAX_PATH);
+		strcpy(_fios_scn_paths, _paths.scenario_dir);
 	}
 
-	_fios_path = _fios_scn_path;
+	_fios_paths = _fios_scn_paths;
 
 	// Parent directory, only if not of the type C:\.
-	if (_fios_path[3] != '\0' && mode != SLD_NEW_GAME) {
+	if (_fios_paths[3] != '\0' && mode != SLD_NEW_GAME) {
 		fios = FiosAlloc();
 		fios->type = FIOS_TYPE_PARENT;
 		fios->mtime = 0;
@@ -795,7 +795,7 @@
 	}
 
 	// Show subdirectories first
-	h = MyFindFirstFile(_fios_scn_path, "*.*", &fd);
+	h = MyFindFirstFile(_fios_scn_paths, "*.*", &fd);
 	if (h != INVALID_HANDLE_VALUE && mode != SLD_NEW_GAME) {
 		do {
 			if (fd.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY &&
@@ -828,7 +828,7 @@
 	 * .SV0 Transport Tycoon Deluxe (Patch) scenario
 	 * .SS0 Transport Tycoon Deluxe preset scenario
 	 */
-	h = MyFindFirstFile(_fios_scn_path, "*.*", &fd);
+	h = MyFindFirstFile(_fios_scn_paths, "*.*", &fd);
 	if (h != INVALID_HANDLE_VALUE) {
 		do {
 			char *t;
@@ -856,7 +856,7 @@
 					fios = FiosAlloc();
 					fios->type = FIOS_TYPE_OLD_SCENARIO;
 					fios->mtime = *(uint64*)&fd.ftLastWriteTime;
-					sprintf(buf, "%s\\%s", _fios_path, fd.cFileName);
+					sprintf(buf, "%s\\%s", _fios_paths, fd.cFileName);
 					GetOldScenarioGameName(fios->title, buf);
 					ttd_strlcpy(fios->name, fd.cFileName, lengthof(fios->name));
 				}
@@ -898,7 +898,7 @@
 // Browse to
 char *FiosBrowseTo(const FiosItem *item)
 {
-	char *path = _fios_path;
+	char *path = _fios_paths;
 	char *s;
 
 	switch (item->type) {
@@ -953,9 +953,9 @@
 	DWORD spc, bps, nfc, tnc;
 	StringID sid;
 
-	*path = _fios_path;
+	*path = _fios_paths;
 
-	sprintf(root, "%c:\\", _fios_path[0]);
+	sprintf(root, "%c:\\", _fios_paths[0]);
 	if (tot != NULL && GetDiskFreeSpace(root, &spc, &bps, &nfc, &tnc)) {
 		*tot = ((spc * bps) * (uint64)nfc) >> 20;
 		sid = STR_4005_BYTES_FREE;
@@ -980,7 +980,7 @@
 	period = strrchr(name, '.');
 	if (period != NULL && strcasecmp(period, extension) == 0) extension = "";
 
-	snprintf(buf, size, "%s\\%s%s", _fios_path, name, extension);
+	snprintf(buf, size, "%s\\%s%s", _fios_paths, name, extension);
 }
 
 bool FiosDelete(const char *name)
@@ -1010,7 +1010,7 @@
 	int num = 0;
 	char filedir[MAX_PATH];
 	WIN32_FIND_DATA fd;
-	sprintf(filedir, "%s*.lng", _path.lang_dir);
+	sprintf(filedir, "%s*.lng", _paths.lang_dir);
 
 	hand = FindFirstFile(filedir, &fd);
 	if (hand != INVALID_HANDLE_VALUE) {
@@ -1182,30 +1182,30 @@
 	char *s;
 	char *cfg;
 
-	_path.personal_dir = _path.game_data_dir = cfg = malloc(MAX_PATH);
+	_paths.personal_dir = _paths.game_data_dir = cfg = malloc(MAX_PATH);
 	GetCurrentDirectory(MAX_PATH - 1, cfg);
 
 	cfg[0] = toupper(cfg[0]);
 	s = strchr(cfg, 0);
 	if (s[-1] != '\\') strcpy(s, "\\");
 
-	_path.save_dir = str_fmt("%ssave", cfg);
-	_path.autosave_dir = str_fmt("%s\\autosave", _path.save_dir);
-	_path.scenario_dir = str_fmt("%sscenario", cfg);
-	_path.gm_dir = str_fmt("%sgm\\", cfg);
-	_path.data_dir = str_fmt("%sdata\\", cfg);
-	_path.lang_dir = str_fmt("%slang\\", cfg);
+	_paths.save_dir = str_fmt("%ssave", cfg);
+	_paths.autosave_dir = str_fmt("%s\\autosave", _paths.save_dir);
+	_paths.scenario_dir = str_fmt("%sscenario", cfg);
+	_paths.gm_dir = str_fmt("%sgm\\", cfg);
+	_paths.data_dir = str_fmt("%sdata\\", cfg);
+	_paths.lang_dir = str_fmt("%slang\\", cfg);
 
 	if (_config_file == NULL)
-		_config_file = str_fmt("%sopenttd.cfg", _path.personal_dir);
+		_config_file = str_fmt("%sopenttd.cfg", _paths.personal_dir);
 
-	_highscore_file = str_fmt("%shs.dat", _path.personal_dir);
-	_log_file = str_fmt("%sopenttd.log", _path.personal_dir);
+	_highscore_file = str_fmt("%shs.dat", _paths.personal_dir);
+	_log_file = str_fmt("%sopenttd.log", _paths.personal_dir);
 
 	// make (auto)save and scenario folder
-	CreateDirectory(_path.save_dir, NULL);
-	CreateDirectory(_path.autosave_dir, NULL);
-	CreateDirectory(_path.scenario_dir, NULL);
+	CreateDirectory(_paths.save_dir, NULL);
+	CreateDirectory(_paths.autosave_dir, NULL);
+	CreateDirectory(_paths.scenario_dir, NULL);
 }
 
 int CDECL snprintf(char *str, size_t size, const char *format, ...)
Only in openttd-0.4.8-RC2-os2: window.o
