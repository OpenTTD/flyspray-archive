Index: music_gui.c
===================================================================
--- music_gui.c	(revision 7446)
+++ music_gui.c	(working copy)
@@ -90,7 +90,7 @@
 {
 	char filename[256];
 	snprintf(filename, sizeof(filename), "%s%s",
-		_path.gm_dir, origin_songs_specs[_music_wnd_cursong - 1].filename);
+		_paths.gm_dir, origin_songs_specs[_music_wnd_cursong - 1].filename);
 	_music_driver->play_song(filename);
 }
 
@@ -109,7 +109,7 @@
 	do {
 		if (_playlists[msf.playlist][i] != 0) {  // Don't evaluate playlist terminator
 			snprintf(filename, sizeof(filename),  "%s%s",
-				_path.gm_dir, origin_songs_specs[(_playlists[msf.playlist][i]) - 1].filename);
+				_paths.gm_dir, origin_songs_specs[(_playlists[msf.playlist][i]) - 1].filename);
 
 			/* we are now checking for the existence of that file prior
 			 * to add it to the list of available songs */
Index: os2.c
===================================================================
--- os2.c	(revision 7446)
+++ os2.c	(working copy)
@@ -134,11 +134,11 @@
 {
 	char *s;
 
-	_path.game_data_dir = malloc(MAX_PATH);
-	ttd_strlcpy(_path.game_data_dir, GAME_DATA_DIR, MAX_PATH);
+	_paths.game_data_dir = malloc(MAX_PATH);
+	ttd_strlcpy(_paths.game_data_dir, GAME_DATA_DIR, MAX_PATH);
 	#if defined SECOND_DATA_DIR
-	_path.second_data_dir = malloc(MAX_PATH);
-	ttd_strlcpy(_path.second_data_dir, SECOND_DATA_DIR, MAX_PATH);
+	_paths.second_data_dir = malloc(MAX_PATH);
+	ttd_strlcpy(_paths.second_data_dir, SECOND_DATA_DIR, MAX_PATH);
 	#endif
 
 #if defined(USE_HOMEDIR)
@@ -150,59 +150,59 @@
 			if (pw != NULL) homedir = pw->pw_dir;
 		}
 
-		_path.personal_dir = str_fmt("%s" PATHSEP "%s", homedir, PERSONAL_DIR);
+		_paths.personal_dir = str_fmt("%s" PATHSEP "%s", homedir, PERSONAL_DIR);
 	}
 
 #else /* not defined(USE_HOMEDIR) */
 
-	_path.personal_dir = malloc(MAX_PATH);
-	ttd_strlcpy(_path.personal_dir, PERSONAL_DIR, MAX_PATH);
+	_paths.personal_dir = malloc(MAX_PATH);
+	ttd_strlcpy(_paths.personal_dir, PERSONAL_DIR, MAX_PATH);
 
 	// check if absolute or relative path
-	s = strchr(_path.personal_dir, '\\');
+	s = strchr(_paths.personal_dir, '\\');
 
 	// add absolute path
-	if (s == NULL || _path.personal_dir != s) {
-		getcwd(_path.personal_dir, MAX_PATH);
-		s = strchr(_path.personal_dir, 0);
+	if (s == NULL || _paths.personal_dir != s) {
+		getcwd(_paths.personal_dir, MAX_PATH);
+		s = strchr(_paths.personal_dir, 0);
 		*s++ = '\\';
 		ttd_strlcpy(s, PERSONAL_DIR, MAX_PATH);
 	}
 
 #endif /* defined(USE_HOMEDIR) */
 
-	s = strchr(_path.personal_dir, 0);
+	s = strchr(_paths.personal_dir, 0);
 
 	// append a / ?
 	if (s[-1] != '\\') strcpy(s, "\\");
 
-	_path.save_dir = str_fmt("%ssave", _path.personal_dir);
-	_path.autosave_dir = str_fmt("%s\\autosave", _path.save_dir);
-	_path.scenario_dir = str_fmt("%sscenario", _path.personal_dir);
-	_path.heightmap_dir = str_fmt("%sscenario\\heightmap", _path.personal_dir);
-	_path.gm_dir = str_fmt("%sgm\\", _path.game_data_dir);
-	_path.data_dir = str_fmt("%sdata\\", _path.game_data_dir);
+	_paths.save_dir = str_fmt("%ssave", _paths.personal_dir);
+	_paths.autosave_dir = str_fmt("%s\\autosave", _paths.save_dir);
+	_paths.scenario_dir = str_fmt("%sscenario", _paths.personal_dir);
+	_paths.heightmap_dir = str_fmt("%sscenario\\heightmap", _paths.personal_dir);
+	_paths.gm_dir = str_fmt("%sgm\\", _paths.game_data_dir);
+	_paths.data_dir = str_fmt("%sdata\\", _paths.game_data_dir);
 
 	if (_config_file == NULL)
-		_config_file = str_fmt("%sopenttd.cfg", _path.personal_dir);
+		_config_file = str_fmt("%sopenttd.cfg", _paths.personal_dir);
 
-	_highscore_file = str_fmt("%shs.dat", _path.personal_dir);
-	_log_file = str_fmt("%sopenttd.log", _path.personal_dir);
+	_highscore_file = str_fmt("%shs.dat", _paths.personal_dir);
+	_log_file = str_fmt("%sopenttd.log", _paths.personal_dir);
 
 #if defined CUSTOM_LANG_DIR
 	// sets the search path for lng files to the custom one
-	_path.lang_dir = malloc( MAX_PATH );
-	ttd_strlcpy( _path.lang_dir, CUSTOM_LANG_DIR, MAX_PATH);
+	_paths.lang_dir = malloc( MAX_PATH );
+	ttd_strlcpy( _paths.lang_dir, CUSTOM_LANG_DIR, MAX_PATH);
 #else
-	_path.lang_dir = str_fmt("%slang\\", _path.game_data_dir);
+	_paths.lang_dir = str_fmt("%slang\\", _paths.game_data_dir);
 #endif
 
 	// create necessary folders
-	mkdir(_path.personal_dir);
-	mkdir(_path.save_dir);
-	mkdir(_path.autosave_dir);
-	mkdir(_path.scenario_dir);
-	mkdir(_path.heightmap_dir);
+	mkdir(_paths.personal_dir);
+	mkdir(_paths.save_dir);
+	mkdir(_paths.autosave_dir);
+	mkdir(_paths.scenario_dir);
+	mkdir(_paths.heightmap_dir);
 }
 
 /**
Index: gfxinit.c
===================================================================
--- gfxinit.c	(revision 7446)
+++ gfxinit.c	(working copy)
@@ -111,12 +111,12 @@
 	char buf[MAX_PATH];
 
 	// open file
-	snprintf(buf, lengthof(buf), "%s%s", _path.data_dir, file.filename);
+	snprintf(buf, lengthof(buf), "%s%s", _paths.data_dir, file.filename);
 	f = fopen(buf, "rb");
 
 #if !defined(WIN32)
 	if (f == NULL) {
-		strtolower(buf + strlen(_path.data_dir) - 1);
+		strtolower(buf + strlen(_paths.data_dir) - 1);
 		f = fopen(buf, "rb");
 	}
 #endif
Index: Makefile
===================================================================
--- Makefile	(revision 7446)
+++ Makefile	(working copy)
@@ -255,16 +255,26 @@
 # Executable file extension
 ifdef WIN32
 EXE=.exe
+endif
+
+ifdef OS2
+EXE=.exe
 else
 EXE=
 endif
 
+
 # Set output executable names
+ifdef OS2
+TTD=openttd.exe
+ENDIAN_CHECK=endian_check.exe
+STRGEN=strgen/strgen.exe
+else
 TTD=openttd$(EXE)
 ENDIAN_CHECK=endian_check$(EXE)
 STRGEN=strgen/strgen$(EXE)
 OSXAPP="OpenTTD.app"
-
+endif
 ifdef RELEASE
 REV:=$(RELEASE)
 else
Index: fios.c
===================================================================
--- fios.c	(revision 7446)
+++ fios.c	(working copy)
@@ -324,7 +324,7 @@
 
 	if (_fios_save_path == NULL) {
 		_fios_save_path = malloc(MAX_PATH);
-		ttd_strlcpy(_fios_save_path, _path.save_dir, MAX_PATH);
+		ttd_strlcpy(_fios_save_path, _paths.save_dir, MAX_PATH);
 	}
 
 	_fios_path = _fios_save_path;
@@ -372,7 +372,7 @@
 
 	if (_fios_scn_path == NULL) {
 		_fios_scn_path = malloc(MAX_PATH);
-		ttd_strlcpy(_fios_scn_path, _path.scenario_dir, MAX_PATH);
+		ttd_strlcpy(_fios_scn_path, _paths.scenario_dir, MAX_PATH);
 	}
 
 	_fios_path = _fios_scn_path;
@@ -403,7 +403,7 @@
 
 	if (_fios_hmap_path == NULL) {
 		_fios_hmap_path = malloc(MAX_PATH);
-		strcpy(_fios_hmap_path, _path.heightmap_dir);
+		strcpy(_fios_hmap_path, _paths.heightmap_dir);
 	}
 
 	_fios_path = _fios_hmap_path;
Index: network_client.c
===================================================================
--- network_client.c	(revision 7446)
+++ network_client.c	(working copy)
@@ -457,7 +457,7 @@
 	// First packet, init some stuff
 	if (maptype == MAP_PACKET_START) {
 		// The name for the temp-map
-		snprintf(filename, lengthof(filename), "%s%snetwork_client.tmp",  _path.autosave_dir, PATHSEP);
+		snprintf(filename, lengthof(filename), "%s%snetwork_client.tmp",  _paths.autosave_dir, PATHSEP);
 
 		file_pointer = fopen(filename, "wb");
 		if (file_pointer == NULL) {
Index: configure
===================================================================
--- configure	(revision 7446)
+++ configure	(working copy)
@@ -1,320 +1,323 @@
-#!/bin/sh
-
-# This 'configure' script is a very easy wrapper around 'make updateconf'
-#  It allows cross-compilers to do their job much more easy.
-
-function showhelp() {
-	echo "Configure for OpenTTD"
-	echo ""
-	echo "Usage:"
-	echo " $0 --your_options"
-	echo ""
-	echo "Params:"
-	echo " --debug             Create debug-release                [no]"
-	echo " --profile           Create profile-release              [no]"
-	echo " --dedicated         Make a dedicated build              [no]"
-	echo " --revision          Set the revision of the compilation [detected]"
-	echo " --target-cc         Sets the target-compiler            [\$CC]"
-	echo " --target-cxx        Sets the C++ target-compiler        []"
-	echo " --host-cc           Sets the host-compiler              [\$CC]"
-	echo " --host-cxx          Sets the C++ host-compiler          []"
-	echo " --os                Sets the OS. Listens to:            [detected]"
-	echo "                        UNIX, OSX, FREEBSD, MORPHOS"
-	echo "                        BEOS, SUNOS, CYGWIN, MINGW"
-	echo " --windres           Sets the windres (Windows)          [windres]"
-	echo " --force-le          Force LE platform                   [no]"
-	echo " --force-be          Force BE platform                   [no]"
-	echo ""
-	echo "Params that can be used with --with or --without"
-	echo "   (e.g.: --without-static disables static (default))"
-	echo " static              Do you want a static build?         [no]"
-	echo " directmusic         Do you want direct-music?           [no]"
-	echo " zlib                Do you want zlib-support?           [yes]"
-	echo " sdl                 Do you want SDL-support?            [yes]"
-	echo " png                 Do you want PNG-support?            [yes]"
-	echo " iconv               Do you want iconv-support?          [no]"
-	echo " network             Do you want network-support?        [yes]"
-	echo " cocoa               Do you want cocoa-support? (MacOSX) [no]"
-	echo " freetype            Do you want freetype-support?       [yes]"
-	echo " fontconfig          Do you want fontconfig-support?     [yes]"
-	echo ""
-	echo "Params used to configure external libs:"
-	echo " --static-zlib-path  Set the path to your static zlib    []"
-	echo " --sdl-config        Where is your sdl-config            [sdl-config]"
-	echo " --libpng-config     Where is your libpng-config         [libpng-config]"
-	echo " --freetype-config   Where is your freetype-config       [freetype-config]"
-	echo " --fontconfig-config Where is your fontconfig-config     [pkg-config fontconfig]"
-	echo " --with-iconv        Set the path to your iconv headers  []"
-	echo " "
-}
-
-function handle() {
-	PARAM="$PARAM \"$1=`awk 'BEGIN { FS="="; $0="'"$2"'"; print $2;}'`\""
-}
-
-# The things you can use inside this case:
-#  handle NAME VALUE - Sets the value to give the 'make upgradeconf'
-#                         Value is in form: tag=REAL_VALUE
-#  ITEM="NAME"       - Will set the value as above, only with the next param
-#  SITEM="NAME"      - Will set the var $NAME to the next param
-for n in "$@"
-do
-	case "$n" in
-		--help | -h)
-			showhelp
-			exit 0
-			;;
-
-		--debug)
-			DEBUG_SET=1
-			ITEM="DEBUG"
-			;;
-		--debug=*)
-			handle "DEBUG" "$n"
-			;;
-		--profile)
-			PARAM="$PARAM PROFILE=1"
-			;;
-		--dedicated)
-			PARAM="$PARAM DEDICATED=1"
-			;;
-		--revision=*)
-			RELEASE=`awk 'BEGIN { FS="="; $0="'"$n"'"; print $2;}'`
-			;;
-		--revision)
-			SITEM="RELEASE"
-			;;
-		--target-cc=*)
-			handle "CC_TARGET" "$n"
-			;;
-		--target-cc)
-			ITEM="CC_TARGET"
-			;;
-		--target-cxx=*)
-			handle "CXX_TARGET" "$n"
-			;;
-		--target-cxx)
-			SITEM="CXX_TARGET"
-			;;
-		--host-cc=*)
-			handle "CC_HOST" "$n"
-			;;
-		--host-cc)
-			ITEM="CC_HOST"
-			;;
-		--host-cxx=*)
-			handle "CXX_HOST" "$n"
-			;;
-		--host-cxx)
-			ITEM="CXX_HOST"
-			;;
-		--host-cflags=*)
-			handle CFLAGS_HOST "$n"
-			;;
-		--host-cflags)
-			ITEM="CFLAGS_HOST"
-			;;
-		--os=*)
-			TARGET_OS=`awk 'BEGIN { FS="="; $0="'"$n"'"; print $2;}'`
-			;;
-		--os)
-			SITEM="TARGET_OS"
-			;;
-		--windres=*)
-			handle WINDRES "$n"
-			;;
-		--windres)
-			ITEM="WINDRES"
-			;;
-		--force-le)
-			PARAM="$PARAM ENDIAN_FORCE=LE"
-			;;
-		--force-be)
-			PARAM="$PARAM ENDIAN_FORCE=BE"
-			;;
-
-		--with-static)
-			PARAM="$PARAM STATIC=1"
-			;;
-		--without-static)
-			PARAM="$PARAM STATIC="
-			;;
-		--with-directmusic)
-			PARAM="$PARAM WITH_DIRECTMUSIC=1"
-			;;
-		--without-directmusic)
-			PARAM="$PARAM WITH_DIRECTMUSIC="
-			;;
-		--with-zlib)
-			PARAM="$PARAM WITH_ZLIB=1"
-			;;
-		--without-zlib)
-			PARAM="$PARAM WITH_ZLIB="
-			;;
-		--with-sdl)
-			PARAM="$PARAM WITH_SDL=1"
-			;;
-		--without-sdl)
-			PARAM="$PARAM WITH_SDL="
-			;;
-		--with-png)
-			PARAM="$PARAM WITH_PNG=1"
-			;;
-		--without-png)
-			PARAM="$PARAM WITH_PNG="
-			;;
-		--with-iconv)
-			PARAM="$PARAM WITH_ICONV=1"
-			;;
-		--with-iconv=*)
-			PARAM="$PARAM WITH_ICONV=1"
-			handle WITH_ICONV_PATH "$n"
-			;;
-		--without-iconv)
-			PARAM="$PARAM WITH_ICONV="
-			;;
-		--with-cocoa)
-			PARAM="$PARAM WITH_COCOA=1"
-			;;
-		--with-network)
-			PARAM="$PARAM WITH_NETWORK=1"
-			;;
-		--without-network)
-			PARAM="$PARAM WITH_NETWORK="
-			;;
-		--without-cocoa)
-			PARAM="$PARAM WITH_COCOA="
-			;;
-		--with-freetype)
-			PARAM="$PARAM WITH_FREETYPE=1"
-			;;
-		--without-freetype)
-			PARAM="$PARAM WITH_FREETYPE="
-			;;
-		--with-fontconfig)
-			PARAM="$PARAM WITH_FONTCONFIG=1"
-			;;
-		--without-fontconfig)
-			PARAM="$PARAM WITH_FONTCONFIG="
-			;;
-		--static-zlib-path=*)
-			handle STATIC_ZLIB_PATH "$n"
-			;;
-		--static-zlib-path)
-			ITEM="STATIC_ZLIB_PATH"
-			;;
-		--sdl-config=*)
-			handle SDL_CONFIG "$n"
-			;;
-		--sdl-config)
-			ITEM="SDL_CONFIG"
-			;;
-		--libpng-config=*)
-			handle LIBPNG_CONFIG "$n"
-			;;
-		--libpng-config)
-			ITEM="LIBPNG_CONFIG"
-			;;
-		--freetype-config=*)
-			handle FREETYPE_CONFIG "$n"
-			;;
-		--freetype-config)
-			ITEM="FREETYPE_CONFIG"
-			;;
-		--fontconfig-config=*)
-			handle FONTCONFIG_CONFIG "$n"
-			;;
-		--fontconfig-config)
-			ITEM="FONTCONFIG_CONFIG"
-			;;
-
-		--*=*)
-			echo -n "Unknown switch "
-			echo `awk 'BEGIN { FS="="; $0="'"$n"'"; print $1;}'`
-			exit 1
-			;;
-		-*)
-			echo "Unknown switch $n"
-			exit 1
-			;;
-
-		*)
-			if ! test -z "$ITEM"
-			then
-				PARAM="$PARAM $ITEM=\"$n\""
-				ITEM="";
-			elif ! test -z "$SITEM"
-			then
-				export $SITEM="$n"
-				SITEM=""
-			else
-				echo "Unknown switch $n"
-				exit 1
-			fi
-			;;
-	esac
-done
-
-if ! test -z "$TARGET_OS"
-then
-	TARGET_OS=`echo $TARGET_OS | tr '[:lower:]' '[:upper:]'`
-	case "$TARGET_OS" in
-		WIN32)
-			PARAM="$PARAM WIN32=1"
-			;;
-		UNIX)
-			PARAM="$PARAM UNIX=1"
-			;;
-		OSX)
-			PARAM="$PARAM OSX=1 UNIX=1"
-			;;
-		FREEBSD)
-			PARAM="$PARAM FREEBSD=1"
-			;;
-		MORPHOS)
-			PARAM="$PARAM MORPHOS=1 UNIX=1"
-			;;
-		BEOS)
-			PARAM="$PARAM BEOS=1 UNIX=1"
-			;;
-		SUNOS)
-			PARAM="$PARAM SUNOS=1 UNIX=1"
-			;;
-		CYGWIN)
-			PARAM="$PARAM CYGWIN=1 WIN32=1"
-			;;
-		MINGW)
-			PARAM="$PARAM MINGW=1 WIN32=1"
-			;;
-		*)
-			echo "Unknown OS: $TARGET_OS"
-			exit 1
-			;;
-	esac
-	PARAM="$PARAM BYPASS_OS_DETECT=1"
-fi
-
-if ! test -z "$DEBUG_SET"
-then
-	if test -z "`echo $PARAM | grep "DEBUG="`"
-	then
-		# Someone did --debug, without assigning a value, assume 1
-		PARAM="$PARAM DEBUG=1"
-	fi
-fi
-
-# First remove the Makefile.config, else you can have double entries
-rm -f Makefile.config
-
-echo "make upgradeconf $PARAM" > Makefile.run
-. Makefile.run
-rm -f Makefile.run
-
-# Makefile.config currently doesn't support custom RELEASE (revision), so, we add the line
-# yourself!
-
-if ! test -z "$RELEASE"
-then
-	echo "RELEASE=$RELEASE" >> Makefile.config
-fi
-
+#!/bin/sh
+
+# This 'configure' script is a very easy wrapper around 'make updateconf'
+#  It allows cross-compilers to do their job much more easy.
+
+function showhelp() {
+	echo "Configure for OpenTTD"
+	echo ""
+	echo "Usage:"
+	echo " $0 --your_options"
+	echo ""
+	echo "Params:"
+	echo " --debug             Create debug-release                [no]"
+	echo " --profile           Create profile-release              [no]"
+	echo " --dedicated         Make a dedicated build              [no]"
+	echo " --revision          Set the revision of the compilation [detected]"
+	echo " --target-cc         Sets the target-compiler            [\$CC]"
+	echo " --target-cxx        Sets the C++ target-compiler        []"
+	echo " --host-cc           Sets the host-compiler              [\$CC]"
+	echo " --host-cxx          Sets the C++ host-compiler          []"
+	echo " --os                Sets the OS. Listens to:            [detected]"
+	echo "                        UNIX, OSX, FREEBSD, MORPHOS"
+	echo "                        BEOS, SUNOS, CYGWIN, MINGW, OS2"
+	echo " --windres           Sets the windres (Windows)          [windres]"
+	echo " --force-le          Force LE platform                   [no]"
+	echo " --force-be          Force BE platform                   [no]"
+	echo ""
+	echo "Params that can be used with --with or --without"
+	echo "   (e.g.: --without-static disables static (default))"
+	echo " static              Do you want a static build?         [no]"
+	echo " directmusic         Do you want direct-music?           [no]"
+	echo " zlib                Do you want zlib-support?           [yes]"
+	echo " sdl                 Do you want SDL-support?            [yes]"
+	echo " png                 Do you want PNG-support?            [yes]"
+	echo " iconv               Do you want iconv-support?          [no]"
+	echo " network             Do you want network-support?        [yes]"
+	echo " cocoa               Do you want cocoa-support? (MacOSX) [no]"
+	echo " freetype            Do you want freetype-support?       [yes]"
+	echo " fontconfig          Do you want fontconfig-support?     [yes]"
+	echo ""
+	echo "Params used to configure external libs:"
+	echo " --static-zlib-path  Set the path to your static zlib    []"
+	echo " --sdl-config        Where is your sdl-config            [sdl-config]"
+	echo " --libpng-config     Where is your libpng-config         [libpng-config]"
+	echo " --freetype-config   Where is your freetype-config       [freetype-config]"
+	echo " --fontconfig-config Where is your fontconfig-config     [pkg-config fontconfig]"
+	echo " --with-iconv        Set the path to your iconv headers  []"
+	echo " "
+}
+
+function handle() {
+	PARAM="$PARAM \"$1=`awk 'BEGIN { FS="="; $0="'"$2"'"; print $2;}'`\""
+}
+
+# The things you can use inside this case:
+#  handle NAME VALUE - Sets the value to give the 'make upgradeconf'
+#                         Value is in form: tag=REAL_VALUE
+#  ITEM="NAME"       - Will set the value as above, only with the next param
+#  SITEM="NAME"      - Will set the var $NAME to the next param
+for n in "$@"
+do
+	case "$n" in
+		--help | -h)
+			showhelp
+			exit 0
+			;;
+
+		--debug)
+			DEBUG_SET=1
+			ITEM="DEBUG"
+			;;
+		--debug=*)
+			handle "DEBUG" "$n"
+			;;
+		--profile)
+			PARAM="$PARAM PROFILE=1"
+			;;
+		--dedicated)
+			PARAM="$PARAM DEDICATED=1"
+			;;
+		--revision=*)
+			RELEASE=`awk 'BEGIN { FS="="; $0="'"$n"'"; print $2;}'`
+			;;
+		--revision)
+			SITEM="RELEASE"
+			;;
+		--target-cc=*)
+			handle "CC_TARGET" "$n"
+			;;
+		--target-cc)
+			ITEM="CC_TARGET"
+			;;
+		--target-cxx=*)
+			handle "CXX_TARGET" "$n"
+			;;
+		--target-cxx)
+			SITEM="CXX_TARGET"
+			;;
+		--host-cc=*)
+			handle "CC_HOST" "$n"
+			;;
+		--host-cc)
+			ITEM="CC_HOST"
+			;;
+		--host-cxx=*)
+			handle "CXX_HOST" "$n"
+			;;
+		--host-cxx)
+			ITEM="CXX_HOST"
+			;;
+		--host-cflags=*)
+			handle CFLAGS_HOST "$n"
+			;;
+		--host-cflags)
+			ITEM="CFLAGS_HOST"
+			;;
+		--os=*)
+			TARGET_OS=`awk 'BEGIN { FS="="; $0="'"$n"'"; print $2;}'`
+			;;
+		--os)
+			SITEM="TARGET_OS"
+			;;
+		--windres=*)
+			handle WINDRES "$n"
+			;;
+		--windres)
+			ITEM="WINDRES"
+			;;
+		--force-le)
+			PARAM="$PARAM ENDIAN_FORCE=LE"
+			;;
+		--force-be)
+			PARAM="$PARAM ENDIAN_FORCE=BE"
+			;;
+
+		--with-static)
+			PARAM="$PARAM STATIC=1"
+			;;
+		--without-static)
+			PARAM="$PARAM STATIC="
+			;;
+		--with-directmusic)
+			PARAM="$PARAM WITH_DIRECTMUSIC=1"
+			;;
+		--without-directmusic)
+			PARAM="$PARAM WITH_DIRECTMUSIC="
+			;;
+		--with-zlib)
+			PARAM="$PARAM WITH_ZLIB=1"
+			;;
+		--without-zlib)
+			PARAM="$PARAM WITH_ZLIB="
+			;;
+		--with-sdl)
+			PARAM="$PARAM WITH_SDL=1"
+			;;
+		--without-sdl)
+			PARAM="$PARAM WITH_SDL="
+			;;
+		--with-png)
+			PARAM="$PARAM WITH_PNG=1"
+			;;
+		--without-png)
+			PARAM="$PARAM WITH_PNG="
+			;;
+		--with-iconv)
+			PARAM="$PARAM WITH_ICONV=1"
+			;;
+		--with-iconv=*)
+			PARAM="$PARAM WITH_ICONV=1"
+			handle WITH_ICONV_PATH "$n"
+			;;
+		--without-iconv)
+			PARAM="$PARAM WITH_ICONV="
+			;;
+		--with-cocoa)
+			PARAM="$PARAM WITH_COCOA=1"
+			;;
+		--with-network)
+			PARAM="$PARAM WITH_NETWORK=1"
+			;;
+		--without-network)
+			PARAM="$PARAM WITH_NETWORK="
+			;;
+		--without-cocoa)
+			PARAM="$PARAM WITH_COCOA="
+			;;
+		--with-freetype)
+			PARAM="$PARAM WITH_FREETYPE=1"
+			;;
+		--without-freetype)
+			PARAM="$PARAM WITH_FREETYPE="
+			;;
+		--with-fontconfig)
+			PARAM="$PARAM WITH_FONTCONFIG=1"
+			;;
+		--without-fontconfig)
+			PARAM="$PARAM WITH_FONTCONFIG="
+			;;
+		--static-zlib-path=*)
+			handle STATIC_ZLIB_PATH "$n"
+			;;
+		--static-zlib-path)
+			ITEM="STATIC_ZLIB_PATH"
+			;;
+		--sdl-config=*)
+			handle SDL_CONFIG "$n"
+			;;
+		--sdl-config)
+			ITEM="SDL_CONFIG"
+			;;
+		--libpng-config=*)
+			handle LIBPNG_CONFIG "$n"
+			;;
+		--libpng-config)
+			ITEM="LIBPNG_CONFIG"
+			;;
+		--freetype-config=*)
+			handle FREETYPE_CONFIG "$n"
+			;;
+		--freetype-config)
+			ITEM="FREETYPE_CONFIG"
+			;;
+		--fontconfig-config=*)
+			handle FONTCONFIG_CONFIG "$n"
+			;;
+		--fontconfig-config)
+			ITEM="FONTCONFIG_CONFIG"
+			;;
+
+		--*=*)
+			echo -n "Unknown switch "
+			echo `awk 'BEGIN { FS="="; $0="'"$n"'"; print $1;}'`
+			exit 1
+			;;
+		-*)
+			echo "Unknown switch $n"
+			exit 1
+			;;
+
+		*)
+			if ! test -z "$ITEM"
+			then
+				PARAM="$PARAM $ITEM=\"$n\""
+				ITEM="";
+			elif ! test -z "$SITEM"
+			then
+				export $SITEM="$n"
+				SITEM=""
+			else
+				echo "Unknown switch $n"
+				exit 1
+			fi
+			;;
+	esac
+done
+
+if ! test -z "$TARGET_OS"
+then
+	TARGET_OS=`echo $TARGET_OS | tr '[:lower:]' '[:upper:]'`
+	case "$TARGET_OS" in
+		WIN32)
+			PARAM="$PARAM WIN32=1"
+			;;
+		UNIX)
+			PARAM="$PARAM UNIX=1"
+			;;
+		OSX)
+			PARAM="$PARAM OSX=1 UNIX=1"
+			;;
+		FREEBSD)
+			PARAM="$PARAM FREEBSD=1"
+			;;
+		MORPHOS)
+			PARAM="$PARAM MORPHOS=1 UNIX=1"
+			;;
+		BEOS)
+			PARAM="$PARAM BEOS=1 UNIX=1"
+			;;
+		OS2)
+			PARAM="$PARAM OS2=1 UNIX=1"
+			;;
+		SUNOS)
+			PARAM="$PARAM SUNOS=1 UNIX=1"
+			;;
+		CYGWIN)
+			PARAM="$PARAM CYGWIN=1 WIN32=1"
+			;;
+		MINGW)
+			PARAM="$PARAM MINGW=1 WIN32=1"
+			;;
+		*)
+			echo "Unknown OS: $TARGET_OS"
+			exit 1
+			;;
+	esac
+	PARAM="$PARAM BYPASS_OS_DETECT=1"
+fi
+
+if ! test -z "$DEBUG_SET"
+then
+	if test -z "`echo $PARAM | grep "DEBUG="`"
+	then
+		# Someone did --debug, without assigning a value, assume 1
+		PARAM="$PARAM DEBUG=1"
+	fi
+fi
+
+# First remove the Makefile.config, else you can have double entries
+rm -f Makefile.config
+
+echo "make upgradeconf $PARAM" > Makefile.run
+. Makefile.run
+rm -f Makefile.run
+
+# Makefile.config currently doesn't support custom RELEASE (revision), so, we add the line
+# yourself!
+
+if ! test -z "$RELEASE"
+then
+	echo "RELEASE=$RELEASE" >> Makefile.config
+fi
+
Index: console_cmds.c
===================================================================
--- console_cmds.c	(revision 7446)
+++ console_cmds.c	(working copy)
@@ -187,7 +187,7 @@
 	if (argc == 2) {
 		char buf[200];
 
-		snprintf(buf, lengthof(buf), "%s%s%s.sav", _path.save_dir, PATHSEP, argv[1]);
+		snprintf(buf, lengthof(buf), "%s%s%s.sav", _paths.save_dir, PATHSEP, argv[1]);
 		IConsolePrint(_icolour_def, "Saving map...");
 
 		if (SaveOrLoad(buf, SL_SAVE) != SL_OK) {
Index: driver.c
===================================================================
--- driver.c	(revision 7446)
+++ driver.c	(working copy)
@@ -45,7 +45,7 @@
 #ifdef __BEOS__
 	M("bemidi",  "BeOS MIDI Driver",        &_bemidi_music_driver),
 #endif
-#ifdef __OS2__
+#if defined(__OS2__)&&!defined(__INNOTEK_LIBC__)
 	M("os2",     "OS/2 Music Driver",       &_os2_music_driver),
 #endif
 #ifdef WIN32_ENABLE_DIRECTMUSIC_SUPPORT
Index: network_core.h
===================================================================
--- network_core.h	(revision 7446)
+++ network_core.h	(working copy)
@@ -64,7 +64,7 @@
 #		include <arpa/inet.h>
 #		include <net/if.h>
 // According to glibc/NEWS, <ifaddrs.h> appeared in glibc-2.3.
-#		if !defined(__sgi__) && !defined(SUNOS) && !defined(__MORPHOS__) && !defined(__BEOS__) \
+#		if !defined(__sgi__) && !defined(SUNOS) && !defined(__MORPHOS__) && !defined(__BEOS__) && !defined(__INNOTEK_LIBC__) \
 		   && !(defined(__GLIBC__) && (__GLIBC__ <= 2) && (__GLIBC_MINOR__ <= 2)) && !defined(__dietlibc__)
 // If for any reason ifaddrs.h does not exist on your system, comment out
 //   the following two lines and an alternative way will be used to fetch
@@ -90,7 +90,7 @@
 #	include <netdb.h>
 #endif // UNIX
 
-#ifdef __BEOS__
+#if defined(__BEOS__)
 	typedef int socklen_t;
 #endif
 
@@ -118,7 +118,9 @@
 #	define INADDR_NONE 0xffffffff
 
 typedef int socklen_t;
+#ifndef __INNOTEK_LIBC__
 typedef unsigned long in_addr_t;
+#endif /* __INNOTEK_LIBC__ */
 #endif // OS/2
 
 // MorphOS and Amiga stuff
Index: screenshot.c
===================================================================
--- screenshot.c	(revision 7446)
+++ screenshot.c	(working copy)
@@ -512,7 +512,7 @@
 
 	serial = 0;
 	for (;;) {
-		snprintf(filename, sizeof(filename), "%s%s", _path.personal_dir, _screenshot_name);
+		snprintf(filename, sizeof(filename), "%s%s", _paths.personal_dir, _screenshot_name);
 		if (!FileExists(filename))
 			break;
 		sprintf(base, " #%d.%s", ++serial, ext);
Index: misc_gui.c
===================================================================
--- misc_gui.c	(revision 7446)
+++ misc_gui.c	(working copy)
@@ -1346,20 +1346,20 @@
 		switch (_saveload_mode) {
 			case SLD_SAVE_GAME:
 			case SLD_LOAD_GAME:
-				ttd_strlcpy(&o_dir.name[0], _path.save_dir, sizeof(o_dir.name));
+				ttd_strlcpy(&o_dir.name[0], _paths.save_dir, sizeof(o_dir.name));
 				break;
 
 			case SLD_SAVE_SCENARIO:
 			case SLD_LOAD_SCENARIO:
-				ttd_strlcpy(&o_dir.name[0], _path.scenario_dir, sizeof(o_dir.name));
+				ttd_strlcpy(&o_dir.name[0], _paths.scenario_dir, sizeof(o_dir.name));
 				break;
 
 			case SLD_LOAD_HEIGHTMAP:
-				ttd_strlcpy(&o_dir.name[0], _path.heightmap_dir, sizeof(o_dir.name));
+				ttd_strlcpy(&o_dir.name[0], _paths.heightmap_dir, sizeof(o_dir.name));
 				break;
 
 			default:
-				ttd_strlcpy(&o_dir.name[0], _path.personal_dir, sizeof(o_dir.name));
+				ttd_strlcpy(&o_dir.name[0], _paths.personal_dir, sizeof(o_dir.name));
 		}
 		break;
 		}
Index: variables.h
===================================================================
--- variables.h	(revision 7446)
+++ variables.h	(working copy)
@@ -262,7 +262,7 @@
 	char *second_data_dir;
 } Paths;
 
-VARDEF Paths _path;
+VARDEF Paths _paths;
 
 // NOSAVE: Used in palette animations only, not really important.
 VARDEF int _timer_counter;
Index: openttd.c
===================================================================
--- openttd.c	(revision 7446)
+++ openttd.c	(working copy)
@@ -289,10 +289,10 @@
 	SetupColorsAndInitialWindow();
 
 	// Generate a world.
-	snprintf(filename, lengthof(filename), "%sopntitle.dat",  _path.data_dir);
+	snprintf(filename, lengthof(filename), "%sopntitle.dat",  _paths.data_dir);
 #if defined SECOND_DATA_DIR
 	if (SaveOrLoad(filename, SL_LOAD) != SL_OK) {
-		snprintf(filename, lengthof(filename), "%sopntitle.dat",  _path.second_data_dir);
+		snprintf(filename, lengthof(filename), "%sopntitle.dat",  _paths.second_data_dir);
 	}
 #endif
 	if (SaveOrLoad(filename, SL_LOAD) != SL_OK) {
@@ -890,7 +890,7 @@
 		const Player *p = GetPlayer(_local_player);
 		char* s = buf;
 
-		s += snprintf(buf, lengthof(buf), "%s%s", _path.autosave_dir, PATHSEP);
+		s += snprintf(buf, lengthof(buf), "%s%s", _paths.autosave_dir, PATHSEP);
 
 		SetDParam(0, p->name_1);
 		SetDParam(1, p->name_2);
@@ -898,7 +898,7 @@
 		s = GetString(s, STR_4004, lastof(buf));
 		strecpy(s, ".sav", lastof(buf));
 	} else { /* generate a savegame name and number according to _patches.max_num_autosaves */
-		snprintf(buf, lengthof(buf), "%s%sautosave%d.sav", _path.autosave_dir, PATHSEP, _autosave_ctr);
+		snprintf(buf, lengthof(buf), "%s%sautosave%d.sav", _paths.autosave_dir, PATHSEP, _autosave_ctr);
 
 		_autosave_ctr++;
 		if (_autosave_ctr >= _patches.max_num_autosaves) {
Index: strings.c
===================================================================
--- strings.c	(revision 7446)
+++ strings.c	(working copy)
@@ -1138,7 +1138,7 @@
 	char *s;
 
 	{
-		char *lang = str_fmt("%s%s", _path.lang_dir, _dynlang.ent[lang_index].file);
+		char *lang = str_fmt("%s%s", _paths.lang_dir, _dynlang.ent[lang_index].file);
 		lang_pack = ReadFileToMem(lang, &len, 200000);
 		free(lang);
 	}
@@ -1225,7 +1225,7 @@
 	struct dirent *dirent;
 	int num = 0;
 
-	dir = opendir(_path.lang_dir);
+	dir = opendir(_paths.lang_dir);
 	if (dir != NULL) {
 		while ((dirent = readdir(dir)) != NULL) {
 			const char *d_name = FS2OTTD(dirent->d_name);
@@ -1271,7 +1271,7 @@
 	for (i = m = 0; i != n; i++) {
 		size_t j;
 
-		char *s = str_fmt("%s%s", _path.lang_dir, files[i]);
+		char *s = str_fmt("%s%s", _paths.lang_dir, files[i]);
 		in = fopen(s, "rb");
 		free(s);
 		if (in == NULL ||
Index: makefiledir/Makefile.config_writer
===================================================================
--- makefiledir/Makefile.config_writer	(revision 7446)
+++ makefiledir/Makefile.config_writer	(working copy)
@@ -84,6 +84,7 @@
 	$(call CONFIG_LINE,FREEBSD:=$(FREEBSD))
 	$(call CONFIG_LINE,MORPHOS:=$(MORPHOS))
 	$(call CONFIG_LINE,BEOS:=$(BEOS))
+	$(call CONFIG_LINE,OS2:=$(OS2))
 	$(call CONFIG_LINE,SUNOS:=$(SUNOS))
 	$(call CONFIG_LINE,CYGWIN:=$(CYGWIN))
 	$(call CONFIG_LINE,MINGW:=$(MINGW))
Index: saveload.c
===================================================================
--- saveload.c	(revision 7446)
+++ saveload.c	(working copy)
@@ -1649,7 +1649,7 @@
 void DoExitSave(void)
 {
 	char buf[200];
-	snprintf(buf, sizeof(buf), "%s%sexit.sav", _path.autosave_dir, PATHSEP);
+	snprintf(buf, sizeof(buf), "%s%sexit.sav", _paths.autosave_dir, PATHSEP);
 	SaveOrLoad(buf, SL_SAVE);
 }
 
Index: newgrf_config.c
===================================================================
--- newgrf_config.c	(revision 7446)
+++ newgrf_config.c	(working copy)
@@ -39,7 +39,7 @@
 	size_t len;
 
 	/* open the file */
-	snprintf(filename, lengthof(filename), "%s%s", _path.data_dir, config->filename);
+	snprintf(filename, lengthof(filename), "%s%s", _paths.data_dir, config->filename);
 	f = fopen(filename, "rb");
 	if (f == NULL) return false;
 
@@ -176,7 +176,7 @@
 		} else if (sb.st_mode & S_IFREG) {
 			/* File */
 			char *ext = strrchr(filename, '.');
-			char *file = filename + strlen(_path.data_dir) + 1; // Crop base path
+			char *file = filename + strlen(_paths.data_dir) + 1; // Crop base path
 
 			/* If no extension or extension isn't .grf, skip the file */
 			if (ext == NULL) continue;
@@ -226,7 +226,7 @@
 	_all_grfs = NULL;
 
 	DEBUG(grf, 1) ("[GRF] Scanning for NewGRFs");
-	num = ScanPath(_path.data_dir);
+	num = ScanPath(_paths.data_dir);
 	DEBUG(grf, 1) ("[GRF] Scan complete, found %d files", num);
 }
 
Index: win32.c
===================================================================
--- win32.c	(revision 7446)
+++ win32.c	(working copy)
@@ -911,7 +911,7 @@
 	char *s, *cfg;
 	wchar_t path[MAX_PATH];
 
-	_path.personal_dir = _path.game_data_dir = cfg = malloc(MAX_PATH);
+	_paths.personal_dir = _paths.game_data_dir = cfg = malloc(MAX_PATH);
 	GetCurrentDirectoryW(MAX_PATH - 1, path);
 	convert_from_fs(path, cfg, MAX_PATH);
 
@@ -919,25 +919,25 @@
 	s = strchr(cfg, '\0');
 	if (s[-1] != '\\') strcpy(s, "\\");
 
-	_path.save_dir = str_fmt("%ssave", cfg);
-	_path.autosave_dir = str_fmt("%s\\autosave", _path.save_dir);
-	_path.scenario_dir = str_fmt("%sscenario", cfg);
-	_path.heightmap_dir = str_fmt("%sscenario\\heightmap", cfg);
-	_path.gm_dir = str_fmt("%sgm\\", cfg);
-	_path.data_dir = str_fmt("%sdata\\", cfg);
-	_path.lang_dir = str_fmt("%slang\\", cfg);
+	_paths.save_dir = str_fmt("%ssave", cfg);
+	_paths.autosave_dir = str_fmt("%s\\autosave", _paths.save_dir);
+	_paths.scenario_dir = str_fmt("%sscenario", cfg);
+	_paths.heightmap_dir = str_fmt("%sscenario\\heightmap", cfg);
+	_paths.gm_dir = str_fmt("%sgm\\", cfg);
+	_paths.data_dir = str_fmt("%sdata\\", cfg);
+	_paths.lang_dir = str_fmt("%slang\\", cfg);
 
 	if (_config_file == NULL)
-		_config_file = str_fmt("%sopenttd.cfg", _path.personal_dir);
+		_config_file = str_fmt("%sopenttd.cfg", _paths.personal_dir);
 
-	_highscore_file = str_fmt("%shs.dat", _path.personal_dir);
-	_log_file = str_fmt("%sopenttd.log", _path.personal_dir);
+	_highscore_file = str_fmt("%shs.dat", _paths.personal_dir);
+	_log_file = str_fmt("%sopenttd.log", _paths.personal_dir);
 
 	// make (auto)save and scenario folder
-	CreateDirectoryW(OTTD2FS(_path.save_dir), NULL);
-	CreateDirectoryW(OTTD2FS(_path.autosave_dir), NULL);
-	CreateDirectoryW(OTTD2FS(_path.scenario_dir), NULL);
-	CreateDirectoryW(OTTD2FS(_path.heightmap_dir), NULL);
+	CreateDirectoryW(OTTD2FS(_paths.save_dir), NULL);
+	CreateDirectoryW(OTTD2FS(_paths.autosave_dir), NULL);
+	CreateDirectoryW(OTTD2FS(_paths.scenario_dir), NULL);
+	CreateDirectoryW(OTTD2FS(_paths.heightmap_dir), NULL);
 }
 
 /**
Index: unix.c
===================================================================
--- unix.c	(revision 7446)
+++ unix.c	(working copy)
@@ -169,11 +169,11 @@
 {
 	char *s;
 
-	_path.game_data_dir = malloc(MAX_PATH);
-	ttd_strlcpy(_path.game_data_dir, GAME_DATA_DIR, MAX_PATH);
+	_paths.game_data_dir = malloc(MAX_PATH);
+	ttd_strlcpy(_paths.game_data_dir, GAME_DATA_DIR, MAX_PATH);
 	#if defined SECOND_DATA_DIR
-	_path.second_data_dir = malloc(MAX_PATH);
-	ttd_strlcpy(_path.second_data_dir, SECOND_DATA_DIR, MAX_PATH);
+	_paths.second_data_dir = malloc(MAX_PATH);
+	ttd_strlcpy(_paths.second_data_dir, SECOND_DATA_DIR, MAX_PATH);
 	#endif
 
 #if defined(USE_HOMEDIR)
@@ -185,59 +185,59 @@
 			if (pw != NULL) homedir = pw->pw_dir;
 		}
 
-		_path.personal_dir = str_fmt("%s" PATHSEP "%s", homedir, PERSONAL_DIR);
+		_paths.personal_dir = str_fmt("%s" PATHSEP "%s", homedir, PERSONAL_DIR);
 	}
 
 #else /* not defined(USE_HOMEDIR) */
 
-	_path.personal_dir = malloc(MAX_PATH);
-	ttd_strlcpy(_path.personal_dir, PERSONAL_DIR, MAX_PATH);
+	_paths.personal_dir = malloc(MAX_PATH);
+	ttd_strlcpy(_paths.personal_dir, PERSONAL_DIR, MAX_PATH);
 
 	// check if absolute or relative path
-	s = strchr(_path.personal_dir, '/');
+	s = strchr(_paths.personal_dir, '/');
 
 	// add absolute path
-	if (s == NULL || _path.personal_dir != s) {
-		getcwd(_path.personal_dir, MAX_PATH);
-		s = strchr(_path.personal_dir, 0);
+	if (s == NULL || _paths.personal_dir != s) {
+		getcwd(_paths.personal_dir, MAX_PATH);
+		s = strchr(_paths.personal_dir, 0);
 		*s++ = '/';
 		ttd_strlcpy(s, PERSONAL_DIR, MAX_PATH);
 	}
 
 #endif /* defined(USE_HOMEDIR) */
 
-	s = strchr(_path.personal_dir, 0);
+	s = strchr(_paths.personal_dir, 0);
 
 	// append a / ?
 	if (s[-1] != '/') strcpy(s, "/");
 
-	_path.save_dir = str_fmt("%ssave", _path.personal_dir);
-	_path.autosave_dir = str_fmt("%s/autosave", _path.save_dir);
-	_path.scenario_dir = str_fmt("%sscenario", _path.personal_dir);
-	_path.heightmap_dir = str_fmt("%sscenario/heightmap", _path.personal_dir);
-	_path.gm_dir = str_fmt("%sgm/", _path.game_data_dir);
-	_path.data_dir = str_fmt("%sdata/", _path.game_data_dir);
+	_paths.save_dir = str_fmt("%ssave", _paths.personal_dir);
+	_paths.autosave_dir = str_fmt("%s/autosave", _paths.save_dir);
+	_paths.scenario_dir = str_fmt("%sscenario", _paths.personal_dir);
+	_paths.heightmap_dir = str_fmt("%sscenario/heightmap", _paths.personal_dir);
+	_paths.gm_dir = str_fmt("%sgm/", _paths.game_data_dir);
+	_paths.data_dir = str_fmt("%sdata/", _paths.game_data_dir);
 
 	if (_config_file == NULL)
-		_config_file = str_fmt("%sopenttd.cfg", _path.personal_dir);
+		_config_file = str_fmt("%sopenttd.cfg", _paths.personal_dir);
 
-	_highscore_file = str_fmt("%shs.dat", _path.personal_dir);
-	_log_file = str_fmt("%sopenttd.log", _path.personal_dir);
+	_highscore_file = str_fmt("%shs.dat", _paths.personal_dir);
+	_log_file = str_fmt("%sopenttd.log", _paths.personal_dir);
 
 #if defined CUSTOM_LANG_DIR
 	// sets the search path for lng files to the custom one
-	_path.lang_dir = malloc( MAX_PATH );
-	ttd_strlcpy( _path.lang_dir, CUSTOM_LANG_DIR, MAX_PATH);
+	_paths.lang_dir = malloc( MAX_PATH );
+	ttd_strlcpy( _paths.lang_dir, CUSTOM_LANG_DIR, MAX_PATH);
 #else
-	_path.lang_dir = str_fmt("%slang/", _path.game_data_dir);
+	_paths.lang_dir = str_fmt("%slang/", _paths.game_data_dir);
 #endif
 
 	// create necessary folders
-	mkdir(_path.personal_dir, 0755);
-	mkdir(_path.save_dir, 0755);
-	mkdir(_path.autosave_dir, 0755);
-	mkdir(_path.scenario_dir, 0755);
-	mkdir(_path.heightmap_dir, 0755);
+	mkdir(_paths.personal_dir, 0755);
+	mkdir(_paths.save_dir, 0755);
+	mkdir(_paths.autosave_dir, 0755);
+	mkdir(_paths.scenario_dir, 0755);
+	mkdir(_paths.heightmap_dir, 0755);
 }
 
 bool InsertTextBufferClipboard(Textbuf *tb)
Index: network_server.c
===================================================================
--- network_server.c	(revision 7446)
+++ network_server.c	(working copy)
@@ -281,7 +281,7 @@
 		Packet *p;
 
 		// Make a dump of the current game
-		snprintf(filename, lengthof(filename), "%s%snetwork_server.tmp",  _path.autosave_dir, PATHSEP);
+		snprintf(filename, lengthof(filename), "%s%snetwork_server.tmp",  _paths.autosave_dir, PATHSEP);
 		if (SaveOrLoad(filename, SL_SAVE) != SL_OK) error("network savedump failed");
 
 		file_pointer = fopen(filename, "rb");
Index: fileio.c
===================================================================
--- fileio.c	(revision 7446)
+++ fileio.c	(working copy)
@@ -117,19 +117,19 @@
 	FILE *f;
 	char buf[MAX_PATH];
 
-	snprintf(buf, lengthof(buf), "%s%s", _path.data_dir, filename);
+	snprintf(buf, lengthof(buf), "%s%s", _paths.data_dir, filename);
 
 	f = fopen(buf, "rb");
 #if !defined(WIN32)
 	if (f == NULL) {
-		strtolower(buf + strlen(_path.data_dir) - 1);
+		strtolower(buf + strlen(_paths.data_dir) - 1);
 		f = fopen(buf, "rb");
 
 #if defined SECOND_DATA_DIR
 		// tries in the 2nd data directory
 		if (f == NULL) {
-			snprintf(buf, lengthof(buf), "%s%s", _path.second_data_dir, filename);
-			strtolower(buf + strlen(_path.second_data_dir) - 1);
+			snprintf(buf, lengthof(buf), "%s%s", _paths.second_data_dir, filename);
+			strtolower(buf + strlen(_paths.second_data_dir) - 1);
 			f = fopen(buf, "rb");
 		}
 #endif
@@ -143,7 +143,7 @@
 {
 	FILE *f = FioFOpenFile(filename);
 
-	if (f == NULL) error("Cannot open file '%s%s'", _path.data_dir, filename);
+	if (f == NULL) error("Cannot open file '%s%s'", _paths.data_dir, filename);
 
 	FioCloseFile(slot); // if file was opened before, close it
 	_fio.handles[slot] = f;
