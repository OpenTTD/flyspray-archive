=== src/video/cocoa_v.h
==================================================================
--- src/video/cocoa_v.h	(/trunk)	(revision 92)
+++ src/video/cocoa_v.h	(/branch/performance_meter)	(revision 92)
@@ -18,6 +18,8 @@
 	/* virtual */ bool ChangeResolution(int w, int h);
 
 	/* virtual */ void ToggleFullscreen(bool fullscreen);
+
+	/* virtual */ uint32 GetTick();
 };
 
 class FVideoDriver_Cocoa: public VideoDriverFactory<FVideoDriver_Cocoa> {
=== src/video/null_v.cpp
==================================================================
--- src/video/null_v.cpp	(/trunk)	(revision 92)
+++ src/video/null_v.cpp	(/branch/performance_meter)	(revision 92)
@@ -40,3 +40,5 @@
 bool VideoDriver_Null::ChangeResolution(int w, int h) { return false; }
 
 void VideoDriver_Null::ToggleFullscreen(bool fs) {}
+
+uint32 VideoDriver_Null::GetTick() {}
=== src/video/cocoa_v.mm
==================================================================
--- src/video/cocoa_v.mm	(/trunk)	(revision 92)
+++ src/video/cocoa_v.mm	(/branch/performance_meter)	(revision 92)
@@ -192,7 +192,7 @@
  *                             Game loop and accessories                      *
  ******************************************************************************/
 
-static uint32 GetTick()
+uint32 VideoDriver_Cocoa:GetTick()
 {
 	struct timeval tim;
 
=== src/video/dedicated_v.h
==================================================================
--- src/video/dedicated_v.h	(/trunk)	(revision 92)
+++ src/video/dedicated_v.h	(/branch/performance_meter)	(revision 92)
@@ -18,6 +18,8 @@
 	/* virtual */ bool ChangeResolution(int w, int h);
 
 	/* virtual */ void ToggleFullscreen(bool fullscreen);
+
+	/* virtual */ uint32 GetTick();
 };
 
 class FVideoDriver_Dedicated: public VideoDriverFactory<FVideoDriver_Dedicated> {
=== src/video/null_v.h
==================================================================
--- src/video/null_v.h	(/trunk)	(revision 92)
+++ src/video/null_v.h	(/branch/performance_meter)	(revision 92)
@@ -21,6 +21,8 @@
 	/* virtual */ bool ChangeResolution(int w, int h);
 
 	/* virtual */ void ToggleFullscreen(bool fullscreen);
+
+	/* virtual */ uint32 GetTick();
 };
 
 class FVideoDriver_Null: public VideoDriverFactory<FVideoDriver_Null> {
=== src/video/video_driver.hpp
==================================================================
--- src/video/video_driver.hpp	(/trunk)	(revision 92)
+++ src/video/video_driver.hpp	(/branch/performance_meter)	(revision 92)
@@ -14,6 +14,8 @@
 	virtual bool ChangeResolution(int w, int h) = 0;
 
 	virtual void ToggleFullscreen(bool fullscreen) = 0;
+
+	virtual uint32 GetTick() = 0;
 };
 
 class VideoDriverFactoryBase: public DriverFactoryBase {
=== src/video/sdl_v.cpp
==================================================================
--- src/video/sdl_v.cpp	(/trunk)	(revision 92)
+++ src/video/sdl_v.cpp	(/branch/performance_meter)	(revision 92)
@@ -455,7 +455,7 @@
 
 void VideoDriver_SDL::MainLoop()
 {
-	uint32 cur_ticks = SDL_CALL SDL_GetTicks();
+	uint32 cur_ticks = GetTick();
 	uint32 last_cur_ticks = cur_ticks;
 	uint32 next_tick = cur_ticks + 30;
 	uint32 pal_tick = 0;
@@ -485,7 +485,7 @@
 			_fast_forward = 0;
 		}
 
-		cur_ticks = SDL_CALL SDL_GetTicks();
+		cur_ticks = GetTick();
 		if (cur_ticks >= next_tick || (_fast_forward && !_pause_game) || cur_ticks < prev_cur_ticks) {
 			_realtime_tick += cur_ticks - last_cur_ticks;
 			last_cur_ticks = cur_ticks;
@@ -534,4 +534,9 @@
 	}
 }
 
+uint32 VideoDriver_SDL::GetTick()
+{
+	return SDL_CALL SDL_GetTicks();
+}
+
 #endif /* WITH_SDL */
=== src/video/win32_v.cpp
==================================================================
--- src/video/win32_v.cpp	(/trunk)	(revision 92)
+++ src/video/win32_v.cpp	(/branch/performance_meter)	(revision 92)
@@ -816,7 +816,7 @@
 void VideoDriver_Win32::MainLoop()
 {
 	MSG mesg;
-	uint32 cur_ticks = GetTickCount();
+	uint32 cur_ticks = GetTick();
 	uint32 last_cur_ticks = cur_ticks;
 	uint32 next_tick = cur_ticks + 30;
 
@@ -844,7 +844,7 @@
 			_fast_forward = 0;
 		}
 
-		cur_ticks = GetTickCount();
+		cur_ticks = GetTick();
 		if (cur_ticks >= next_tick || (_fast_forward && !_pause_game) || cur_ticks < prev_cur_ticks) {
 			_realtime_tick += cur_ticks - last_cur_ticks;
 			last_cur_ticks = cur_ticks;
@@ -900,3 +900,8 @@
 {
 	MakeWindow(full_screen);
 }
+
+uint32 VideoDriver_Win32::GetTick()
+{
+	return GetTickCount();
+}
=== src/video/dedicated_v.cpp
==================================================================
--- src/video/dedicated_v.cpp	(/trunk)	(revision 92)
+++ src/video/dedicated_v.cpp	(/branch/performance_meter)	(revision 92)
@@ -177,7 +177,7 @@
 	return select(STDIN + 1, &readfds, NULL, NULL, &tv) > 0;
 }
 
-static uint32 GetTime()
+uint32 VideoDriver_Dedicated::GetTick()
 {
 	struct timeval tim;
 
@@ -192,7 +192,7 @@
 	return WaitForSingleObject(_hInputReady, 1) == WAIT_OBJECT_0;
 }
 
-static uint32 GetTime()
+uint32 VideoDriver_Dedicated::GetTick()
 {
 	return GetTickCount();
 }
@@ -236,7 +236,7 @@
 
 void VideoDriver_Dedicated::MainLoop()
 {
-	uint32 cur_ticks = GetTime();
+	uint32 cur_ticks = GetTick();
 	uint32 next_tick = cur_ticks + 30;
 
 	/* Signal handlers */
@@ -285,7 +285,7 @@
 		if (!_dedicated_forks)
 			DedicatedHandleKeyInput();
 
-		cur_ticks = GetTime();
+		cur_ticks = GetTick();
 		if (cur_ticks >= next_tick || cur_ticks < prev_cur_ticks) {
 			next_tick = cur_ticks + 30;
 
=== src/video/sdl_v.h
==================================================================
--- src/video/sdl_v.h	(/trunk)	(revision 92)
+++ src/video/sdl_v.h	(/branch/performance_meter)	(revision 92)
@@ -18,6 +18,8 @@
 	/* virtual */ bool ChangeResolution(int w, int h);
 
 	/* virtual */ void ToggleFullscreen(bool fullscreen);
+
+	/* virtual */ uint32 GetTick();
 };
 
 class FVideoDriver_SDL: public VideoDriverFactory<FVideoDriver_SDL> {
=== src/video/win32_v.h
==================================================================
--- src/video/win32_v.h	(/trunk)	(revision 92)
+++ src/video/win32_v.h	(/branch/performance_meter)	(revision 92)
@@ -18,6 +18,8 @@
 	/* virtual */ bool ChangeResolution(int w, int h);
 
 	/* virtual */ void ToggleFullscreen(bool fullscreen);
+
+	/* virtual */ uint32 GetTick();
 };
 
 class FVideoDriver_Win32: public VideoDriverFactory<FVideoDriver_Win32> {
=== src/lang/english.txt
==================================================================
--- src/lang/english.txt	(/trunk)	(revision 92)
+++ src/lang/english.txt	(/branch/performance_meter)	(revision 92)
@@ -794,6 +794,7 @@
 STR_02D5_LAND_BLOCK_INFO                                        :Land area information
 STR_02D6                                                        :
 STR_CONSOLE_SETTING                                             :Toggle Console
+STR_PERFORMANCE_GUI                                             :Performance Meter
 STR_02D7_SCREENSHOT_CTRL_S                                      :Screenshot (Ctrl-S)
 STR_02D8_GIANT_SCREENSHOT_CTRL_G                                :Giant Screenshot (Ctrl-G)
 STR_02D9_ABOUT_OPENTTD                                          :About 'OpenTTD'
@@ -3366,6 +3367,13 @@
 STR_PROFIT_GOOD_THIS_YEAR_BAD_LAST_YEAR                         :{TINYFONT}{BLACK}Profit this year: {GREEN}{CURRENCY} {BLACK}(last year: {RED}{CURRENCY}{BLACK})
 STR_PROFIT_BAD_THIS_YEAR_BAD_LAST_YEAR                          :{TINYFONT}{BLACK}Profit this year: {RED}{CURRENCY} {BLACK}(last year: {RED}{CURRENCY}{BLACK})
 
+STR_PERFORMANCE_METER                                           :{WHITE}Performance Meter
+STR_PERFORMANCE_METER_LABELS                                    :{BLACK}Current:{}Average:{}Time:
+STR_PERFORMANCE_METER_START                                     :{BLACK}Start
+STR_PERFORMANCE_METER_STOP                                      :{BLACK}Stop
+STR_PERFORMANCE_METER_START_STOP_TIP                            :{BLACK}Start/stop the performance meter (click+ctrl starts a timed performance measurement)
+STR_PERFORMANCE_METER_SWITCH_TIP                                :{BLACK}Switch between the different performance meters
+
 STR_COMPANY_NAME                                                :{COMPANY}
 STR_ENGINE_NAME                                                 :{ENGINE}
 STR_GROUP_NAME                                                  :{GROUP}
=== src/table/sprites.h
==================================================================
--- src/table/sprites.h	(/trunk)	(revision 92)
+++ src/table/sprites.h	(/branch/performance_meter)	(revision 92)
@@ -47,7 +47,7 @@
 	SPR_ASCII_SPACE_BIG   = 450,
 
 	/* Extra graphic spritenumbers */
-	OPENTTD_SPRITES_COUNT = 112, // number of gfx-sprites in openttd.grf
+	OPENTTD_SPRITES_COUNT = 114, // number of gfx-sprites in openttd.grf
 	SPR_SIGNALS_BASE  = 4896,
 	SPR_CANALS_BASE   = SPR_SIGNALS_BASE + 486,
 	SPR_SLOPES_BASE   = SPR_CANALS_BASE + 70,
@@ -96,6 +96,9 @@
 
 	SPR_WARNING_SIGN      = SPR_OPENTTD_BASE + 111, // warning sign (shown if there are any newgrf errors)
 
+	SPR_PERFORMANCE_METER_TPPS = SPR_OPENTTD_BASE + 112,
+	SPR_PERFORMANCE_METER_TPRS = SPR_OPENTTD_BASE + 113,
+
 	/* Network GUI sprites */
 	SPR_SQUARE = SPR_OPENTTD_BASE + 20,     // colored square (used for newgrf compatibility)
 	SPR_LOCK = SPR_OPENTTD_BASE + 19,       // lock icon (for password protected servers)
=== src/table/files.h
==================================================================
--- src/table/files.h	(/trunk)	(revision 92)
+++ src/table/files.h	(/branch/performance_meter)	(revision 92)
@@ -59,7 +59,7 @@
 	{ "autorail.grf",  { 0xed, 0x44, 0x7f, 0xbb, 0x19, 0x44, 0x48, 0x4c, 0x07, 0x8a, 0xb1, 0xc1, 0x5c, 0x12, 0x3a, 0x60 } },
 	{ "canalsw.grf",   { 0x13, 0x9c, 0x98, 0xcf, 0xb8, 0x7c, 0xd7, 0x1f, 0xca, 0x34, 0xa5, 0x6b, 0x65, 0x31, 0xec, 0x0f } },
 	{ "elrailsw.grf",  { 0x4f, 0xf9, 0xac, 0x79, 0x50, 0x28, 0x9b, 0xe2, 0x15, 0x30, 0xa8, 0x1e, 0xd5, 0xfd, 0xe1, 0xda } },
-	{ "openttd.grf",   { 0x20, 0x64, 0x4a, 0xf6, 0x75, 0x26, 0x5b, 0x92, 0xbb, 0x6f, 0x8d, 0x0e, 0x34, 0x7e, 0xa6, 0xe3 } },
+	{ "openttd.grf",   { 0x2d, 0xca, 0xd1, 0x27, 0xc0, 0xc2, 0xe7, 0xe8, 0xcb, 0x71, 0x9f, 0x36, 0x1e, 0x5b, 0x33, 0x64 } },
 	{ "trkfoundw.grf", { 0x12, 0x33, 0x3f, 0xa3, 0xd1, 0x86, 0x8b, 0x04, 0x53, 0x18, 0x9c, 0xee, 0xf9, 0x2d, 0xf5, 0x95 } },
 	{ "roadstops.grf", { 0xa1, 0x5b, 0xb3, 0x52, 0x60, 0x12, 0x3c, 0xb7, 0x7b, 0x73, 0x09, 0xc1, 0x1a, 0xb4, 0xd0, 0xb8 } },
 	{ "group.grf",     { 0xe8, 0x52, 0x5f, 0x1c, 0x3e, 0xf9, 0x91, 0x9d, 0x0f, 0x70, 0x8c, 0x8a, 0x21, 0xa4, 0xc7, 0x02 } },
=== src/performance.hpp
==================================================================
--- src/performance.hpp	(/trunk)	(revision 92)
+++ src/performance.hpp	(/branch/performance_meter)	(revision 92)
@@ -0,0 +1,115 @@
+
+/** @file performance.hpp */
+
+#ifndef  PERFORMANCE_HPP
+#define  PERFORMANCE_HPP
+
+#include "misc/blob.hpp"
+#include "misc/str.hpp"
+
+/* Differ time values from performance values more obvious. */
+typedef uint32 timestamp;
+
+/**
+ * Interface for the performance meter.
+ * @See PerfMeterTPS
+ */
+struct PerfMeter {
+	public:
+		enum PerfMeterType {
+			PM_TPS_REAL_TIME = 0,
+			PM_TPS_PROCESS_TIME,
+			PM_NUM_TYPES,
+		};
+
+		enum ResultType {
+			RET_TIME = 0, ///< time since startup
+			RET_CUR,      ///< current value
+			RET_AVG,      ///< average value
+		};
+
+		virtual ~PerfMeter() {};
+		virtual PerfMeterType Whoami() = 0;
+		virtual void Start() = 0;
+		virtual void Stop() = 0;
+		virtual void SetTimer(const bool timed) = 0;
+		virtual bool IsActive() = 0;
+		virtual CStrA GetResultStr(const ResultType result_type) = 0;
+		virtual bool OnTick() = 0;
+};
+
+/**
+ * Mother class for all TPS dependant meters
+ * @see PerfMeterTPPS = Ticks per second (process time)
+ * @see PerfMeterTPRS = Ticks per second (real time)
+ */
+struct PerfMeterTPS : public PerfMeter {
+	protected:
+		bool m_active;             ///< is running ATM
+		bool m_is_timed;           ///< is it a timed performance check
+		timestamp m_start_time;    ///< start timestamp
+		timestamp m_last_time;     ///< last calculation timestamp
+		timestamp m_cur_time;      ///< current timestamp
+		timestamp m_total_time;    ///< total time since start
+		uint32 m_total_tick_count; ///< total ticks since start
+		uint16 m_tick_count;       ///< ticks since last calculation
+		uint16 m_calc_ticks_cur;   ///< current TPS value
+		uint16 m_calc_ticks_avg;   ///< average TPS value
+
+		virtual timestamp GetTimestamp() = 0;
+		void CalculateTPS();
+
+	public:
+		PerfMeterTPS()
+			: m_active(false)
+			, m_is_timed(false)
+			, m_start_time(0)
+			, m_last_time(0)
+			, m_cur_time(0)
+			, m_total_time(0)
+			, m_total_tick_count(0)
+			, m_tick_count(0)
+			, m_calc_ticks_cur(0)
+			, m_calc_ticks_avg(0)
+		{}
+		/* Mandatory PerfMeter overides. */
+		/* virtual */ void Start();
+		/* virtual */ void Stop();
+		/* virtual */ bool IsActive();
+		/* virtual */ void SetTimer(const bool timed);
+		/* virtual */ bool OnTick();
+		/* virtual */ CStrA GetResultStr(const ResultType result_type);
+};
+
+/**
+ * Performance meter for ticks per second (process time).
+ *  Calculation is based on WE_TICK and the milliseconds (process time) since startup.
+ * @see PerfMeterTPS
+ */
+struct PerfMeterTPPS : PerfMeterTPS {
+	public:
+		/* Mandatory PerfMeter overides. */
+		/* virtual */ PerfMeterType Whoami() { return PM_TPS_PROCESS_TIME; }
+		/* virtual */ CStrA GetResultStr(const ResultType result_type);
+	private:
+		/* Mandatory PerfMeterTPS overides. */
+		/* virtual */ timestamp GetTimestamp();
+};
+
+/**
+ * Performance meter for ticks per second (real time).
+ *  Calculation is based on WE_TICK and the milliseconds (realtime) since startup.
+ * @see PerfMeterTPS
+ */
+struct PerfMeterTPRS : PerfMeterTPS {
+	public:
+		/* Mandatory PerfMeter overides. */
+		/* virtual */ PerfMeterType Whoami() { return PM_TPS_REAL_TIME; }
+		/* virtual */ CStrA GetResultStr(const ResultType result_type);
+	private:
+		/* Mandatory PerfMeterTPS overides. */
+		/* virtual */ timestamp GetTimestamp();
+};
+
+#endif /* PERFORMANCE_HPP */
+
=== src/performance.cpp
==================================================================
--- src/performance.cpp	(/trunk)	(revision 92)
+++ src/performance.cpp	(/branch/performance_meter)	(revision 92)
@@ -0,0 +1,210 @@
+#include "stdafx.h"
+#include "openttd.h"
+#include "table/strings.h"
+#include "strings.h"
+#include "functions.h"
+#include "gui.h"
+#include "gfx.h"
+#include "macros.h"
+#include "misc/blob.hpp"
+#include "misc/str.hpp"
+#include "performance.hpp"
+#include "driver.h"
+#include "video/video_driver.hpp"
+
+#include <time.h>
+
+/* ============
+ * PerfMeterTPS
+ * ============ */
+
+/**
+ * Activate the performance meter
+ */
+/* virtual */ void PerfMeterTPS::Start()
+{
+	this->m_active = true;
+	this->m_start_time = GetTimestamp();
+	/* Reset the PerfMeterTPS */
+	this->m_last_time = 0;
+	this->m_total_time = 0;
+	this->m_total_tick_count = 0;
+	this->m_tick_count = 0;
+	this->m_calc_ticks_cur = 0;
+	this->m_calc_ticks_avg = 0;
+}
+
+/**
+ * Inactivate the performance meter
+ */
+/* virtual */ void PerfMeterTPS::Stop()
+{
+	this->m_active = false;
+}
+
+/**
+ * Activate the timer
+ * @param timed if true activate the timer else not
+ */
+/* virtual */ void PerfMeterTPS::SetTimer(const bool timed) {
+	this->m_is_timed = (this->m_active && timed);
+}
+
+/**
+ * Check if ther performance meter is running
+ * @return true if the performance meter is running else false
+ */
+/* virtual */ bool PerfMeterTPS::IsActive() {
+	return this->m_active;
+}
+
+/**
+ * Raise the counter of the performance meter
+ * @return true if a calculation has been done else false
+ */
+/* virtual */ bool PerfMeterTPS::OnTick()
+{
+	this->m_tick_count++;
+	this->m_cur_time = GetTimestamp();
+
+	if ((this->m_cur_time - this->m_last_time) < 100) {
+		/* Calculate only every 100 ms */
+		return false;
+	}
+
+	this->CalculateTPS();
+	return true;
+}
+
+/**
+ * Format a requested output of the performance meter.
+ *  Here are only the values formated the usints will be added in the sub classes.
+ * @param result_type is the output you want to get
+ * @return the requested string
+ */
+/* virtual */ CStrA PerfMeterTPS::GetResultStr(const ResultType result_type)
+{
+	uint32 calc_value = 0;
+
+	switch (result_type) {
+		default: NOT_REACHED();
+		case RET_TIME:
+			calc_value = (uint32)(this->m_total_time / 100);
+			break;
+		case RET_CUR:
+			calc_value = (uint32)(this->m_calc_ticks_cur);
+			break;
+		case RET_AVG:
+			calc_value = (uint32)(this->m_calc_ticks_avg);
+			break;
+	}
+	/* Format the number to a decimal string */
+	CStrA str;
+	str.Format("%d.%d ", calc_value / 10, calc_value % 10);
+	return str.Transfer();
+}
+
+/**
+ * Calculate the TPS values
+ */
+void PerfMeterTPS::CalculateTPS()
+{
+	/* Update the memorised time values */
+	this->m_last_time = this->m_cur_time;
+	this->m_total_time = max((timestamp)1, this->m_cur_time - this->m_start_time);
+
+	/* Calculate the ticks per 100 ms. */
+	this->m_calc_ticks_cur = this->m_tick_count * 100;
+	/* Calculate the overall ticks per second. */
+	this->m_calc_ticks_avg = this->m_total_tick_count * 10000 / this->m_total_time;
+	/* Secure total ticks counter */
+	this->m_total_tick_count = max((uint32)1, this->m_total_tick_count + this->m_tick_count);
+	this->m_tick_count = 0;
+
+	/* Stop the performance meter
+	 * @li if it is timed after 10 seconds
+	 * @li if the tick_counter reaches its limit
+	 */
+	if ( (this->m_is_timed && (this->m_total_time / 1000) >= 10)
+			|| (this->m_total_tick_count >= (UINT32_MAX - 7295)))
+		this->m_active = false;
+}
+
+/* =============
+ * PerfMeterTPPS
+ * ============= */
+
+/**
+ * Format a requested output of the performance meter.
+ *  The units are added here but the values are from the mother class.
+ * @param result_type is the output you want to get
+ * @see PerfMeterTPS::GetResultStr
+ * @return the requested string
+ */
+/* virtual */ CStrA PerfMeterTPPS::GetResultStr(const ResultType result_type)
+{
+	CStrA str = PerfMeterTPS::GetResultStr(result_type);
+
+	switch (result_type) {
+		default: NOT_REACHED();
+		case RET_TIME:
+			str.AppendStr("cpu-sec");
+			break;
+		case RET_CUR:
+		case RET_AVG:
+			str.AppendStr("T/cs");
+			break;
+	}
+
+	return str.Transfer();
+}
+
+/**
+ * Return a unique timestamp.
+ *
+ * @return the amount of processor time actually used by the current process in milliseconds.
+ */
+timestamp PerfMeterTPPS::GetTimestamp()
+{
+	return (clock() / (CLOCKS_PER_SEC / 1000));
+}
+
+/* =============
+ * PerfMeterTPRS
+ * ============= */
+
+/**
+ * Return a unique timestamp.
+ *
+ * @return the current realtime stamp
+ */
+timestamp PerfMeterTPRS::GetTimestamp()
+{
+	return _video_driver->GetTick();
+}
+
+/**
+ * Format a requested output of the performance meter.
+ *  The units are added here but the values are from the mother class.
+ * @param result_type is the output you want to get
+ * @see PerfMeterTPS::GetResultStr
+ * @return the requested string
+ */
+/* virtual */ CStrA PerfMeterTPRS::GetResultStr(const ResultType result_type)
+{
+	CStrA str = PerfMeterTPS::GetResultStr(result_type);
+
+	switch (result_type) {
+		default: NOT_REACHED();
+		case RET_TIME:
+			str.AppendStr("sec");
+			break;
+		case RET_CUR:
+		case RET_AVG:
+			str.AppendStr("T/s");
+			break;
+	}
+
+	return str.Transfer();
+}
+
=== src/gui.h
==================================================================
--- src/gui.h	(/trunk)	(revision 92)
+++ src/gui.h	(/branch/performance_meter)	(revision 92)
@@ -36,6 +36,9 @@
 void ShowMessageOptions();
 void ShowMessageHistory();
 
+/* performance_gui.cpp */
+void ShowPerformanceMeterWindow();
+
 /* rail_gui.cpp */
 void ShowBuildRailToolbar(RailType railtype, int button);
 void PlaceProc_BuyLand(TileIndex tile);
=== src/openttd.h
==================================================================
--- src/openttd.h	(/trunk)	(revision 92)
+++ src/openttd.h	(/branch/performance_meter)	(revision 92)
@@ -572,6 +572,7 @@
 	WC_CONFIRM_POPUP_QUERY,
 	WC_TRANSPARENCY_TOOLBAR,
 	WC_VEHICLE_TIMETABLE,
+	WC_PERFORMANCE_METER,
 };
 
 
=== src/performance_gui.cpp
==================================================================
--- src/performance_gui.cpp	(/trunk)	(revision 92)
+++ src/performance_gui.cpp	(/branch/performance_meter)	(revision 92)
@@ -0,0 +1,157 @@
+#include "stdafx.h"
+#include "openttd.h"
+#include "table/sprites.h"
+#include "table/strings.h"
+#include "strings.h"
+#include "functions.h"
+#include "window.h"
+#include "gui.h"
+#include "gfx.h"
+#include "variables.h"
+
+#include "performance.hpp"
+
+/**
+ * Names of the performance meter widgets.
+ */
+enum PerformanceMeterWidgets {
+	PERFORMANCE_WIDGET_CLOSEBOX = 0,
+	PERFORMANCE_WIDGET_CAPTION,
+	PERFORMANCE_WIDGET_STICKY,
+	PERFORMANCE_WIDGET_TEXT,
+	PERFORMANCE_WIDGET_START_STOP,
+	PERFORMANCE_WIDGET_SWITCH,
+};
+
+struct perf_meter_d {
+	PerfMeter *pm;
+	};
+
+	assert_compile(WINDOW_CUSTOM_SIZE >= sizeof(perf_meter_d));
+
+/**
+ * Handle the events of the performance meter
+ */
+void PerformanceMeterWndProc(Window *w, WindowEvent *e)
+{
+	perf_meter_d *pm_d = &WP(w, perf_meter_d);
+
+	switch (e->event) {
+		case WE_CREATE:
+			pm_d->pm = new PerfMeterTPRS();
+			break;
+
+		case WE_DESTROY:
+			/* Delete perf meter object. */
+			delete(pm_d->pm);
+			pm_d->pm = NULL;
+			break;
+
+		case WE_PAINT:
+			DrawWindowWidgets(w);
+			/* Draw the specifications and the units first. */
+			DrawString(3, 17, STR_PERFORMANCE_METER_LABELS, 16);
+
+			/* Now draw the data. */
+			DrawStringRightAligned(128, 17, BindCString(pm_d->pm->GetResultStr(PerfMeter::RET_CUR).Data()), 16);
+			DrawStringRightAligned(128, 27, BindCString(pm_d->pm->GetResultStr(PerfMeter::RET_AVG).Data()), 16);
+			DrawStringRightAligned(128, 37, BindCString(pm_d->pm->GetResultStr(PerfMeter::RET_TIME).Data()), 16);
+			break;
+
+		case WE_TICK:
+			if (pm_d->pm->IsActive()) {
+				/* Redraw only when needed */
+				if (pm_d->pm->OnTick()) {
+					InvalidateWindow(WC_PERFORMANCE_METER, 0);
+				}
+
+				if (!pm_d->pm->IsActive()) {
+					/* Performance meter has been stoped */
+					w->widget[PERFORMANCE_WIDGET_START_STOP].data = STR_PERFORMANCE_METER_START;
+					InvalidateWindow(WC_PERFORMANCE_METER, 0);
+				}
+			}
+			break;
+
+		case WE_CLICK:
+			switch (e->we.click.widget) {
+
+				case PERFORMANCE_WIDGET_START_STOP:
+					/* Toogle performance meter */
+					if (!pm_d->pm->IsActive()) {
+
+						pm_d->pm->Start();
+						/* ctrl activates timed measurement */
+						pm_d->pm->SetTimer(_ctrl_pressed);
+
+						w->widget[PERFORMANCE_WIDGET_START_STOP].data = STR_PERFORMANCE_METER_STOP;
+					} else {
+						pm_d->pm->Stop();
+						w->widget[PERFORMANCE_WIDGET_START_STOP].data = STR_PERFORMANCE_METER_START;
+					}
+					break;
+
+				case PERFORMANCE_WIDGET_SWITCH: {
+					/* Get the current performance meter type */
+					const PerfMeter::PerfMeterType cur_type = pm_d->pm->Whoami();
+
+					/* Stop the performance meter if it is active. */
+					if (pm_d->pm->IsActive()) {
+						pm_d->pm->Stop();
+						w->widget[PERFORMANCE_WIDGET_START_STOP].data = STR_PERFORMANCE_METER_START;
+					}
+
+					/* Remove the old performance meter from the memory
+					 * and replace it with the new one. */
+					delete(pm_d->pm);
+					switch (cur_type) {
+						case PerfMeter::PM_TPS_PROCESS_TIME:
+						default:
+							pm_d->pm = new PerfMeterTPRS();
+							w->widget[PERFORMANCE_WIDGET_SWITCH].data = SPR_PERFORMANCE_METER_TPRS;
+							break;
+
+						case PerfMeter::PM_TPS_REAL_TIME:
+							pm_d->pm = new PerfMeterTPPS();
+							w->widget[PERFORMANCE_WIDGET_SWITCH].data = SPR_PERFORMANCE_METER_TPPS;
+							break;
+					}
+				} break;
+			}
+
+			InvalidateWindow(WC_PERFORMANCE_METER, 0);
+			break;
+	}
+}
+
+/**
+ * Widget definition for the performance meter.
+ */
+static const Widget _performance_meter_widgets[] = {
+	{   WWT_CLOSEBOX,  RESIZE_NONE,  14,   0,   10,   0,  13, STR_00C5,                     STR_018B_CLOSE_WINDOW},                // PERFORMANCE_WIDGET_CLOSEBOX
+	{    WWT_CAPTION,  RESIZE_NONE,  14,  11,  118,   0,  13, STR_PERFORMANCE_METER,        STR_018C_WINDOW_TITLE_DRAG_THIS},      // PERFORMANCE_WIDGET_CAPTION
+	{  WWT_STICKYBOX,    RESIZE_LR,  14, 119,  130,   0,  13, 0x0,                          STR_STICKY_BUTTON },                   // PERFORMANCE_WIDGET_STICKY
+	{      WWT_PANEL,  RESIZE_NONE,  14,   0,  130,  14,  49, 0x0,                          STR_NULL},                             // PERFORMANCE_WIDGET_TEXT
+	{    WWT_TEXTBTN,  RESIZE_NONE,  14,   0,  117,  50,  63, STR_PERFORMANCE_METER_START,  STR_PERFORMANCE_METER_START_STOP_TIP}, // PERFORMANCE_WIDGET_START_STOP
+	{     WWT_IMGBTN,  RESIZE_NONE,  14, 118,  130,  50,  63, SPR_PERFORMANCE_METER_TPRS,   STR_PERFORMANCE_METER_SWITCH_TIP},     // PERFORMANCE_WIDGET_SWITCH
+	{   WIDGETS_END},
+};
+
+/**
+ * Window definition for the performance meter.
+ */
+static const WindowDesc _performance_meter_desc = {
+	WDP_AUTO, WDP_AUTO, 131, 64,
+	WC_PERFORMANCE_METER, WC_NONE,
+	WDF_STD_TOOLTIPS | WDF_DEF_WIDGET | WDF_STD_BTN | WDF_STICKY_BUTTON,
+	_performance_meter_widgets,
+	PerformanceMeterWndProc
+};
+
+/**
+ * Bring the performance meter window up.
+ */
+void ShowPerformanceMeterWindow()
+{
+	AllocateWindowDescFront(&_performance_meter_desc, 0);
+}
=== src/gfxinit.cpp
==================================================================
--- src/gfxinit.cpp	(/trunk)	(revision 92)
+++ src/gfxinit.cpp	(/branch/performance_meter)	(revision 92)
@@ -314,7 +314,7 @@
 	377, 377, ///<  · small
 	153, 153, ///<  · medium
 	601, 601, ///<  · large
-	SPR_WARNING_SIGN, SPR_WARNING_SIGN,
+	SPR_WARNING_SIGN, SPR_PERFORMANCE_METER_TPRS,
 	END
 };
 
=== src/main_gui.cpp
==================================================================
--- src/main_gui.cpp	(/trunk)	(revision 92)
+++ src/main_gui.cpp	(/branch/performance_meter)	(revision 92)
@@ -402,11 +402,12 @@
 static void MenuClickHelp(int index)
 {
 	switch (index) {
-		case 0: PlaceLandBlockInfo();       break;
-		case 2: IConsoleSwitch();           break;
-		case 3: MenuClickSmallScreenshot(); break;
-		case 4: MenuClickWorldScreenshot(); break;
-		case 5: ShowAboutWindow();          break;
+		case 0: PlaceLandBlockInfo();         break;
+		case 2: IConsoleSwitch();             break;
+		case 3: ShowPerformanceMeterWindow(); break;
+		case 4: MenuClickSmallScreenshot();   break;
+		case 5: MenuClickWorldScreenshot();   break;
+		case 6: ShowAboutWindow();            break;
 	}
 }
 
@@ -970,7 +971,7 @@
 
 static void ToolbarHelpClick(Window *w)
 {
-	PopupMainToolbMenu(w, 26, STR_02D5_LAND_BLOCK_INFO, 6, 0);
+	PopupMainToolbMenu(w, 26, STR_02D5_LAND_BLOCK_INFO, 7, 0);
 }
 
 static void ToolbarOptionsClick(Window *w)
@@ -1666,6 +1667,7 @@
 		case WKC_CTRL  | 'S': MenuClickSmallScreenshot(); break;
 		case WKC_CTRL  | 'G': MenuClickWorldScreenshot(); break;
 		case WKC_CTRL | WKC_ALT | 'C': if (!_networking) ShowCheatWindow(); break;
+		case WKC_CTRL | WKC_ALT | 'P': ShowPerformanceMeterWindow(); break;
 		case 'A': if (CanBuildVehicleInfrastructure(VEH_TRAIN)) ShowBuildRailToolbar(_last_built_railtype, 4); break; // Invoke Autorail
 		case 'L': ShowTerraformToolbar(); break;
 		case 'M': ShowSmallMap(); break;
=== projects/openttd.vcproj
==================================================================
--- projects/openttd.vcproj	(/trunk)	(revision 92)
+++ projects/openttd.vcproj	(/branch/performance_meter)	(revision 92)
@@ -311,6 +311,9 @@
 				RelativePath=".\..\src\pathfind.cpp">
 			</File>
 			<File
+				RelativePath=".\..\src\performance.cpp">
+			</File>
+			<File
 				RelativePath=".\..\src\players.cpp">
 			</File>
 			<File
@@ -594,6 +597,9 @@
 				RelativePath=".\..\src\pathfind.h">
 			</File>
 			<File
+				RelativePath=".\..\src\performance.hpp">
+			</File>
+			<File
 				RelativePath=".\..\src\player.h">
 			</File>
 			<File
@@ -766,6 +772,9 @@
 				RelativePath=".\..\src\order_gui.cpp">
 			</File>
 			<File
+				RelativePath=".\..\src\performance_gui.cpp">
+			</File>
+			<File
 				RelativePath=".\..\src\player_gui.cpp">
 			</File>
 			<File
=== projects/openttd_vs80.vcproj
==================================================================
--- projects/openttd_vs80.vcproj	(/trunk)	(revision 92)
+++ projects/openttd_vs80.vcproj	(/branch/performance_meter)	(revision 92)
@@ -644,6 +644,9 @@
 				>
 			</File>
 			<File
+				RelativePath=".\..\src\performance.cpp">
+			</File>
+			<File
 				RelativePath=".\..\src\players.cpp"
 				>
 			</File>
@@ -1020,6 +1023,9 @@
 				>
 			</File>
 			<File
+				RelativePath=".\..\src\performance.hpp">
+			</File>
+			<File
 				RelativePath=".\..\src\player.h"
 				>
 			</File>
@@ -1248,6 +1254,10 @@
 				>
 			</File>
 			<File
+				RelativePath=".\..\src\performance_gui.cpp"
+				>
+			</File>
+			<File
 				RelativePath=".\..\src\player_gui.cpp"
 				>
 			</File>
=== bin/data/openttd.grf
==================================================================
Cannot display: file marked as a binary type.
=== source.list
==================================================================
--- source.list	(/trunk)	(revision 92)
+++ source.list	(/branch/performance_meter)	(revision 92)
@@ -54,6 +54,7 @@
 	ottdres.rc
 #end
 pathfind.cpp
+performance.cpp
 players.cpp
 queue.cpp
 rail.cpp
@@ -167,6 +168,7 @@
 pathfind.h
 player.h
 player_face.h
+performance.hpp
 queue.h
 rail.h
 road_cmd.h
@@ -223,6 +225,7 @@
 newgrf_gui.cpp
 news_gui.cpp
 order_gui.cpp
+performance_gui.cpp
 player_gui.cpp
 rail_gui.cpp
 road_gui.cpp

Property changes on: 
___________________________________________________________________
Name: svk:merge
 +6aa0318a-3be1-0310-93fa-89fd2396df07:/trunk:10685

